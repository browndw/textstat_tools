{"title":"Distributions","markdown":{"headingText":"Distributions","containsRefs":false,"markdown":"\n\n## Prepare a corpus\n\n### Load the needed packages\n\n```{r}\n#| message: false\n#| error: false\n#| warning: false\n\nlibrary(gt)\nlibrary(quanteda)\nlibrary(quanteda.textstats)\nlibrary(tidyverse)\n```\n\n\n### Load a corpus\n\nThe  repository comes with some data sets. The conventional way to format text data prior to processing is as a table with a column of document ids (which correspond to the the file names) and a column of texts. Such a table is easy to create from text data on your own local drive using the package [**readtext**](https://readtext.quanteda.io/articles/readtext_vignette.html).\n\n\n```{r}\n\nload(\"../data/sample_corpus.rda\")\nload(\"../data/multiword_expressions.rda\")\n```\n\n\nTo peek at the data, we'll look at the first 100 characters in the \"text\" column of the first row:\n\n```{r}\n#| code-fold: true\n\nsample_corpus |>\n  mutate(text = substr(text, start = 1, stop = 100)) |>\n  head(10) |>\n  gt()\n```\n\n\n### Load functions\n\nThe repository also contains a number of useful functions. Here, will load some that will calculate a number of common dispersion measures.\n\n```{r}\n\nsource(\"../R/dispersion_functions.R\")\n```\n\n### Create and corpus\n\nMake a corpus object.\n\n```{r}\nsc <- corpus(sample_corpus)\n```\n\nAnd check the result:\n\n```{r}\n#| code-fold: true\n#| label: tbl-summary\n#| tbl-cap: \"Partial summary of sample corpus.\"\n\nsc |>\n  summary() |>\n  head(10) |>\n  gt()\n```\n\n## Document variables (Name your files systematically!)\n\n::: callout-important\nFile names can encode important meta-data. In this case, the names include text-types, much like the [Corpus of Contemporary American English](https://www.english-corpora.org/coca/help/texts.asp).\n\nThis is **extremely important**. When you build your own corpora, you want to purposefully and systematically name your files and organize your directories. This will save you time and effort later in your analysis.\n:::\n\nWe are now going to extract the meta-data from the file names and pass them as a variable.\n\n```{r}\n\ndoc_categories <- str_extract(sample_corpus$doc_id, \"^[a-z]+\")\n```\n\nCheck the result:\n\n```{r echo=FALSE}\n#| code-fold: true\n#| tbl-cap: \"Document categories.\"\n\ndoc_categories |>\n  unique() |>\n  data.frame(stringsAsFactors = F) |>\n  structure(names = c(\"doc_cats\")) |>\n  gt() |> \n  tab_options(table.width = pct(50))\n```\n\nWe will now assign the variable to the corpus. The following command might look backwards, with the function on the left hand side of the **<-** operator. That is because it's an accessor function, which lets us add or modify data in an object. You can tell when a function is an accessor function like this because its help file will show that you can use it with **<-**, for example in **?docvars**.\n\n```{r}\ndocvars(sc, field = \"text_type\") <- doc_categories\n```\n\nAnd check the summary again:\n\n```{r}\n#| code-fold: true\n#| tbl-cap: \"Partial summary of sample corpus.\"\n\nsc |>\n  summary() |>\n  head(10) |>\n  gt()\n```\n\n::: callout-warning\nAssigning **docvars** is based entirely on ordering. In other words, you are simply attaching a vector of categories to the corpus object. There is no merging by shared keys. Thus, you always need to be sure that your **docvars** are in the same order as your **doc_ids**. This is the reason why we extracted them directly from the **doc_ids**.\n:::\n\n## Tokenize the corpus\n\nWe'll use **quanteda** to tokenize. And after tokenization, we'll convert them to lower case. *Why do that here?* As a next step, we'll being combining tokens like *a* and *lot* into single units. And we'll be using a list of expressions that isn't case sensitive.\n\n```{r}\n\nsc_tokens <- tokens(sc, include_docvars=TRUE, remove_punct = TRUE, remove_numbers = TRUE, remove_symbols = TRUE, what = \"word\")\n\nsc_tokens <- tokens_tolower(sc_tokens)\n```\n\n## Multi-word Expressions\n\nAn issue that we run into frequently with corpus analysis is what to do with multi-word expressions. For example, consider a common English quantifier: \"a lot\". Typical tokenization rules will split this into two tokens: *a* and *lot*. But counting *a lot* as a single unit might be important depending on our task. We have a way of telling **quanteda** to account for these tokens.\n\nAll that we need is a list of multi-word expressions.\n\nThe **cmu.textstat** comes with an example of an mwe list called **multiword_expressions**:\n\n```{r echo=FALSE}\nknitr::kable(tail(multiword_expressions), col.names = \"\", caption = \"Examples of multi-word expressions.\")\n```\n\nThe **tokens_compound()** function looks for token sequences that match our list\nand combines them using an underscore.\n\n```{r compound_tokens}\nsc_tokens <- tokens_compound(sc_tokens, pattern = phrase(multiword_expressions))\n```\n\n## Create a document-feature matrix\n\nWith our tokens object we can now create a document-feature-matrix using the\n**dfm()** function. As a reminder, a **dfm** is table with one row per document in the corpus, and one column per unique token in the corpus. Each cell contains a count of how many times a token shows up in that document.\n\n```{r dfm}\nsc_dfm <- dfm(sc_tokens)\n```\n\nNext we'll create a **dfm** with proportionally weighted counts.\n\n```{r}\nprop_dfm <- dfm_weight(sc_dfm, scheme = \"prop\")\n```\n\n## Token distributions\n\n### Distributions of *the*\n\nLet's start by selecting frequencies of the most common token in the corpus:\n\n```{r}\nfreq_df <- textstat_frequency(sc_dfm) %>%\n  data.frame(stringsAsFactors = F)\n```\n\n```{r}\n#| code-fold: true\n#| tbl-cap: \"The 10 most frequent tokens in the sample corpus.\"\n\nfreq_df |>\n  head(10) |>\n  gt()\n```\n\nFrom the weighted **dfm**, we can select any token that we'd like to look at more closely. In this case, we'll select the most frequent token: *the*.\n\nAfter selecting the variable, we will convert the data into a more friendly data structure.\n\nThere are easier ways of doing this, but the first bit of the code-chunk allows us to filter by rank and return a character vector that we can pass. This way, we can find a word of any arbitrary rank.\n\nAlso note how the **rename()** function is set up. Let's say our token is *the*. The **dfm_select()** function would result with a column named **the** that we'd want to rename **RF**. So our typical syntax would be: **rename(RF = the)**. In the chunk below, however, our column name is the variable **word**. To pass that variable to **rename**, we use **!!name(word)**.\n\n```{r select}\n#| warning: false\n#| message: false\n\nword <- freq_df %>% \n  filter(rank == 1) %>% \n  dplyr::select(feature) %>%\n  as.character()\n\nword_df <- dfm_select(prop_dfm, word, valuetype = \"fixed\") # select the token\n\nword_df <- word_df %>% \n  convert(to = \"data.frame\") %>% \n  cbind(docvars(word_df)) %>% \n  rename(RF = !!as.name(word)) %>% \n  mutate(RF = RF*1000000)\n```\n\nWith that data it is a simple matter to generate basic summary statistics using the **group_by()** function:\n\n```{r}\nsummary_table <- word_df %>% \n  group_by(text_type) %>%\n  summarize(MEAN = mean(RF),\n              SD = sd(RF),\n              N = n())\n```\n\n```{r}\n#| code-fold: true\n#| tbl-cap: \"Means and standard deviations by text-type.\"\n\nsummary_table |>\n  gt()\n```\n\nAnd we can inspect a histogram of the frequencies. To set the width of our bins we'll use the Freedman-Diaconis rule. The bin-width is set to:\n$$h = 2 x \\frac{IQR(x)}{n^{1/3}}$$\n\nSo the number of bins is (max-min)/h, where n is the number of observations, max is the maximum value and min is the minimum value.\n\n```{r bin_width}\nbin_width <- function(x){\n  2 * IQR(x) / length(x)^(1/3)\n  }\n```\n\nNow we can plot a histogram. We're also adding a dashed line showing the mean. Note we're also going to use the **scales** package to remove scientific notation from our tick labels.\n\n```{r}\n#| fig-height: 2.5\n#| fig-width: 7\n#| fig-cap: \"Histogram of the token *the*\"\n\nggplot(word_df,aes(RF)) + \n  geom_histogram(binwidth = bin_width(word_df$RF), colour=\"black\", fill=\"white\", linewidth=.25) +\n  geom_vline(aes(xintercept=mean(RF)), color=\"red\", linetype=\"dashed\", linewidth=.5) +\n  theme_classic() +\n  scale_x_continuous(labels = scales::comma) +\n  xlab(\"RF (per mil. words)\")\n```\n\n### Distributions of *the* and *of*\n\nNow let's try plotting histograms of two tokens on the same plot. First we're going to use regular expressions to select the columns. The carat or hat **^** looks for the start of line. Without it, we would also get words like \"blather\". The dollar symbol **$** looks for the end of a line. The straight line | means OR. Think about how useful this flexibility can be. You could, for example, extract all words that end in *-ion*.\n\n```{r}\n#| warning: false\n\n# Note \"regex\" rather than \"fixed\"\nword_df <- dfm_select(prop_dfm, \"^the$|^of$\", valuetype = \"regex\")\n\n# Now we'll convert our selection and normalize to 10000 words.\nword_df <- word_df %>% \n  convert(to = \"data.frame\") %>%\n  mutate(the = the*10000) %>%\n  mutate(of = of*10000)\n\n# Use \"pivot_longer\" to go from a wide format to a long one\nword_df <- word_df %>% \n  pivot_longer(!doc_id, names_to = \"token\", values_to = \"RF\") %>% \n  mutate(token = factor(token))\n```\n\nNow let's make a new histogram. Here we assign the values of color and fill to the \"token\" column. We also make the columns a little transparent using the \"alpha\" setting.\n\n```{r}\n#| fig-width: 7\n#| fig-height: 2.5\n#| fig-cap: \"Histogram of the tokens *the* and *of*.\"\n\nggplot(word_df,aes(x = RF, color = token, fill = token)) + \n  geom_histogram(binwidth = bin_width(word_df$RF), alpha=.5, position = \"identity\") +\n  theme_classic() +\n  xlab(\"RF (per mil. words)\") +\n  theme(axis.text = element_text(size=5))\n```\n\nIf we don't want overlapping histograms, we can use **facet_wrap()** to split the plots.\n\n```{r}\n#| fig-width: 7\n#| fig-height: 2.5\n#| fig-cap: \"Histogram of the tokens *the* and *of*.\"\n\nggplot(word_df,aes(x = RF, color = token, fill = token)) + \n  geom_histogram(binwidth = bin_width(word_df$RF), alpha=.5, position = \"identity\") +\n  theme_classic() +\n  theme(axis.text = element_text(size=5)) +\n  theme(legend.position = \"none\") +\n  xlab(\"RF (per mil. words)\") +\n  facet_wrap(~ token)\n```\n\n::: callout-important\n## Pause for Lab Set Question\n\nComplete [Task 1 in Lab Set 2](../lab_sets/LabSet_02.qmd#distributions).\n:::\n\n## Dispersion\n\nWe can also calculate dispersion, and there are a variety of measures at our disposal. Our toolkit has several functions for producing these calculations.\n\nFor example, we can find the dispersion of any specific token:\n\n```{r token_dispersions}\nthe <- dispersions_token(sc_dfm, \"the\") %>% unlist()\n```\n\n```{r echo=FALSE}\nknitr::kable(the, digits = 3, caption = \"Dispersion measures for the token \\\\textit{the}.\", \"simple\", col.names = \"\")\n```\n\nAnd let's try another token to compare:\n\n```{r}\ndata <- dispersions_token(sc_dfm, \"data\") %>% unlist()\n```\n\n```{r echo=FALSE}\nknitr::kable(data.frame(the = the[\"Deviation of proportions DP\"], data = c(data[\"Deviation of proportions DP\"])), digits = 3, caption = \"Deviation of Proportions for the tokens \\\\textit{the} and \\\\textit{data}.\", \"simple\")\n```\n\n::: callout-important\n## Pause for Lab Set Question\n\nComplete [Task 2 in Lab Set 2](../lab_sets/LabSet_02.qmd#distributions).\n:::\n\n### Dispersions for all tokens\n\nWe can also calculate selected dispersion measures for all tokens using **dispersions_all()**:\n\n```{r all_dispersions, warning=FALSE, message=FALSE}\nd <- dispersions_all(sc_dfm)\n```\n\n```{r echo=FALSE}\nknitr::kable(head(d), digits = 3, caption = \"Dispersion measures for all tokens.\", \"simple\")\n```\n\n## Generating a frequency table\n\nAlternatively, **frequency_table()** returns only Deviation of Proportions and Average Reduced Frequency.\n\nNote that ARF requires a tokens object and takes a couple of minutes to calculate.\n\n```{r frequency_table}\nft <- frequency_table(sc_tokens)\n```\n\n```{r echo=FALSE}\nknitr::kable(head(ft), digits = 3, caption = \"Frequency and dispersion measures for all tokens.\", \"simple\")\n```\n\n::: callout-important\n## Pause for Lab Set Question\n\nComplete [Task 3 in Lab Set 2](../lab_sets/LabSet_02.qmd#distributions).\n:::\n\n\n## Zipf's Law\n\nLet's plot rank against frequency for the 100 most frequent tokens in the sample corpus.\n\n```{r}\n#| fig-width: 7\n#| fig-height: 4\n#| fig-cap: \"Token rank vs. frequency.\"\n\nggplot(freq_df %>% filter(rank < 101), aes(x = rank, y = frequency)) +\n  geom_point(shape = 1, alpha = .5) +\n  theme_classic() +\n  ylab(\"Absolute frequency\") +\n  xlab(\"Rank\")\n```\n\nThe relationship you're seeing between the rank of a token and it's frequency holds true for almost any corpus and is referred to as **Zipf's Law** (see Brezina pg. 44).\n\n::: callout-important\n## Pause for Lab Set Question\n\nComplete [Task 4 in Lab Set 2](../lab_sets/LabSet_02.qmd#distributions).\n:::\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"distributions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","editor":"source"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}