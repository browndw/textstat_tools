<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_0258i" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Mini-micro Project Report - Speaking Clock (SC)</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
<note resp="British Academic Written English (BAWE) corpus project">Language used in quote: <foreign id="English">English</foreign>
</note>
<note resp="British Academic Written English (BAWE) corpus project">deleted: header: assignment name; footer: student names, page numbers</note>
<note resp="British Academic Written English (BAWE) corpus project">appendices: system specifications, computer code</note>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2005-02</p>
<p n="module title">Computer Organisation and Architecture</p>
<p n="module code">CG152</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">3984</p>
<p n="number of s-units">158</p>
<p n="number of p">65</p>
<p n="number of tables">0</p>
<p n="number of figures">0</p>
<p n="number of block quotes">10</p>
<p n="number of formulae">0</p>
<p n="number of lists">0</p>
<p n="number of paragraphs formatted like lists">24</p>
<p n="abstract present">abstract present</p>
<p n="average words per s-unit">25.2</p>
<p n="average s-units per p">2.4</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1984</p>
<p n="first language">Hindi</p>
<p n="education">OSA</p>
<p n="course">Computer Science</p>
<p n="student ID">0258</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<titlePart rend="underlined">Computer Organisation and Architecture</titlePart>
<docTitle>
<titlePart rend="underlined bold">Mini-micro Project Report - Speaking Clock (SC)</titlePart>
</docTitle>
<titlePart>Report reference code: <hi rend="bold">CG 152</hi>
</titlePart>
<titlePart>Name of Student1: <name type="student name"/>
<hi rend="bold"> Student ID</hi>: <name type="student ID"/> Name of Student2: <name type="student name"/>
<hi rend="bold"> Student ID: <name type="student ID"/>
</hi>
</titlePart>
</titlePage>
<div1 type="toc" n="2">
<head>Contents Page</head>
<p/>
</div1>
</front>
<body>
<div1 type="abstract">
<head rend="underlined bold">Summary</head>
<p n="p1.65">
<s n="s1.2;p1.65">The mini micro project was the way to put into the practice what we learned in our module. </s>
<s n="s2.2;p1.65">The project which was given to us was the Speaking clock. </s>
</p>
<p n="p2.65">
<s n="s1.5;p2.65">The speaking clock is the project that uses most of the concepts that we have learned in our module COMPUTER STRUCTURE AND ORGRANISATIONS. The project was an intense task to complete, as it used most of the concepts of the Digital Input and Output. </s>
<s n="s2.5;p2.65">The purpose of this project was to learn how to control hardware devices through software. </s>
<s n="s3.5;p2.65">The main objective of the project was to develop a system that produced the most acceptable spoken time when the key is pressed. </s>
<s n="s4.5;p2.65">The program was written in C language. </s>
<s n="s5.5;p2.65">In the time given of 4 labs we were able to complete the project and also tried to add few functions that enhanced the speaking of the clock. </s>
</p>
</div1>
<div1 type="front-back-matter">
<head rend="underlined bold">Responsibilities and Contributions</head>
<p>Both of us in this project worked as a team which made it possible to complete the project to our full satisfaction. None of us had more or less contribution in the project. Both of us worked hard towards the project and also this project helped us to clear more of our concepts in Digital Input and Output. With team spirit we were able to complete our project as both of us use to have opinions on different sub parts of the program and then deciding which suited the specification the best was implemented in the program. </p>
</div1>
<div1 type="section">
<head rend="underlined bold">Introduction</head>
<p n="p3.65">
<s n="s1.2;p3.65">The objective of the project "SPEAKING CLOCK" was to develop a system that produces the most acceptable spoken time when a key is pressed on the terminal. </s>
<s n="s2.2;p3.65">The time would be spoken by using a combination of allophones to create a string for the sound. </s>
</p>
<p n="p4.65">
<s n="s1.6;p4.65">As we already had the knowledge as how most of the VIA register works, it was not very difficult for both of us to understand as how to go about in the speaking clock project. </s>
<s n="s2.6;p4.65">The software labs done earlier helped both of us as where to implement different things in the project .We were able to clear most of your concepts in the digital input and output topic while doing the project. </s>
<s n="s3.6;p4.65">This particular project required software programming only. </s>
<s n="s4.6;p4.65">The project comprised the use of SWET and a speaker. </s>
<s n="s5.6;p4.65">After the completion of the code, it was loaded on to the SWET, which was connected to the speaker and then executed. </s>
<s n="s6.6;p4.65">Before doing this project we didn't had any idea of the C Language but still with the help of lab assistants we were able to complete our project within the 4 provided labs. </s>
</p>
</div1>
<div1 type="section">
<head rend="underlined bold">Analysis of system specification, design details</head>
<p n="p5.65">
<s n="s1.1;p5.65">In this segment, we have presented details of the working of every section of our final code. </s>
</p>
<div2>
<head rend="underlined bold">Specification</head>
<p rend="bulleted" n="p6.65">
<s n="s1.1;p6.65">You should be able to input the initial time in hours minutes and seconds HH:MM:SS. </s>
</p>
<p rend="bulleted" n="p7.65">
<s n="s1.1;p7.65">Acceptable spoken time must be heard when a key is pressed on the terminal. </s>
</p>
<p rend="bulleted" n="p8.65">
<s n="s1.1;p8.65">The time should increment like a digital clock and it should be shown on the terminal. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">Design of Sub-systems</head>
<p n="p9.65">
<s n="s1.1;p9.65">In order to use the Versatile Interface Adapter we had to define pointers to the registers, which we wanted to use in the program. </s>
</p>
<p n="p10.65">
<s n="s1.2;p10.65">We set port B Data Direction Register (DDRB) to 1 so that it carries an output signal. </s>
<s n="s2.2;p10.65">Port A DDRB is set to 0 so that it can carries an input values. </s>
</p>
<p n="p11.65">
<s n="s1.1;p11.65">Port B Output Data Register (ORB) is used to output the time from the allophones used. </s>
</p>
<p n="p12.65">
<s n="s1.6;p12.65">We initialised the Peripheral Control Register (PCR) to 1 so that when the CA1 interrupt flag (IFR1) will be set by a positive transition (low to high) on the CA1 pin. </s>
<s n="s2.6;p12.65">By setting Interrupt Flag Register (IFR) bit, it can cause an interrupt if the corresponding bit in Interrupt Enable Register (IER) is set. </s>
<s n="s3.6;p12.65">We have written a value to Interrupt Enable Register so to that the Timer T1 Interrupt is enabled (bit 6) and Set/Clear Control (bit 7) is set so that each data bus bit is set to logic 1. </s>
<s n="s4.6;p12.65">We needed a Timer so that produced an evenly spaced interrupts that was continuous. </s>
<s n="s5.6;p12.65">We set the Auxiliary Control Register (bit 6) to logic 1 so that T1 is in free-running mode and generates continuous interrupts. </s>
<s n="s6.6;p12.65">Refer to APPENDIX A. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">Design &amp; System implementation</head>
<div3>
<head rend="underlined bold">THE ARRAY FOR THE SOUND</head>
<p n="p13.65">
<s n="s1.1;p13.65">The main requirement of the project was the speaking of the accurate time by the clock. </s>
</p>
<p n="p14.65">
<s n="s1.4;p14.65">The first key thing that was done in the project was making different sounds by taking right values from the 64 allophones sounds that were provided in the lab sheets. </s>
<s n="s2.4;p14.65">We made a two dimensional array in which we stored all the numeric values that were required during the speaking of the clock. </s>
<s n="s3.4;p14.65">The size of the 2-d array was 24 by 14. </s>
<s n="s4.4;p14.65">Each sound of the numeric digit 0 to 20 was given in the array with required pauses that were one of the second argument of the speak() function. </s>
</p>
<quote lang="English">{13, 200, 46, 400, 7, 100, 11, 300, 17, 25, 19, 200, 0, 0}, /* 20 */ {40, 300, 52, 50, 17, 25, 19, 200, 0, 0, 0, 0, 0, 0}, /* 30 */ {40, 1000, 58, 3000, 17, 25, 19, 200, 0, 0, 0, 0, 0, 0}, /* 40 */ {40, 100, 12, 50, 40, 300, 17, 25, 19, 200, 0, 0, 0, 0} /* 50 */</quote>
<p rend="bulleted" n="p15.65">
<s n="s1.2;p15.65">The last three elements of the array were build to produce the sound for the 30,40, 50 number. </s>
<s n="s2.2;p15.65">Since they were used with the combination of other elements when the time was greater then 30. </s>
</p>
<p n="p16.65">
<s n="s1.1;p16.65">As if the time entered on the terminal was 31 then the speak function carried the parameters for the two digit one was 30 and the other array element which was sent as a parameter was to produce the sound for the digit 1.So any time that was above 20 used the same pattern for all minutes as well as seconds. </s>
</p>
<quote lang="English">delay( int noof_delay ) { volatile int i; for (i=0; i&lt;noof_delay; i++) ; /* a for loop which does nothing */ }</quote>
<p rend="bulleted" n="p17.65">
<s n="s1.1;p17.65">Different values of the pauses was provided in the array according to the requirement .The implementation of the pauses in the program was not done with the use of the allophone codes that were provided, But was achieved by the use of another function that was the delay() function. </s>
</p>
<p n="p18.65">
<s n="s1.1;p18.65">The delay() function took a integer type number as the parameter and then an empty loop was executed by the use of for loop structure which was used so as to bring a delay in different sounds that were to be produced by the clock. </s>
</p>
<p n="p19.65">
<s n="s1.2;p19.65">Less pauses where given when the values for 30, 40 and 50 were given in the array as the next digit that has to spoken by the clock didn't needed much of the pause in it as saying "thirty five" should not have a big pause in between "thirty" and "five" speaking by the clock. </s>
<s n="s2.2;p19.65">Proper delays were required between each allophone value as if the pause provided was small then there was no distinction between the words as they two sounds overlapped with each other as the process within the program was very fast so delay were very essential thing to be provided in every element of the array. </s>
</p>
<p n="p20.65">
<s n="s1.1;p20.65">Giving proper delays in the elements of the array took us lot of time as it was not exactly same for all the words some needed more some less. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">INPUT FROM THE USER</head>
<quote lang="English">prf("\nEnter hours (00): "); hour1 = term_in();</quote>
<p rend="bulleted" n="p21.65">
<s n="s1.3;p21.65">For the purpose of reading in a value from the keyboard, we were required to make use of a function 'term_in()' which when called would return the 7-bit ASCII character code. </s>
<s n="s2.3;p21.65">A message was printed out prompting the user to key in the digit for the hours for example. </s>
<s n="s3.3;p21.65">The method 'term_in()' was then called and the returned value stored in a variable ASCII 1 </s>
</p>
<quote lang="English">prf("%d", minutes2 - 48);</quote>
<p rend="bulleted" n="p22.65">
<s n="s1.3;p22.65">The value which was given on the terminal was the ASCII value so it was changed to the normal form by subtracting 48 from it .As the ASCII value for the character 0 is 48 and the values for other numbers are in continuity like 1 has the value 49, 2 as 50. </s>
<s n="s2.3;p22.65">So to get the value 1, we subtracted 48 from it and the first input digit was obtained. </s>
<s n="s3.3;p22.65">In the same way all the input are taken and evaluated in the program. </s>
</p>
<quote lang="English"> minutes = ((minutes1-48)*10) + (minutes2-48);</quote>
<p n="p23.65">
<s n="s1.2;p23.65">On the terminal the value that was printed was not the ASCII value but was the value that was obtained after subtracting 48 from it. </s>
<s n="s2.2;p23.65">Then one final variable for each of the hrs, min and second was used which combined the two digit and made into a one value and that value was then used further for the speaking of the clock. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">OTHER FUNCTIONS FOR SPEAKING OF THE CLOCK</head>
<quote lang="English">void thetimeis() { speak(33, 2000); delay(3000); speak(13, 400); speak(6, 1000); speak(16, 500); delay(3000); speak(12, 600); speak(38, 3500); delay(2000); }</quote>
<p rend="bulleted" n="p24.65">
<s n="s1.5;p24.65">The first function used is the <hi rend="underlined">thetimeis()</hi>. </s>
<s n="s2.5;p24.65">This is the first function, which is called while the speaking of the clock. </s>
<s n="s3.5;p24.65">This function passes different parameters to the speak() function which is used to produce the sound of "the time is" before the time is spoken by the clock. </s>
<s n="s4.5;p24.65">There is also the use of the function delay() in the function so as to bring distinction in the three words. </s>
<s n="s5.5;p24.65">The function <hi rend="underlined">delay()</hi> runs an empty loop till the parameter value. </s>
</p>
<quote lang="English">void and() { speak(26, 800); speak(11, 200); speak(21, 700); }</quote>
<p rend="bulleted" n="p25.65">
<s n="s1.2;p25.65">The next function which is used is the <hi rend="underlined">and()</hi> function which in the same way passes the parameter to the speak() function as the timeis() function and the word "and" is spoken by the clock. </s>
<s n="s2.2;p25.65">The delay() function is again used in this function. </s>
</p>
<quote lang="English">void sayseconds() { speak(43, 300); speak(7, 50); speak(8, 700); speak(24, 200); speak(44, 400); speak(43, 1000); }</quote>
<p rend="bulleted" n="p26.65">
<s n="s1.1;p26.65">The third function used is the <hi rend="underlined">saysecond()</hi> function .The function when called in the loop will say the "seconds".The function called the function speak() by giving different parameters which were taken from the 64 allophones sounds that was provided. </s>
</p>
<quote lang="English">void oclock() { speak(30, 200); speak(8, 300); speak(45, 300); speak(24, 200); speak(8, 500); }</quote>
<p rend="bulleted" n="p27.65">
<s n="s1.1;p27.65">The fourth function which is used is the <hi rend="underlined">oclock()</hi> function which when called in the loop will call the function speak to produce the sound . </s>
</p>
</div3>
<div3>
<head rend="underlined bold">THE TIME CONTROLLER IN THE PROGRAM</head>
<p n="p28.65">
<s n="s1.4;p28.65">The timecontrol() function is the function which was called when an interrupt is flagged in the IFR .It responded to the interrupt. </s>
<s n="s2.4;p28.65">This function is used to print the running time which is input by the clock until the program is running and the value of minutes, seconds and hours will keep on changing as the time is changing. </s>
<s n="s3.4;p28.65">There many conditions which are considered in this function as when the value of seconds reaches 60 then the value of seconds is initialised as 0 as the value of minutes is incremented by 1 .If the value of minutes reaches 60 then the value of hours is incremented by 1 and the minutes value to 0. </s>
<s n="s4.4;p28.65">When we have the value of hours as 13 it is changed to 1 .The last thing that is done in the function was the printing the right values on the terminal window as if the value of hours is less then 10 the it will printed in the format of "0:"then the value, same format is used for the printing of the values for the minutes and seconds. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">SPEAK FUNCTION</head>
<quote lang="English">void speak(int sound, int delayTime) { if (!(sound == 0 || delayTime == 0)) { while (!(*VIA_IFR &amp; 2)) ; *VIA_ORB = 64 + sound; *VIA_ORB = sound; delay(delayTime); *VIA_ORB = 64; *VIA_ORB = 0; } clear = *VIA_ORA; }</quote>
<p rend="bulleted" n="p29.65">
<s n="s1.3;p29.65">The function which was used in the program for the speaking of the clock was the speak(int sound, int delayTime) function .The function took 2 parameters one was used for the sound while the other was used to give a pause in the function by the calling of another function which was the delay function which provided pauses in the program whenever required. </s>
<s n="s2.3;p29.65">There was the use of the if and while statement in order to get the function work appropriately .The if statement was if (!(sound == 0 || delayTime == 0)) .The control entered in the function only when the value of sound was not zero or the value for delayTime was zero. </s>
<s n="s3.3;p29.65">The next condition that was implemented in the function was the while statement which was checked when the if statement was true .The condition for the while statement was while (!(*VIA_IFR &amp; 2)) ; .When the while condition was true the control entered the loop and the value of sound was given to the register and after that the other parameter was passed to the delay() function which produced the delay and then control was back again and the while statement executed the condition of !(*VIA_IFR &amp;2)). </s>
</p>
</div3>
<div3>
<head rend="underlined bold">PARAMETERS FOR THE SPEAK FUNCTION</head>
<p n="p30.65">
<s n="s1.2;p30.65">The next thing to be done was sending parameters after checking the value of the time input on the terminal. </s>
<s n="s2.2;p30.65">Many different if statements are implemented in the programming for checking the range of the time input by the user as weather it lies between 10 to 20 or 20 to 30 and so on .By checking the right value the parameters were sent to the speak () function . </s>
</p>
<p n="p31.65">
<s n="s1.3;p31.65">If the value of minutes or seconds was greater then 20 then the function speak() was called two times, because at that stage two distinct words were required to be spoken by the clock .For example if the minutes input by the user was 22 then when the first time the speak() function is called , parameter for speaking twenty was given .Then the other value was checked by subtracting 20 from input .And then sending that value array index to the function .Since the array index was 23x14 so a for loop was used to send parameter to the speak function as it will take values from that array index starting from the first and 14 different values were send to the function when checking the range in the programming. </s>
<s n="s2.3;p31.65">The same programming was implemented for the seconds as well as they also needed to be considered in the same way as minutes in the programming. </s>
<s n="s3.3;p31.65">Through out the programming the minutes and seconds programming carried the same logic with them. </s>
</p>
<p n="p32.65">
<s n="s1.4;p32.65">When the clock spoke the minutes pause was provided and the and() function was called at that time. </s>
<s n="s2.4;p32.65">Everywhere in the programming pauses are provided by calling of the delay() function by passing suitable parameters to the function as per requirement. </s>
<s n="s3.4;p32.65">When we are sending the parameters, the speak() function takes two parameter one is the sound value and other is the delay time. </s>
<s n="s4.4;p32.65">In the 2-d array which is used each entry in it contains a pause in it which is passed together with the sound and once the value is sent to ORB then the function delay is called by sending the second parameter to that function giving delays in the speaking of the clock was crucial thing and required lot of attention to be done correctly with loads of checking. </s>
</p>
</div3>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">System implementation and testing</head>
<p n="p33.65">
<s n="s1.3;p33.65">Implementing the task was challenging and a lot of thought had to be put into the program of how the system will all function together once all the method had been implemented. </s>
<s n="s2.3;p33.65">After compiling and re-compiling the program to fix errors, the program seemed to work as expected. </s>
<s n="s3.3;p33.65">We minimised the risk of causing error in the program by implementing the code so that methods didn't get overloaded. </s>
</p>
<p n="p34.65">
<s n="s1.1;p34.65">Although we still needed to carry out rigorous testing to see if there were any faults with the program, we were satisfied with the system at this stage. </s>
</p>
<div2>
<head rend="underlined bold">Testing</head>
<p n="p35.65">
<s n="s1.11;p35.65">One of the main tests that we carried out was the testing of the allophones. </s>
<s n="s2.11;p35.65">This was a continuous test throughout the project. </s>
<s n="s3.11;p35.65">We need to be sure that the allophones that were stringed together were outputting clear times so that a people can understand what the time was. </s>
<s n="s4.11;p35.65">We changed some of the allophones to try and make the time clearer. </s>
<s n="s5.11;p35.65">Trial and error was the best way to get a sound that was good enough. </s>
<s n="s6.11;p35.65">As part of the specification the time must be clear enough to be understood by individuals. </s>
<s n="s7.11;p35.65">Although numbers seemed to be easier to plug string together from the allophones, there were a lot more numbers than words. </s>
<s n="s8.11;p35.65">We found that words were more difficult to string together from the allophones. </s>
<s n="s9.11;p35.65">We used the same technique as trial an error to make the words sound clearer. </s>
<s n="s10.11;p35.65">A lot of time was spent on working out how to string these allophones together to create a number and a word. </s>
<s n="s11.11;p35.65">We split the task up between ourselves to try and work quickly and efficiently through the task. </s>
</p>
<p n="p36.65">
<s n="s1.8;p36.65">When we entered the time value on the console, it wasn't what we expected to see. </s>
<s n="s2.8;p36.65">We intended to enter 09:00:00 on the console. </s>
<s n="s3.8;p36.65">The character 0 appeared as 48. </s>
<s n="s4.8;p36.65">48 is the decimal value of the ASCII character set for the character 0. </s>
<s n="s5.8;p36.65">To solve this problem we had to subtract 48 from the character that were typed in from the keyboard. </s>
<s n="s6.8;p36.65">But we need to make sure that when the first value of <hi rend="underlined">H</hi>H:<hi rend="underlined">M</hi>M:<hi rend="underlined">S</hi>S needed to be subtracted by 48 and then multiply it by 10 and then add the second value to it to get the value of the HH:MM:SS. For example if we inputted 12:00:00 in the console then what the program does is to translate the decimal value of 1 to be 1 and multiply it by 10. </s>
<s n="s7.8;p36.65">Same producer happens when you press 2 on the keyboard, but the value does not get multiplied. </s>
<s n="s8.8;p36.65">Therefore on the console we get 12 because 10 + 2 = 12. </s>
</p>
<p n="p37.65">
<s n="s1.4;p37.65">We carried out test for the interrupt pulses that controlled the accuracy of time in seconds. </s>
<s n="s2.4;p37.65">We managed to fine-tune the pulses as accurate as we believe it could have been. </s>
<s n="s3.4;p37.65">We set a time for example 10:59:00 to see if the clock would change to 11:00:00 when seconds get greater than 59. </s>
<s n="s4.4;p37.65">This part of the test to be working and we knew that the clock was working fine because in our program we have set conditions to deal with these type of scenarios. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">Analysis and discussion of system performance</head>
<p n="p38.65">
<s n="s1.1;p38.65">System Requirement </s>
</p>
<p n="p39.65">
<s n="s1.1;p39.65">You should be able to input the initial time in hours minutes and seconds HH:MM:SS. </s>
</p>
<p n="p40.65">
<s n="s1.1;p40.65">Outcome </s>
</p>
<p n="p41.65">
<s n="s1.3;p41.65">The time can be set at via the keyboard at the start of the program on the terminal window. </s>
<s n="s2.3;p41.65">We found that you can enter invalid time on the terminal. </s>
<s n="s3.3;p41.65">This caused the programme to stop working. </s>
</p>
<p n="p42.65">
<s n="s1.1;p42.65">This problem can be resolved in future by having a condition in the program that only lets you input the time in a certain format. </s>
</p>
<p n="p43.65">
<s n="s1.1;p43.65">System Requirement </s>
</p>
<p n="p44.65">
<s n="s1.1;p44.65">Acceptable spoken time must be heard when a key is pressed on the terminal. </s>
</p>
<p n="p45.65">
<s n="s1.1;p45.65">Outcome </s>
</p>
<p n="p46.65">
<s n="s1.3;p46.65">When you press the enter key the time is spoken at the current time. </s>
<s n="s2.3;p46.65">The time was recited at moderate speed by the loud speaker. </s>
<s n="s3.3;p46.65">The time was heard clearly. </s>
</p>
<p n="p47.65">
<s n="s1.1;p47.65">System Requirement </s>
</p>
<p n="p48.65">
<s n="s1.1;p48.65">The time should increment like a digital clock and it should be shown on the terminal. </s>
</p>
<p n="p49.65">
<s n="s1.1;p49.65">Outcome </s>
</p>
<p n="p50.65">
<s n="s1.5;p50.65">The time was updated on the terminal window every second. </s>
<s n="s2.5;p50.65">Because we used the 'free running' mode Timer 1, it produces a continuous series of evenly spaced interrupts that is ideal for accurate time. </s>
<s n="s3.5;p50.65">Also because the frequency is not affected by the variations in the processor interrupts, it's still able to keep track of the time when you press a key on the keyboard to get the time. </s>
<s n="s4.5;p50.65">Although we had to use an estimate for the Timer 1 it was still accurate to 1 sec. </s>
<s n="s5.5;p50.65">An improvement with the accuracy of the time can be made here if we used an oscilloscope to find the number of clock cycles per second. </s>
</p>
<div2>
<head rend="underlined bold">Problems encountered</head>
<p n="p51.65">
<s n="s1.2;p51.65">When you enter a time on the terminal the format should be HH:MM:SS. The problem was that if you had a value that was less than 10, then a 0 is required in front of the number to make it an acceptable format. </s>
<s n="s2.2;p51.65">We had to place a condition so that if the number was less than 10 then place a 0 in front of the number. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">Technical Difficulties</head>
<p n="p52.65">
<s n="s1.8;p52.65">When stringed each allophone together we had to test it to see if it was heard clearly. </s>
<s n="s2.8;p52.65">This testing took a lot of valuable time because compiling the code and loading it took a lot of time. </s>
<s n="s3.8;p52.65">To speed up the process we disable the Timer 1. </s>
<s n="s4.8;p52.65">This made was enabled us to carry out test quicker as loading time was shorten. </s>
<s n="s5.8;p52.65">Although time in the lab was limited so we had to work relatively quickly through the tasks and this caused mistake to occur like missing semi-colons or parentheses. </s>
<s n="s6.8;p52.65">These were fixed eventually when we looked back through the program, but it did stop us from progressing further. </s>
<s n="s7.8;p52.65">We liked to have written a method that fixed the problem of being able to set incorrect times. </s>
<s n="s8.8;p52.65">Because we did not have enough time in the lab we were not able to carry this task out. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">Future Extensions</head>
<p rend="bulleted" n="p53.65">
<s n="s1.1;p53.65">There could be an optional continuous spoken time, which would speak every minute or hour. </s>
</p>
<p rend="bulleted" n="p54.65">
<s n="s1.1;p54.65">A stopwatch could be implemented to time how long people have been working at the terminal. </s>
</p>
<p rend="bulleted" n="p55.65">
<s n="s1.2;p55.65">There could be a feature that can also take account of the date. </s>
<s n="s2.2;p55.65">This can be used to implement the transition from summer to wintertime. </s>
</p>
<p rend="bulleted" n="p56.65">
<s n="s1.3;p56.65">A reminder system can be implanted to remind people of important events like meetings. </s>
<s n="s2.3;p56.65">This implementation can be done by taking the time input from the user when it wants the reminder to be set. </s>
<s n="s3.3;p56.65">When the program is running and the program encounter that time by the use of if statement then other function can be called which produces a different sound which can say anything as the requirements. </s>
</p>
<p rend="bulleted" n="p57.65">
<s n="s1.3;p57.65">The time zones around the world could be implemented to show the time in different countries. </s>
<s n="s2.3;p57.65">This implementation can be achieved by making one more variable that takes the input from the user as with respect to the current which countries time it want the clock to speak by giving choose of different countries. </s>
<s n="s3.3;p57.65">Then by checking that input the value from the current time can be added or subtracted and then the value to be sent to the other function. </s>
</p>
<p rend="bulleted" n="p58.65">
<s n="s1.1;p58.65">The need of a speaking clock </s>
</p>
<p rend="bulleted" n="p59.65">
<s n="s1.4;p59.65">The system can be used to help people of all ages. </s>
<s n="s2.4;p59.65">A speaking clock can help primary school children to tell the time. </s>
<s n="s3.4;p59.65">When they press the 'enter' key on the keyboard the time will be spoken and this will help children how to tell the time and help them with recognising numbers. </s>
<s n="s4.4;p59.65">The blind would benefit greatly by this because at least they can now keep track of the time without having to rely on other people. </s>
</p>
<div2>
<head rend="underlined bold">The need of a speaking clock</head>
<p n="p60.65">
<s n="s1.4;p60.65">The system can be used to help people of all ages. </s>
<s n="s2.4;p60.65">A speaking clock can help primary school children to tell the time. </s>
<s n="s3.4;p60.65">When they press the 'enter' key on the keyboard the time will be spoken and this will help children how to tell the time and help them with recognising numbers. </s>
<s n="s4.4;p60.65">The blind would benefit greatly by this because at least they can now keep track of the time without having to rely on other people. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">Conclusions</head>
<p rend="bulleted" n="p61.65">
<s n="s1.2;p61.65">We managed to complete the project within the time given and achieved to design the system to the specification. </s>
<s n="s2.2;p61.65">Good time management skills enabled us to complete the project on time. </s>
</p>
<p rend="bulleted" n="p62.65">
<s n="s1.1;p62.65">We were able to solve problems encountered during the implementation of speaking clock because we made sure that we tested parts of the code rigorously. </s>
</p>
<p rend="bulleted" n="p63.65">
<s n="s1.1;p63.65">We learned a lot from the outcome of the project and how powerful software is in controlling hardware devices. </s>
</p>
<p rend="bulleted" n="p64.65">
<s n="s1.1;p64.65">Writing the report has also given us greater knowledge of the VIA and how I/O devices operate. </s>
</p>
<p rend="bulleted" n="p65.65">
<s n="s1.1;p65.65">Working as a team we have learned a lot from each other and the experience gained will help us to work in teams in the future better. </s>
</p>
</div1>
</body>
<back>
<div1 type="appendix">
<head rend="underlined bold">Appendices </head>
<p/>
</div1>
</back>
</text>
</TEI.2>
