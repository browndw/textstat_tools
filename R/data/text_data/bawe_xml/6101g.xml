<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6101g" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Multiple Exercises, Computer Architecture</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: student name; "Computer Science". Page footer contains: page number. </note>
</notesStmt>
<sourceDesc>
<p n="level">2</p>
<p n="date">2005-02</p>
<p n="module title">Computer Architecture</p>
<p n="module code">CS2C2</p>
<p n="genre family">Exercise</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">M</p>
<p n="number of authors">1</p>
<p n="number of words">1831</p>
<p n="number of s-units">96</p>
<p n="number of p">35</p>
<p n="number of tables">1</p>
<p n="number of figures">0</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">2</p>
<p n="number of lists">0</p>
<p n="number of paragraphs formatted like lists">0</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">19.1</p>
<p n="average s-units per p">2.7</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1984</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">Computer Science</p>
<p n="student ID">6101</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart rend="bold">Multiple Exercises, Computer Architecture</titlePart>
</docTitle>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="bold">1. General Discussion</head>
<p n="p1.35">
<s n="s1.8;p1.35">In December 1947, the transistor was invented at the Bell Laboratories, sparking the beginning of the digital age. </s>
<s n="s2.8;p1.35">Until the 1970s the computer world was represented by large expensive mainframes that could perform only the most simple of calculations. </s>
<s n="s3.8;p1.35">During the 1970s the idea of a personal computer millions of times more powerful that was small and cheap enough for an individual to own became realistic, and by the late 1980s it had become a huge industry. </s>
<s n="s4.8;p1.35">The field of computer architecture accelerated towards the end of the century at an unprecedented rate. </s>
<s n="s5.8;p1.35">Every year for three decades, new techniques and advances had made the last year's technology obsolete. </s>
<s n="s6.8;p1.35">Computers are now so powerful and small to be ubiquitous, and still they are constantly becoming faster and smaller. </s>
<s n="s7.8;p1.35">But what has been causing this remarkable development, and will it continue? </s>
<s n="s8.8;p1.35">These are issues that will be discussed in this essay. </s>
</p>
<p n="p2.35">
<s n="s1.5;p2.35">To do this it is essential to look at the microprocessor. </s>
<s n="s2.5;p2.35">On November 15 <hi rend="sup">th</hi>, 1971, Intel released the world's first single chip microprocessor, the 4004. </s>
<s n="s3.5;p2.35">It was 12mm <hi rend="sup">2</hi> in area, had just over 2,300 transistors and had a speed of 400 KHz. </s>
<s n="s4.5;p2.35">With its 4-bit CPU, command register, decoder, decoding control, control monitoring of machine commands and interim register, the 4004 was a revolutionary piece. </s>
<s n="s5.5;p2.35">It even provided the computational power of the Pioneer 10 spacecraft. </s>
</p>
<p n="p3.35">
<s n="s1.3;p3.35">By the following year, Intel had doubled the speed to 800 KHz (3,500 transistors, 10 microns). </s>
<s n="s2.3;p3.35">By 1979 the speed had been multiplied by 10, giving 8MHz (29,000 transistors, 3 microns). </s>
<s n="s3.3;p3.35">By 1990 the speeds were 25 MHz (1,200,000 transistors, 1 micron) and by 2000 it had reached 1.5 GHz (42,000,000 transistors, 0.13 microns). </s>
</p>
<p n="p4.35">
<s n="s1.6;p4.35">By analysing this data it is clear that the number of transistors increase by about 55% per year (Moore's law states that the number of transistors per chip doubles every 18 months). </s>
<s n="s2.6;p4.35">This is determined by a number of factors. </s>
<s n="s3.6;p4.35">The feature size of a transistor, as we have seen, has decreased from 10 microns in 1971 to 0.13 microns in 2000. </s>
<s n="s4.6;p4.35">As feature size is a linear measurement, it follows that a linear decrease results in a quadratic increase in transistor density. </s>
<s n="s5.6;p4.35">A quick calculation can confirm that transistor density increases at about 35% per year, and so quadruples in just over 4 years. </s>
<s n="s6.6;p4.35">Die size increases by between 10 and 20% every year. </s>
</p>
<p n="p5.35">
<s n="s1.3;p5.35">Feature size does not just reduce on a horizontal plane, but also on a vertical one. </s>
<s n="s2.3;p5.35">This shrinkage requires a lower operating voltage and as a result it is fair to say that transistor performance increases linearly with a linearly decreasing feature size. </s>
<s n="s3.3;p5.35">One issue that is currently rearing its head is that as transistors are getting smaller the interconnecting wires are causing a significant delay time in circuits (Hennessy and Patterson 2003). </s>
</p>
<p n="p6.35">
<s n="s1.1;p6.35">It has been predicted by the Semiconductor Industries Association that by 2014 clock speed will reach 16.9 GHz with 3,620,000,000 transistors (<seg type="URL" n="www.sia-online.org"/>, 1998). </s>
</p>
<p n="p7.35">
<s n="s1.4;p7.35">Let us turn to memory. </s>
<s n="s2.4;p7.35">In late 1995, SDRAM was introduced with a bandwidth of 50mtps. </s>
<s n="s3.4;p7.35">This increased over the next five years until it reached 133mtps in 2000, when it was replaced with DDR RAM. By late 2003 the bandwidth of DDR RAM had increased to 400mtps, when it was replaced by DDR2 RAM, which currently has a bandwidth o 533mtps. </s>
<s n="s4.4;p7.35">Crucial Technologies (a division of Micron) predicted in late 2004 that by 2007 DDR2 would have reached 800mtps (<seg type="URL" n="www.crucial.com"/>, 2004). </s>
</p>
<p n="p8.35">
<s n="s1.3;p8.35">It can be argued that the improvements in memory have been small in comparison to microprocessors (increasing in performance at less than 10% per year as opposed to the 55% of the microprocessor). </s>
<s n="s2.3;p8.35">The bandwidth of memory increases at about double the rate of the drop in latency. </s>
<s n="s3.3;p8.35">One of the arguments of the DDR RAM over the DDR2 is that the latency is relatively low, so the actual improvements are less still than the statistics indicate (<seg type="URL" n="www.dewassoc.com"/>, 2004). </s>
</p>
<p n="p9.35">
<s n="s1.6;p9.35">The future of memory is looking uncertain. </s>
<s n="s2.6;p9.35">Japan has traditionally dominated the computer memory chip market. </s>
<s n="s3.6;p9.35">Its multinationals (Fujitsu, Hitachi, NEC, Mitsubishi, Sharp and Toshiba) have controlled the production and supply of memory chips. </s>
<s n="s4.6;p9.35">The main focus of Japan's multinationals, however, has been on entire computers, peripherals, telecommunications equipment and consumer electronic systems. </s>
<s n="s5.6;p9.35">The majority of the memory chips produced by these companies end up in the electronic systems they produce. </s>
<s n="s6.6;p9.35">They have then made a profit by selling the excess production to the world market. </s>
</p>
<p n="p10.35">
<s n="s1.2;p10.35">As competitors from Korea and Taiwan have increased market shares, the price of computer memory has gyrated. </s>
<s n="s2.2;p10.35">It has therefore been less expensive for Japan's electronics companies to produce computer memory chips from outside vendors (<seg type="URL" n="www.bccresearch.com"/>, 2004). </s>
</p>
<p n="p11.35">
<s n="s1.5;p11.35">To look any distance into the future, however, it is necessary to zoom out away from the detail and view the wider picture. </s>
<s n="s2.5;p11.35">History has shown that the most reliable predictions usually come from physicists. </s>
<s n="s3.5;p11.35">Currently they are predicting a cap on the current rise in computer performance in 2020. </s>
<s n="s4.5;p11.35">At this point, the limitations of silicon come into play, and the laws of quantum mechanics will take over from the macro world. </s>
<s n="s5.5;p11.35">If computers are to still increase in performance, these limitations will bring about the necessity for new types of computers such as optical, molecular, quantum and DNA. </s>
</p>
<p n="p12.35">
<s n="s1.3;p12.35">It is an accepted fact that in general it takes 15 years for a good new idea to go from being a concept to being widely marketed. </s>
<s n="s2.3;p12.35">An example of this is the personal computer, which started to be very popular in the marketplace about 15 years after the first single chip microprocessor. </s>
<s n="s3.3;p12.35">As quantum computers were first considered in around 1997, this implies that they could be common by 2012 (Kaku, 1998). </s>
</p>
<p n="p13.35">
<s n="s1.2;p13.35">In conclusion it can be said that the rate of increase in microprocessor performance has stayed reasonably constant at 55% over the last three decades, and will probably continue to do so until huge changes will be needed in around another 6 years, beyond which it is difficult to predict. </s>
<s n="s2.2;p13.35">Memory has increased in performance at a much lower rate and if problems in latency can be addressed should continue to increase at about the current rate for the foreseeable future. </s>
</p>
</div1>
<div1 type="front-back-matter">
<head>Bibliography: </head>
<p>Computer Architecture, a Quantitative Approach (Hennessy and Patterson, Morgan Kauffman, 2003) </p>
<p>Visions (Michio Kaku, Oxford University Press, 1998) </p>
<p>Semiconductor Industry Association, <seg type="URL" n="www.sia-online.org"/>, 1998 </p>
<p>DEW Associates Corporation, <seg type="URL" n="www.dewassoc.com"/>, 2004 </p>
<p>Crucial Technology (A Division of Micron), <seg type="URL" n="www.crucial.com"/>, 2004 </p>
<p>Business Communications Company Inc, <seg type="URL" n="www.bccresearch.com"/>, 2004 </p>
</div1>
<div1 type="section">
<head rend="bold">2. Fundamentals of Computer Design</head>
<p n="p14.35">
<s n="s1.1;p14.35">a) </s>
</p>
<p n="p15.35">
<s n="s1.1;p15.35">
<formula notation="" id="BAWE_6101g-form.001"/> </s>
</p>
<p n="p16.35">
<s n="s1.1;p16.35">b) </s>
</p>
<p n="p17.35">
<s n="s1.1;p17.35">
<formula notation="" id="BAWE_6101g-form.002"/> </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">3. Instruction Set Architecture</head>
<table id="BAWE_6101g-tab.001">
<row>
<cell/>
</row>
</table>
<p n="p18.35"/>
</div1>
<div1 type="section">
<head rend="bold">4. Memory Hierarchy Design</head>
<p n="p19.35">
<s n="s1.2;p19.35">Replacement of cache misses is primarily controlled by hardware, whereas the operating system primarily controls virtual memory replacement. </s>
<s n="s2.2;p19.35">The size of the processor address determines the size of the virtual memory, whereas cache size is independent of processor address size. </s>
</p>
<p n="p20.35">
<s n="s1.1;p20.35">There are three different systems of cache: fully associative, direct mapping or set associative. </s>
</p>
<p n="p21.35">
<s n="s1.4;p21.35">In fully associative cache, a block can be placed anywhere and is indexed by content. </s>
<s n="s2.4;p21.35">In direct mapping cache, a block is found by an index (calculated by taking the remainder when dividing the block address by the number of blocks in the cache). </s>
<s n="s3.4;p21.35">The cache entries are then tagged with the upper part of a memory address. </s>
<s n="s4.4;p21.35">Set associative cache is similar, but differs in the fact that a block is found using a set index. </s>
</p>
<p n="p22.35">
<s n="s1.2;p22.35">The miss penalty for virtual memory is high, and so developers usually choose lower miss rates over simpler algorithms. </s>
<s n="s2.2;p22.35">Thus operating systems allow blocks to be placed anywhere in main memory. </s>
</p>
<p n="p23.35">
<s n="s1.3;p23.35">Both paging and segmentation rely on a data structure that is indexed by the page or segment number, containing the physical address of the block. </s>
<s n="s2.3;p23.35">For segmentation, the offset is added to the segment's physical address. </s>
<s n="s3.3;p23.35">For paging, the offset is concatenated to this physical page address. </s>
</p>
<p n="p24.35">
<s n="s1.7;p24.35">When a cache miss occurs, the cache controller must select a block to be discarded. </s>
<s n="s2.7;p24.35">For direct mapping there is no choice as only one block is checked for a hit. </s>
<s n="s3.7;p24.35">For set associative, you can either randomly select a block (easiest to build into hardware) or the least recently used (LRU) block is chosen for replacement. </s>
<s n="s4.7;p24.35">This may be implemented by associating a counter with a block. </s>
<s n="s5.7;p24.35">The counter is incremented at regular intervals or every time the cache is accessed. </s>
<s n="s6.7;p24.35">The counter is reset to zero if the block is accessed. </s>
<s n="s7.7;p24.35">The counter with the highest value indicates the LRU block. </s>
</p>
<p n="p25.35">
<s n="s1.1;p25.35">With virtual memory, as the overriding operating systems guideline is minimising page faults, almost all operating systems try to replace the LRU block because it is least likely to be needed. </s>
</p>
<p n="p26.35">
<s n="s1.2;p26.35">In cache, it is not possible to modify a block until its tag is checked to see if the address is a hit, thus nothing can be written in parallel with tag checking. </s>
<s n="s2.2;p26.35">It takes longer to write than to read and it may be necessary to write to a specific location within a block. </s>
</p>
<p n="p27.35">
<s n="s1.5;p27.35">You can use <hi rend="italic">write-through</hi> where information is written to both blocks in cache and in main memory or <hi rend="italic">write-back</hi> where information is written to just a block in the cache. </s>
<s n="s2.5;p27.35">The modified cache block is written to main memory only when it is replaced. </s>
<s n="s3.5;p27.35">To reduce frequency of write-backs on replacement a dirty bit is used as a status. </s>
<s n="s4.5;p27.35">The status indicates a block is modified (dirty) or clean. </s>
<s n="s5.5;p27.35">If the block is dirty, it should be written back to main memory on a miss. </s>
</p>
<p n="p28.35">
<s n="s1.1;p28.35">With write-back, writes occur at the speed of the cache memory, multiple writes to a block in cache only require one write to main memory and uses less memory bandwidth. </s>
</p>
<p n="p29.35">
<s n="s1.3;p29.35">It is easier to implement write-through, on the other hand, and main memory has a copy of the data (which is useful for operating systems and I/O). </s>
<s n="s2.3;p29.35">Another advantage is that the processor waits for writes to complete during write-through. </s>
<s n="s3.3;p29.35">A common optimisation to reduce write stalls is write buffer, which allows the processor to continue as soon as the data is written to the buffer. </s>
</p>
<p n="p30.35">
<s n="s1.1;p30.35">As it takes a long time to access the level below main memory, the write strategy of virtual memory is always write-back. </s>
</p>
<p n="p31.35">
<s n="s1.2;p31.35">Since the cost of unnecessary access to the next-lower level is so high, virtual memory systems usually include a dirty bit. </s>
<s n="s2.2;p31.35">It allows blocks to be written to disk only if they have been altered since being read from the disk. </s>
</p>
<p n="p32.35">
<s n="s1.3;p32.35">To summarise, blocks can be placed in one of three ways in cache, but in only the first of these in virtual memory. </s>
<s n="s2.3;p32.35">Blocks in main memory are either indexed by content or by an index of some description. </s>
<s n="s3.3;p32.35">Blocks in virtual memory are accessed via a data structure. </s>
</p>
<p n="p33.35">
<s n="s1.2;p33.35">In cache blocks are either selected randomly after a miss, which is easy but can make another miss, or the LRU block is selected. </s>
<s n="s2.2;p33.35">In virtual memory the LRU block is always selected. </s>
</p>
<p n="p34.35">
<s n="s1.1;p34.35">In cache you can either use write-through or write-back, whereas in virtual memory write-back must be used. </s>
</p>
<p n="p35.35">
<s n="s1.1;p35.35">In general there are more options open to the developer when designing cache usage, whereas the penalty of a miss makes virtual memory design more restrictive. </s>
</p>
</div1>
</body>
<back/>
</text>
</TEI.2>
