<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6056b" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Binary Trees</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note/>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2005-03</p>
<p n="module title">Introduction to Algorithms</p>
<p n="module code">CS1G2</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">M</p>
<p n="number of authors">1</p>
<p n="number of words">1232</p>
<p n="number of s-units">63</p>
<p n="number of p">13</p>
<p n="number of tables">2</p>
<p n="number of figures">3</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">1</p>
<p n="number of lists">0</p>
<p n="number of paragraphs formatted like lists">0</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">19.6</p>
<p n="average s-units per p">4.8</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1986</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">Electronic Engineering and Cybernetics</p>
<p n="student ID">6056</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart rend="underlined bold">Binary Trees</titlePart>
</docTitle>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="underlined bold">Introduction</head>
<p n="p1.13">
<s n="s1.5;p1.13">This coursework is aimed at the use of binary trees. </s>
<s n="s2.5;p1.13">Binary trees are similar to linked lists such as stacks but rather than having just one "next" pointer they have two, left and right, so each node has two children. </s>
<s n="s3.5;p1.13">The coursework requires a postfix expression, where the operator comes after the operands, to be read from an edit box and stored into a tree. </s>
<s n="s4.5;p1.13">This in turn can be traversed in several different ways to get the postfix, prefix and infix expressions. </s>
<s n="s5.5;p1.13">As a bonus it is required for the expression to be evaluated using post order traversal. </s>
</p>
</div1>
<div1 type="section">
<head rend="underlined bold">Design and Implementation </head>
<div2>
<head rend="underlined bold">Tree structure</head>
<p n="p2.13">
<s n="s1.7;p2.13">A tree is another form of storing data using pointers. </s>
<s n="s2.7;p2.13">It is made up of a root node, and has a certain number of children. </s>
<s n="s3.7;p2.13">Each child has another set of children. </s>
<s n="s4.7;p2.13">The children at the bottom of the tree that point to nil are called the leaf nodes. </s>
<s n="s5.7;p2.13">This particular tree is a binary tree; this means it has only two children. </s>
<s n="s6.7;p2.13">These are defined as Left child and Right child. </s>
<s n="s7.7;p2.13">Functions to work on the tree are required, these include: MakeEmptyTree, IsEmptyTree, Data, LChild, RChild, MakeBTree, FreeBTree. </s>
</p>
<p n="p3.13">
<s n="s1.9;p3.13">MakeEmptyTree is self explanatory; it will create an empty binary tree, with left and right child pointing to nil. </s>
<s n="s2.9;p3.13">It will return the pointer to the root node. </s>
<s n="s3.9;p3.13">IsEmptyTree, again, is self explanatory; this will check to see whether the pointer to the root node is pointing to nil, if it is then there is an empty tree and will return a Boolean true, otherwise will return false. </s>
<s n="s4.9;p3.13">Data will return the data from the node at the pointer passed to it. </s>
<s n="s5.9;p3.13">LChild and RChild will return a pointer to the corresponding child of the node passed to it. </s>
<s n="s6.9;p3.13">MakeBTree will take to pointers to root nodes of separate binary trees and join them into one big binary tree with a new root node, which will hold data passed into function, and the sub trees as the left and right child. </s>
<s n="s7.9;p3.13">It will return the pointer to the new root node. </s>
<s n="s8.9;p3.13">FreeBTree will take the given pointer and dispose of the memory used. </s>
<s n="s9.9;p3.13">It will do this after disposing of everything underneath so as not to create memory leaks. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">Stack Structure</head>
<p n="p4.13">
<s n="s1.6;p4.13">There are two stack structures in this program. </s>
<s n="s2.6;p4.13">One will hold pointers to the root nodes of trees. </s>
<s n="s3.6;p4.13">This will be used to build up new trees from smaller ones. </s>
<s n="s4.6;p4.13">The other stack will hold numbers and is used for the post order evaluation. </s>
<s n="s5.6;p4.13">Both contain the functions and procedures Pop, Push, IsEmpty, MakeEmpty, Readtop and Display. </s>
<s n="s6.6;p4.13">For the second stack the functions and procedures are the same only different names as they have to deal with a different type of stack. </s>
</p>
<p n="p5.13">
<s n="s1.5;p5.13">Pop is used to remove the top item of data from the list, not before storing the data from this element for use. </s>
<s n="s2.5;p5.13">Push will insert a new element with new data at the top of the list. </s>
<s n="s3.5;p5.13">IsEmpty will simply see if the top pointer is pointing at nil, which if it is will indicate the list is empty. </s>
<s n="s4.5;p5.13">MakeEmpty will remove all items from the list and dispose of all the memory leaving just the top pointer pointing at nil. </s>
<s n="s5.5;p5.13">Readtop is similar to pop with the exception that it does not remove the memory; it simply reads the data from the top element. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">Build Tree</head>
<p n="p6.13">
<s n="s1.6;p6.13">This button should work so that, given the postfix expression, a tree will be constructed in such a way that when traversed in a selected way will produce the correct 'fix' expression. </s>
<s n="s2.6;p6.13">It achieves this by using a case statement on the expression individual characters. </s>
<s n="s3.6;p6.13">If there is a digit a new tree is created with the digit at the root node. </s>
<s n="s4.6;p6.13">This is then pushed onto the tree stack. </s>
<s n="s5.6;p6.13">If however an operator is encountered then a new binary tree with the operator at the root and the top two trees of the stack are popped and made to be the left and right child; with the resulting tree being pushed back onto the stack. </s>
<s n="s6.6;p6.13">After the entire string has been checked then the final tree left in the stack is the final tree, so is popped and given a pointer to the root. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">Traversal</head>
<p n="p7.13">
<s n="s1.5;p7.13">All traversal follows the same principle. </s>
<s n="s2.5;p7.13">They all use recursion, which is when a function calls itself to be used. </s>
<s n="s3.5;p7.13">They include a call of itself to the left child and a call to the right child as well as a process. </s>
<s n="s4.5;p7.13">The process in the traversal case is to print out the data at the current node to the memo box. </s>
<s n="s5.5;p7.13">The only difference between the three kinds of traversal is the placement of the process statement. </s>
</p>
<table id="BAWE_6056b-tab.001">
<row>
<cell/>
</row>
</table>
<p n="p8.13">
<s n="s1.3;p8.13">Each of these traversals, due to the use of recursion, need to have base cases. </s>
<s n="s2.3;p8.13">So before each call to itself there is an IF statement to determine whether the next child on the relevant side is a pointer to nil; if not then will perform recursion else it will move on to next statement. </s>
<s n="s3.3;p8.13">Once it have completed it will begin to work its way back up through the recursion. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">Evaluate</head>
<p n="p9.13">
<s n="s1.6;p9.13">This button works using Post Order traversal. </s>
<s n="s2.6;p9.13">The only difference is the process is not the same. </s>
<s n="s3.6;p9.13">Instead of printing to the memo box this traversal will use a case statement to distinguish each character in the node of the tree. </s>
<s n="s4.6;p9.13">If it is a digit '0' to '9' then the integer equivalent will be pushed into the second stack. </s>
<s n="s5.6;p9.13">If an operator is selected then it will pop the top two digits form the stack and evaluate them using the operator, then push the result back onto the stack. </s>
<s n="s6.6;p9.13">Once the traversal is completed the remaining item in the stack will be the result, which can be popped out into a string and into the memo box. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">Testing</head>
<p n="p10.13">
<s n="s1.6;p10.13">To test this program I will approach each button individually. </s>
<s n="s2.6;p10.13">The build tree button will be tested by typing in expressions and after running, test it with the used of the traversal. </s>
<s n="s3.6;p10.13">This will also test the traversal. </s>
<s n="s4.6;p10.13">The traversal does not need to be tested as it is a straight forward recursion technique. </s>
<s n="s5.6;p10.13">But by using them on the tree created I will be able to see that they display the correct order, which will only be true if the tree is constructed correctly. </s>
<s n="s6.6;p10.13">The evaluate button will be tested by inputting increasingly difficult equations with the answer already calculated, thus meaning I can compare them and test to see if they are correct. </s>
</p>
<table id="BAWE_6056b-tab.002">
<row>
<cell/>
</row>
</table>
<p n="p11.13">
<s n="s1.3;p11.13">This table shows the expressions that were input and their actual answers. </s>
<s n="s2.3;p11.13">Also included is the Post, In and Pre order traversals which all correspond to their correct equivalents. </s>
<s n="s3.3;p11.13">The Evaluate answer is also included and matches the expected answer. </s>
</p>
<p n="p12.13">
<s n="s1.1;p12.13">The following are screenshots of the program running. </s>
</p>
<figure id="BAWE_6056b-pic.001">
<head>The screenshot above is the build tree button. The process is recorded in the log box.</head>
</figure>
<figure id="BAWE_6056b-pic.002">
<head>The above is the Pre-Order traversal. It just prints the equation out in the correct format. The same applies to both post and pre-Order buttons but with each printing the data out in the correct way.</head>
</figure>
<figure id="BAWE_6056b-pic.003">
<head>This shot above demonstrates the evaluate button; it displays the calculation being done in the memo box to the left along with the actions in the log. The final result is displayed in the evaluation memo box.</head>
</figure>
<p n="p13.13">
<s n="s1.1;p13.13">
<formula notation="" id="BAWE_6056b-form.001"/> </s>
</p>
</div2>
</div1>
</body>
<back/>
</text>
</TEI.2>
