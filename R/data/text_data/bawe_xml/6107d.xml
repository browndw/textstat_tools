<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6107d" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>DTMF Controlled Buggy</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
<note resp="British Academic Written English (BAWE) corpus project">Appendix contains computer code. </note>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: document title. Page footer contains: page number. </note>
</notesStmt>
<sourceDesc>
<p n="level">3</p>
<p n="date">2006-04</p>
<p n="module title">Electronic Engineering Project</p>
<p n="module code">EE3P2</p>
<p n="genre family">Design specification</p>
<p n="discipline">Cybernetics &amp; Electronic Engineering</p>
<p n="disciplinary group">PS</p>
<p n="grade">M</p>
<p n="number of authors">1</p>
<p n="number of words">7851</p>
<p n="number of s-units">458</p>
<p n="number of p">169</p>
<p n="number of tables">9</p>
<p n="number of figures">20</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">21</p>
<p n="number of lists">3</p>
<p n="number of paragraphs formatted like lists">8</p>
<p n="abstract present">abstract present</p>
<p n="average words per s-unit">17.1</p>
<p n="average s-units per p">2.7</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">f</p>
<p n="year of birth">1986</p>
<p n="first language">Chinese unspecified</p>
<p n="education">OSa</p>
<p n="course">Master of Engineering</p>
<p n="student ID">6107</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart rend="bold">DTMF Controlled Buggy</titlePart>
</docTitle>
<titlePart>
<name type="student name"/>
<name type="other"/> Module EE3P2 MENG Electronic Engineering 2006-4-20 Department of Electronic Engineering School of System Engineering,<name type="university"/>
<name type="university"/> UK</titlePart>
</titlePage>
</front>
<body>
<div1 type="abstract">
<head>Summary</head>
<p n="p1.169">
<s n="s1.6;p1.169">This report documents the creation of using a mobile phone to control a buggy's move direction. </s>
<s n="s2.6;p1.169">The whole system can complete a coherent motion: Dial one of these five numbers (2, 4, 6, 8, 5) on the phone keyboard, the buggy will move toward the assigned direction or pause. </s>
<s n="s3.6;p1.169">The system couples together the GSM modem, DTMF decoder, PIC microprocessor and stepper motors on the buggy. </s>
<s n="s4.6;p1.169">To achieve the effective communications between them, a series of methods are designed to meet the specification. </s>
<s n="s5.6;p1.169">Such as the AT commands transmission in the forms of ASCII strings between the GSM modem and the PIC, which are implemented by programs. </s>
<s n="s6.6;p1.169">Results indicate that the remote control of a machine is exercisable and reliable. </s>
</p>
<p n="p2.169">
<s n="s1.1;p2.169">The assigned directions are below: </s>
</p>
<figure id="BAWE_6107d-fig.001"/>
</div1>
<div1 type="front-back-matter">
<head rend="bold">Content list</head>
<p/>
</div1>
<div1 type="front-back-matter">
<head rend="bold">Glossary</head>
<p>GSM Global System for Mobile communications </p>
<p>GPRS General Packet Radio Service </p>
<p>SMS Short Message Service </p>
<p>3GPP The 3rd Generation Partnership Project </p>
<p>IC Integrated Circuit </p>
<p>CB Citizen's Band </p>
<p>OS Operating System </p>
<p>DTMF Dual Tone Multiple Frequency </p>
<p>PCMCIA Personal Computer Memory Card International Association </p>
<p>IMEI International Mobile Equipment Identity </p>
<p>EEPROM Electrically-Erasable Programmable Read-Only Memory </p>
<p>ICD Interface Control Document </p>
<p>PWM Pulse-Width Modulation </p>
<p>A/D Analog to Digital </p>
<p>AUSART Addressable Universal Asynchronous Receiver Transmitter </p>
<p>I2C Inter-Integrated Circuit </p>
<p>SPI Serial Peripheral Interface </p>
<p>AT command Attention! Followed by commands </p>
<p>ASCII American Standard Code for Information Interchange </p>
<p>DC Direct current </p>
<p>I/O Input/Output </p>
<p>Tx/Rx Transmitter/Receiver </p>
<p>TCP/IP Transmission Control Protocol/Internet Protocol </p>
</div1>
<div1 type="section">
<head rend="bold">1. Introduction</head>
<p n="p3.169">
<s n="s1.4;p3.169">This project has great practical value in remote control application. </s>
<s n="s2.4;p3.169">There are always some dangerous circumstances that people can not access into for the spot direction or control, such as the lab where is full of harmful radioactive rays. </s>
<s n="s3.4;p3.169">So the need for accurate and real-time remote control is necessary and demanding. </s>
<s n="s4.4;p3.169">Remote and intelligent control is a longtime existed but still prospecting area of interest in current research. </s>
</p>
<p n="p4.169">
<s n="s1.5;p4.169">My project is an attempt on the remote control to a buggy by a series of communication and processor systems. </s>
<s n="s2.5;p4.169">It can ensure precise and quick direction alter by the instructions you give in faraway distance, which is just by pressing numbers on the digital keyboard of your mobile phone or any fixed telephone. </s>
<s n="s3.5;p4.169">Such an easy function seems to have, it need to go through many parts and links. </s>
<s n="s4.5;p4.169">There are four indispensable elements contained in the buggy, the GSM modem, the DTMF decoder, the PIC microprocessor and the driven boards with their stepper motors, which all act different but related work. </s>
<s n="s5.5;p4.169">To achieve the whole system's successful target requires these parts work smoothly in their section but cooperate well with each other in the entire link. </s>
</p>
<p n="p5.169">
<s n="s1.3;p5.169">The buggy changing its direction under the command obviously has something to do with its stepper motors inside. </s>
<s n="s2.3;p5.169">By changing the direction of current flowing through the winding, the pole produced by become opposite making the rotor turned. </s>
<s n="s3.3;p5.169">So if you give the according sequences (high or low input voltage) to the magnet pole, it is possible to realize the direction change movement. </s>
</p>
<p n="p6.169">
<s n="s1.4;p6.169">But which direction is ordered by person? </s>
<s n="s2.4;p6.169">This question depends on whether the communication is good enough. </s>
<s n="s3.4;p6.169">The PIC microprocessor will enable the stepper motor's move but it need to get the instruction information from another source, which is DTMF. From the project's title, we learn that DTMF must act an important role in the system. </s>
<s n="s4.4;p6.169">It is true because it decodes the tone information into digital binary forms and sends them to PIC. </s>
</p>
<p n="p7.169">
<s n="s1.3;p7.169">The tone of the number we pressed, is transmitted through the GSM wireless communication network. </s>
<s n="s2.3;p7.169">To connect with the GSM modem requires dialing its SIM card number first, then wait for its automatically answer by the successful AT commands stream sent by PIC through the series port. </s>
<s n="s3.3;p7.169">When they begin communicating, the tone of number pressed will arrive at the input of the DTMF through the speaker of the modem. </s>
</p>
<p n="p8.169">
<s n="s1.5;p8.169">Under the condition that those links introduced above work properly, the whole system becomes a corporate one. </s>
<s n="s2.5;p8.169">The final target is achieved through the four parts. </s>
<s n="s3.5;p8.169">There are much more knowledge and details in every part. </s>
<s n="s4.5;p8.169">It is a communication system, while also a programmable and processing system. </s>
<s n="s5.5;p8.169">However, it is used for control from people to machine no matter the distance between them, which stand for the advanced applications in carrying out the human's will and instructions. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">2. Background Research</head>
<p n="p9.169">
<s n="s1.2;p9.169">Researching into all parts of the system then provide sufficient knowledge before starting of the effective link and proper function. </s>
<s n="s2.2;p9.169">From the knowledge gained the most suitable components were chosen and carried forward to the construction stage. </s>
</p>
<div2>
<head rend="bold">GSM network and GSM modem</head>
<p n="p10.169">
<s n="s1.4;p10.169">The Global System for Mobile Communications (GSM) is the most popular standard for mobile phones in the world. </s>
<s n="s2.4;p10.169">GSM service is used by over 1.5 billion people across more than 210 countries and territories. </s>
<s n="s3.4;p10.169">GSM differs significantly from its predecessors in that both signaling and speech channels are digital, which means that it is considered a second generation (2G) mobile phone system. </s>
<s n="s4.4;p10.169">GSM is an open standard which is currently developed by the 3GPP. </s>
</p>
<p n="p11.169">
<s n="s1.3;p11.169">GSM is a cellular network, which means that mobile phones connect to it by searching for cells in the immediate vicinity. </s>
<s n="s2.3;p11.169">GSM networks operate at various different radio frequencies. </s>
<s n="s3.3;p11.169">Most GSM networks operate in the 900 MHz or 1800 MHz bands. </s>
</p>
<p n="p12.169">
<s n="s1.2;p12.169">The network behind the GSM system seen by the customer is large and complicated in order to provide all of the services which are required. </s>
<s n="s2.2;p12.169">It is divided into a number of sections and these are each covered in separate articles. </s>
</p>
<list type="ordered">
<item>the Base Station Subsystem (the base stations and their controllers). </item>
<item>the Network and Switching Subsystem (the part of the network most similar to a fixed network). This is sometimes also just called the core network. </item>
<item>the GPRS Core Network (the optional part which allows packet based Internet connections). </item>
</list>
<p n="p13.169">
<s n="s1.1;p13.169">All of the elements in the system combine to produce many GSM services such as voice calls and SMS. </s>
</p>
<figure id="BAWE_6107d-fig.002">
<head rend="bold">Figure2.1.1 The structure of a GSM network </head>
</figure>
<p n="p14.169">
<s n="s1.3;p14.169">If we talk about GSM / GPRS modem then we mean hardware modem with real RS232 interface that could be controlled by each OS (Operating System) with AT commands. </s>
<s n="s2.3;p14.169">A modem is needed for receiving the call and transmitting instructions through voice tone. </s>
<s n="s3.3;p14.169">Comparing with many GSM modems, the GSM100T of RF solutions company is considered as our optimum decision to undertake the major communication task, since it is capable of meeting the requirements appeared in project. </s>
</p>
<figure id="BAWE_6107d-pic.001">
<head rend="bold">Figure 2.1.2 GSM100T (right)</head>
</figure>
<p n="p15.169">
<s n="s1.4;p15.169">It is a miniature "Plug And Play" dual band GSM modem. </s>
<s n="s2.4;p15.169">It can be directly connected to the serial port of a desktop or notebook computer or microprocessor through the RS232 interface. </s>
<s n="s3.4;p15.169">A standard SIM card can be inserted in the integral card holder within the metal enclosure. </s>
<s n="s4.4;p15.169">It means that the number in this SIM card is also the "name" of our buggy. </s>
</p>
<p n="p16.169">
<s n="s1.6;p16.169">The GSM modems metal casing makes it an appropriate solution for tough applications such as Telemetry, Wireless Local Loop (payphones) or as part of a fleet management system. </s>
<s n="s2.6;p16.169">Its small size makes it simple to integrate in a space constraint environment. </s>
<s n="s3.6;p16.169">The modem is supplied with power cable, other accessories available are an antenna (with 1m coax cable), RS232 connecting cable with Telephone interface, Power Supply Unit. </s>
<s n="s4.6;p16.169">In the project, we will fully utilize these parts, especially the RS232 connecting Y cable and the 4 PIN telephone interface. </s>
<s n="s5.6;p16.169">About its practicability particular details will be given together with the serials ports in the PIC microcontroller part. </s>
<s n="s6.6;p16.169">In general, this modem is a very proper device to implement the function of the system. </s>
</p>
<p n="p17.169">
<s n="s1.1;p17.169">In communication, the AT-command based messages exchanged between an application and the GSM products in order to manage GSM related events or services. </s>
</p>
<p n="p18.169">
<s n="s1.1;p18.169">AT commands can be sent through a serial link, which is set with the following default values (factory settings), take the GSM100T for example: </s>
</p>
<p n="p19.169">
<s n="s1.1;p19.169">115200 bits per second, 8 bits data, 1 stop bit, no parity, hardware flow control. </s>
</p>
<p n="p20.169">
<s n="s1.6;p20.169">Most dialup modems follow to a large extent the specifications of the AT Command Set, which is short for Attention and always starting with AT and ending with a &lt;CR>. </s>
<s n="s2.6;p20.169">Such important characters normally should never be changed, which tells the modem that modem commands follow. </s>
<s n="s3.6;p20.169">With the following basic AT commands, you can make calls directly, select the dialing method (tone or pulse), control the speaker volume, and perform a number of other basic modem operations. </s>
<s n="s4.6;p20.169">What is important is that you must be in the command mode of your communication software to accept the AT commands because the modem is always either in the command mode or the data mode. </s>
<s n="s5.6;p20.169">When in data mode, commands are treated as data. </s>
<s n="s6.6;p20.169">But generally a new modem starts up in command mode when it is first switched on so I didn't came across this problem. </s>
</p>
<p n="p21.169">
<s n="s1.4;p21.169">The modem initialization string consists of a series of commands. </s>
<s n="s2.4;p21.169">It prepares the modem for communications, setting such features as dialing mode (tone or pulse), waits, detection of the busy signal and many other settings. </s>
<s n="s3.4;p21.169">Newer modem communications programs reset the initializations string for users according to which menu options they have selected or according to the enabled features. </s>
<s n="s4.4;p21.169">Mostly, the user does not see or type these commands, or even know about them. </s>
</p>
<p n="p22.169">
<s n="s1.2;p22.169">The command set includes commands for various phone-line manipulations, dialing and hanging up for instance. </s>
<s n="s2.2;p22.169">It also includes various controls to set up the modem, including a set of <hi rend="italic">register commands</hi> which allowed the user to directly set the various memory locations </s>
</p>
<p n="p23.169">
<s n="s1.2;p23.169">Normally commands are industry standard language used to communicate with the modem, while some modem companies have their additional command sets for their product. </s>
<s n="s2.2;p23.169">The following is a partial list of the common AT command sets appeared in the website of modem product GSM100T. </s>
</p>
<table id="BAWE_6107d-tab.001">
<head rend="bold">Table 2.1.3 List of some common AT commands</head>
<row>
<cell/>
</row>
</table>
<list type="ordered">
<head>From the table above we learn that:</head>
<item>Commands always start with AT and finish with a &lt;CR>
</item>
<item>If command syntax is incorrect, an ERROR string is returned.</item>
<item>If command syntax is correct but with some incorrect parameters, the +CME ERROR: &lt;Err> or +CMS ERROR: &lt;SmsErr> strings are returned with different error codes.</item>
<item>If the command line has been performed successfully, an OK string is returned.</item>
</list>
<p n="p24.169">
<s n="s1.5;p24.169">A register is a specific physical location in memory. </s>
<s n="s2.5;p24.169">Normally modems have small amounts of memory onboard. </s>
<s n="s3.5;p24.169">This set of commands is used to enter values in a particular register (memory location). </s>
<s n="s4.5;p24.169">The register will be storing a particular variable (alpha-numeric information) which is utilized by the modem and communication software. </s>
<s n="s5.5;p24.169">For example, S7=60 instructs your computer to "Set register #7 to the value 60". </s>
</p>
<p n="p25.169">
<s n="s1.2;p25.169">Commands may be entered from the terminal mode of most communications software packages. </s>
<s n="s2.2;p25.169">We use Hyper-terminal as the communication software for AT commands testing. </s>
</p>
</div2>
<div2>
<head rend="bold">2.2 DTMF</head>
<p n="p26.169">
<s n="s1.6;p26.169">DTMF stands for Dual Tone Multiple Frequency. </s>
<s n="s2.6;p26.169">It is a tone consisting of two frequencies superimposed to each key so that it can easily be identified by a microprocessor. </s>
<s n="s3.6;p26.169">Individual frequencies are chosen such that it is easy to design filters and easy to transmit the tones through a telephone line having bandwidth of approximately 3.5 kHz. </s>
<s n="s4.6;p26.169">DTMF was not intended to be used for data transfer, it was meant to be used for sending the control signals along the telephone line. </s>
<s n="s5.6;p26.169">With standard decoders it is possible to send 10 beeps per second i.e., five bits per second. </s>
<s n="s6.6;p26.169">DTMF standard specifies 50ms tones and 600ms duration between two successive tones. </s>
</p>
<table id="BAWE_6107d-tab.002">
<head rend="bold">Table 2.2.1 DTMF Keypad Frequencies and decoded binary numbers (with sound clips)</head>
<row>
<cell/>
</row>
</table>
<p n="p27.169">
<s n="s1.8;p27.169">Note that the last column is not commonly seen in the telephones that we used, but telephone exchanges use them quite often. </s>
<s n="s2.8;p27.169">Nowadays, DTMF is used for dialing the numbers in telephones, configuring telephone exchanges etc. </s>
<s n="s3.8;p27.169">A CB transceiver of 2.7 MHz is normally used to send floating codes. </s>
<s n="s4.8;p27.169">DTMF was designed to be able to send the codes using microphone. </s>
<s n="s5.8;p27.169">In the project, we make use of five numbers: 2, 4, 5, 6, 8. </s>
<s n="s6.8;p27.169">Each beep (or digit you dial on the telephone) is composed of two concurrent frequencies, which are superimposed on amplitude. </s>
<s n="s7.8;p27.169">The higher of the two frequencies is normally aloud by 4dB, and this shift is termed as twist. </s>
<s n="s8.8;p27.169">If the twist is equal to 4dB, the higher frequency is loud by 4dB. If the lower frequency is loud, then the twist is said to be negative. </s>
</p>
<p n="p28.169">
<s n="s1.5;p28.169">DTMF signals can be generated through using RC networks connected to a microprocessor. </s>
<s n="s2.5;p28.169">MT8880 is an example of a dedicated IC. But getting the latter method work is a bit difficult if high accuracy is needed. </s>
<s n="s3.5;p28.169">The crystal frequency needs to be sacrificed for a non standard cycle length. </s>
<s n="s4.5;p28.169">Hence this method is used for simple applications. </s>
<s n="s5.5;p28.169">Most often, a PIC micro could be used for the above purpose. </s>
</p>
<p n="p29.169">
<s n="s1.6;p29.169">Detecting DTMF with satisfactory precision is a hard thing. </s>
<s n="s2.6;p29.169">Often, a dedicated IC such as MT8870 is used for this purpose. </s>
<s n="s3.6;p29.169">It uses two 6th order band-pass filters using switched capacitor filters and it suppresses any harmonics. </s>
<s n="s4.6;p29.169">Hence they can produce pretty good sine waves from distorted input. </s>
<s n="s5.6;p29.169">Hence it is preferred. </s>
<s n="s6.6;p29.169">Again microprocessors can also be used, but their application is limited. </s>
</p>
<p n="p30.169">
<s n="s1.4;p30.169">In the project, it is necessary to use a DTMF decoder to decode the DTMF signals transmitted from the GSM "speaker" into binary numbers. </s>
<s n="s2.4;p30.169">Weighing all the advantages and disadvantages, we choose the MT8870D to fulfill the function among varieties of DTMF decoders. </s>
<s n="s3.4;p30.169">Then it sends the binary numbers from Q1~Q4 output Pins to the input ports of PIC processor. </s>
<s n="s4.4;p30.169">The following work is executed by the C program that was burned into PIC. </s>
</p>
<figure id="BAWE_6107d-fig.003">
<head rend="bold">Figure2.2.1 MT8870D 18 PIN connections </head>
</figure>
</div2>
<div2>
<head rend="bold">2.3 PIC Microprocessor</head>
<p n="p31.169">
<s n="s1.2;p31.169">The most fundamental part of this project is the PIC microprocessor. </s>
<s n="s2.2;p31.169">The device we choose is 18F452, a high performance and enhanced flash microcontrollers with 10-bit A/D product in PIC family. </s>
</p>
<p n="p32.169">
<s n="s1.2;p32.169">The PIC18F452 features a 'C' compiler friendly development environment, 256 bytes of EEPROM, Self-programming, an ICD, 2 capture/compare/PWM functions, 8 channels of 10-bit Analog-to-Digital (A/D) converter, the synchronous serial port can be configured as either 3-wire Serial Peripheral Interface (SPI™) or the 2-wire Inter-Integrated Circuit (I²C™) bus and Addressable Universal Asynchronous Receiver Transmitter (AUSART). </s>
<s n="s2.2;p32.169">All of these features make it ideal for manufacturing equipment, instrumentation and monitoring, data acquisition, power conditioning, environmental monitoring, telecom and consumer audio/video applications. </s>
</p>
<figure id="BAWE_6107d-fig.004">
<head rend="bold">Figure 2.3.1 PIN Diagram of 18F452</head>
</figure>
<p n="p33.169">
<s n="s1.4;p33.169">The FLASH Program Memory of 18F452 is readable, writable, and erasable during normal operation over the entire VDD range. </s>
<s n="s2.4;p33.169">A read from program memory is executed in one byte at a time while a write is 8 bytes at a time. </s>
<s n="s3.4;p33.169">Program memory is erased in blocks of 64 bytes at a time. </s>
<s n="s4.4;p33.169">A bulk erase operation may not be issued from user code. </s>
</p>
<p n="p34.169">
<s n="s1.6;p34.169">Writing or erasing program memory will cease instruction fetches until the operation is complete. </s>
<s n="s2.6;p34.169">The program memory cannot be accessed during the write or erase, therefore, code cannot execute. </s>
<s n="s3.6;p34.169">An internal programming timer terminates program memory writes and erases. </s>
<s n="s4.6;p34.169">A value written to program memory does not need to be a valid instruction. </s>
<s n="s5.6;p34.169">Executing a program memory location that forms an invalid instruction results in a NOP. In the project process, the compile tool we use is a software called MPLAB. After many testing and simulation for assurance, write the program into the program memory of 18F452. </s>
<s n="s6.6;p34.169">This approach makes the small-sized chip becomes an absolute controller which is independent of desktop. </s>
</p>
<p n="p35.169">
<s n="s1.7;p35.169">In order to maintain a reliable input and output, we have to make research into the I/O ports. </s>
<s n="s2.7;p35.169">18F452 has five ports available. </s>
<s n="s3.7;p35.169">Some pins of them are multiplexed with an alternate function from the peripheral features on the device. </s>
<s n="s4.7;p35.169">In general, when a peripheral is enabled, that pin may not be used as a general purpose I/O pin. </s>
<s n="s5.7;p35.169">This is the point we should notice when making use of the ports. </s>
<s n="s6.7;p35.169">Another noteworthiness is that how many bits we are going to send through the port and the quantity of bits that the port have since some of the bits have other functions. </s>
<s n="s7.7;p35.169">More details about this part will be fully discussed in the design and implementation. </s>
</p>
<p n="p36.169">
<s n="s1.3;p36.169">PORTB is an 8-bit wide, bi-directional port. </s>
<s n="s2.3;p36.169">The corresponding data direction register is TRISB. Setting a TRISB bit (= 1) will make the corresponding PORTB pin an input (i.e., put the corresponding output driver in a High-Impedance mode). </s>
<s n="s3.3;p36.169">Clearing a TRISB bit (= 0) will make the corresponding PORTB pin an output (i.e., put the contents of the output latch on the selected pin). </s>
</p>
<p n="p37.169">
<s n="s1.5;p37.169">The same is PORTC and PORTD. PORTC is multiplexed with several peripheral functions (Table 2.3.1). </s>
<s n="s2.5;p37.169">PORTC pins have Schmitt Trigger input buffers. </s>
<s n="s3.5;p37.169">When enabling peripheral functions, care should be taken in defining TRIS bits for each PORTC pin. </s>
<s n="s4.5;p37.169">Some peripherals override the TRIS bit to make a pin an output, while other peripherals override the TRIS bit to make a pin an input. </s>
<s n="s5.5;p37.169">We should refer to the corresponding peripheral section for the correct TRIS bit settings. </s>
</p>
<table id="BAWE_6107d-tab.003">
<head rend="bold">Table 2.3.1 PORT C Functions</head>
<row>
<cell/>
</row>
</table>
<p n="p38.169">
<s n="s1.1;p38.169">From the program written into the memory of PIC (attached in Appendix), we can see there is a define in the beginning of the program: </s>
</p>
<p n="p39.169">
<s n="s1.1;p39.169">
<formula notation="" id="BAWE_6107d-form.001"/> </s>
</p>
<p n="p40.169">
<s n="s1.2;p40.169">Obviously, the PORTC6 and PORTC 7 are used as transmitter and receiver of RS232 serial port, which result in that these two pins can not be used as data transfer port. </s>
<s n="s2.2;p40.169">Hence we just make use of the PORTC0~PORTC3 (4 bits). </s>
</p>
<p n="p41.169">
<s n="s1.1;p41.169">In the project, PORTD acts as the input of PIC, getting the binary forms of the instruction from the output of DTMF (Q1~Q4). </s>
</p>
<p n="p42.169">
<s n="s1.2;p42.169">Since the AT commands between GSM modem and the microcontroller is sent through serial port, it is necessary to talk about the commonly used serial port - RS232. </s>
<s n="s2.2;p42.169">Figure 2.3.2 shows the typical RS-232 D9-Type. (in next page) </s>
</p>
<figure id="BAWE_6107d-fig.005">
<head rend="bold">Figure 2.3.2: RS-232 D9-Type Port</head>
</figure>
<figure id="BAWE_6107d-fig.006">
<head rend="bold">Figure2.3.3: Preferred Interfacing between Computer and Terminal</head>
</figure>
<p n="p43.169">
<s n="s1.2;p43.169">The Figure 2.3.3 shows the interfacing between microprocessor and terminal (both are 9-pin). </s>
<s n="s2.2;p43.169">From the connection we notice that it is simple to understand because only by crossing link the transmit and receive pins can achieve the effective connection from source to destination. </s>
</p>
<table id="BAWE_6107d-tab.004">
<row>
<cell/>
</row>
</table>
<figure id="BAWE_6107d-fig.007">
<head rend="bold">Figure 2.3.4 15-PIN D-SUB Female connector (RS232/Audio)</head>
</figure>
<p n="p44.169">
<s n="s1.3;p44.169">However, in the real practical of the project, the connection between GSM100T and PIC 18F452 is a little bit different. </s>
<s n="s2.3;p44.169">Because the serial port of modem is 15-pin while the PIC board is 9-Pin. </s>
<s n="s3.3;p44.169">This problem is overcome via the use of a Y-cable, which is facilitated with the GSM modem, provides serial link and audio link to the modem. </s>
</p>
<figure id="BAWE_6107d-fig.008">
<head rend="bold">Figure 2.3.5 The Y-Cable and PIN connection between Sub-D 15 and Sub-D 9</head>
</figure>
</div2>
<div2>
<head rend="bold">2.4 Stepper Motor</head>
<div3>
<head rend="bold">2.4.1 The work principle of stepper motor</head>
<p n="p45.169">
<s n="s1.2;p45.169">Bipolar type stepper motor will be stressed below. </s>
<s n="s2.2;p45.169">Figure 2.4.1 shows the connection of this kind of stepper-motor. </s>
</p>
<figure id="BAWE_6107d-fig.009">
<head rend="bold">Figure 2.4.1: Bipolar stepper motor</head>
</figure>
<p n="p46.169">
<s n="s1.2;p46.169">When there is current flowing on the winding 1 and 2, the stator will be performed as two crossing electromagnet. </s>
<s n="s2.2;p46.169">It forces the permanent magnet rotor stay in such kind of angle. </s>
</p>
<figure id="BAWE_6107d-fig.010">
<head>
<hi rend="bold">Figure 2.4.2:</hi> <hi rend="bold">Stepper-motor clockwise turning</hi>
</head>
</figure>
<p n="p47.169">
<s n="s1.3;p47.169">While the direction of current flowing through the X winding changed, the pole produced by the X winding become opposite making the rotor turned. </s>
<s n="s2.3;p47.169">On the next step, the current flowing through the Y winding has been inversed to help the rotor turning another clockwise angle. </s>
<s n="s3.3;p47.169">Repeating this stage, the stepper-motor will turn clockwise continuous. </s>
</p>
<p n="p48.169">
<s n="s1.1;p48.169">In an opposite way, the method of turning the stepper-motor anti-clockwise is only change the outputs sequence as shown in the Figure 2.4.3. </s>
</p>
<figure id="BAWE_6107d-fig.011">
<head>
<hi rend="bold">Figure 2.4.3:</hi> <hi rend="bold">Stepper motor anti-clockwise turning.</hi> </head>
</figure>
<p n="p49.169">
<s n="s1.2;p49.169">In this situation, the current flows on each winding in a different direction. </s>
<s n="s2.2;p49.169">It makes the winding change in an opposite way, which push the magnet rotor turning anti-clockwise. </s>
</p>
<p n="p50.169">
<s rend="italic" n="s1.3;p50.169">Douglas W.Jones, 1995. </s>
<s rend="italic" n="s2.3;p50.169">Stepping Motor Types [online]. </s>
<s rend="italic" n="s3.3;p50.169">The University of IOWA. Available at: &lt;URL: <seg type="URL" n="http://www.cs.uiowa.edu/~jones/step/types.html"/>> [Latest accessed 25 April 2005] </s>
</p>
<p n="p51.169">
<s rend="italic" n="s1.3;p51.169">(PIC Circuit Gallery, Stepper Motor controller, 2002, Operation principle of stepper motor [online]. </s>
<s rend="italic" n="s2.3;p51.169">Cleveland State University. </s>
<s n="s3.3;p51.169">
<hi rend="italic">Available at:&lt;URL: <seg type="URL" n="http://www.interq.or.jp/japan/se-inoue/e_step1.htm"/>> [Latest Accessed 11 Mar 2005]</hi>) </s>
</p>
</div3>
<div3>
<head>
<hi rend="bold">2.4.2</hi> <hi rend="bold">Bipolar Stepper-motor Drive Circuit</hi>
</head>
<p n="p52.169">
<s n="s1.2;p52.169">It is clear that the bipolar stepper-motor needed all the windings to be serialized into the diver circuit other than directly serialized with the power supply. </s>
<s n="s2.2;p52.169">Figure 2.4.4 shows the principle circuit of this kind of stepper-motor driver circuit. </s>
</p>
<figure id="BAWE_6107d-fig.012">
<head rend="bold">Figure 2.4.4: Principle of Bipolar Stepper-motor Driver</head>
</figure>
<p n="p53.169">
<s n="s1.7;p53.169">This kind driver circuit is called "H Bridge". </s>
<s n="s2.7;p53.169">The pair of control inputs X and X' controlled the direction of current flowing through the motor winding which affected the pole created on this motor winding. </s>
<s n="s3.7;p53.169">When the X is logical '1' and the X' is logical '', the Q2 is off letting the Q1 turned on but the Q4 is on making the Q3 turned off. </s>
<s n="s4.7;p53.169">The current flows from the power supply through the Q1 and flows from the left to the right through the motor winding, then flows through D2 and Q4 down to the ground. </s>
<s n="s5.7;p53.169">When X is '' but X' is '1', the current flows through the Q3, from the right to the left through the motor winding and flows through the D1 and Q2 down to the ground. </s>
<s n="s6.7;p53.169">The difference between the directions of the current flowing through the motor winding causes the different pole created. </s>
<s n="s7.7;p53.169">This allows the stepper-motor doing the operation introduced above. </s>
</p>
<p n="p54.169">
<s n="s1.8;p54.169">Here the use of the diodes must be stressed. </s>
<s n="s2.8;p54.169">As known to all, the winding inside the stepper-motor acts as an inductor. </s>
<s n="s3.8;p54.169">However, considering there is more than one winding in a stepper-motor, the pair of inductors would be like to act as a transformer. </s>
<s n="s4.8;p54.169">There will be surely a continually changing voltage across the winding when the circuit is on. </s>
<s n="s5.8;p54.169">The voltage will possibly be transformed and enlarged. </s>
<s n="s6.8;p54.169">This causes some serious problem to the circuit or even damage the whole circuit. </s>
<s n="s7.8;p54.169">After adding the diodes, the voltage at both end of the winding was clamped. </s>
<s n="s8.8;p54.169">It can protect the circuit from being damaged. </s>
</p>
<p n="p55.169">
<s n="s1.2;p55.169">In practical, there are also many ICs integrated one or more "H Bridges" inside. </s>
<s n="s2.2;p55.169">Take L293 as an example: there are two pairs of "H Bridges" built in as shown in Figure 2.4.5. </s>
</p>
<figure id="BAWE_6107d-fig.013">
<head rend="bold">Figure 2.4.5: L293 H Bridge Stepper-motor Driver</head>
</figure>
<p n="p56.169">
<s n="s1.1;p56.169">The two windings are connected across pin 3, 6 and pin 11, 14 individually in the circuit. </s>
</p>
</div3>
</div2>
</div1>
<div1 type="section">
<head rend="bold">3. Design Philosophy</head>
<p n="p57.169">
<s n="s1.2;p57.169">The main function of every part has been discussed in the background research part. </s>
<s n="s2.2;p57.169">The content of this part is designing rational approaches to implement. </s>
</p>
<p n="p58.169">
<s n="s1.2;p58.169">The connections between the PIC and stepper motor enable the instructions be transferred and carried out, which means the PIC sending the sequences to make the motor turn and generating the quantities of steps to control its pace. </s>
<s n="s2.2;p58.169">So the program on PIC chip should consider and cover these aspects. </s>
</p>
<p n="p59.169">
<s n="s1.1;p59.169">Initializing procedure is done by some "include", "define" and "use" statement. </s>
</p>
<p n="p60.169">
<s n="s1.1;p60.169">
<formula notation="" id="BAWE_6107d-form.002"/> </s>
</p>
<p n="p61.169">
<s n="s1.1;p61.169">
<formula notation="" id="BAWE_6107d-form.003"/> </s>
</p>
<p n="p62.169">
<s n="s1.1;p62.169">
<formula notation="" id="BAWE_6107d-form.004"/> </s>
</p>
<p n="p63.169">
<s n="s1.2;p63.169">By the three "include" text from the specified file is used at this point of the compilation. </s>
<s n="s2.2;p63.169">The filename "18F452", "string.h" and "stdio.h" are in &lt;> so the directory with the main source file is searched last. </s>
</p>
<p n="p64.169">
<s n="s1.1;p64.169">
<formula notation="" id="BAWE_6107d-form.005"/> </s>
</p>
<p n="p65.169">
<s n="s1.3;p65.169">The options after "fuses" vary depending on the device. </s>
<s n="s2.3;p65.169">This directive defines what fuses should be set in the part when it is programmed. </s>
<s n="s3.3;p65.169">This directive does not affect the compilation but is put in the output files. </s>
</p>
<p n="p66.169">
<s n="s1.1;p66.169">
<formula notation="" id="BAWE_6107d-form.006"/> </s>
</p>
<p n="p67.169">
<s n="s1.1;p67.169">
<formula notation="" id="BAWE_6107d-form.007"/> </s>
</p>
<p n="p68.169">
<s n="s1.1;p68.169">
<formula notation="" id="BAWE_6107d-form.008"/> </s>
</p>
<p n="p69.169">
<s n="s1.3;p69.169">This directive affects how the compiler will generate code for input and output instructions that follow. </s>
<s n="s2.3;p69.169">The standard method of doing I/O will cause the compiler to generate code to make an I/O pin either input or output every time it is used. </s>
<s n="s3.3;p69.169">Since the port d will be used as the input from DTMF to PIC while the port b and c as output of PIC to stepper motor, the three "use" statement should appear in the beginning of program. </s>
</p>
<p n="p70.169">
<s n="s1.1;p70.169">
<formula notation="" id="BAWE_6107d-form.009"/> </s>
</p>
<p n="p71.169">
<s n="s1.2;p71.169">This sentence tells the compiler the speed of the processor and enables the use of the built-in function: delay_ms() and delay_us(). </s>
<s n="s2.2;p71.169">The speed here is in 20000000 cycles per second. </s>
</p>
<p n="p72.169">
<s n="s1.1;p72.169">
<formula notation="" id="BAWE_6107d-form.010"/> </s>
</p>
<p n="p73.169">
<s n="s1.1;p73.169">The functions used in the program such as "PUTS" requires #include "string.h" and </s>
</p>
<p n="p74.169">
<s n="s1.3;p74.169">the"GETC" requires #use rs232. </s>
<s n="s2.3;p74.169">The PIN6 and PIN 7 of port C will be used as transmit and receive port. </s>
<s n="s3.3;p74.169">But we will only use the low 4 bits of port C: PIN 0 to 3. </s>
</p>
<p n="p75.169">
<s n="s1.1;p75.169">Hence, they don't interfere with each other. </s>
</p>
<p n="p76.169">
<s n="s1.1;p76.169">
<formula notation="" id="BAWE_6107d-form.011"/> </s>
</p>
<p n="p77.169">
<s n="s1.1;p77.169">
<formula notation="" id="BAWE_6107d-form.012"/> </s>
</p>
<p n="p78.169">
<s n="s1.1;p78.169">The two different delay settings will lead to different speed of straight and turning movements. </s>
</p>
<p n="p79.169">
<s n="s1.2;p79.169">Here comes the exact program controlling the stepper-motor to turn the instructed direction and steps. </s>
<s n="s2.2;p79.169">To achieve this, a dummy program called "Automatic" created. </s>
</p>
<p n="p80.169">
<s n="s1.3;p80.169">The basic principle of stepper motor was introduced in the background researchs. </s>
<s n="s2.3;p80.169">The sequences of four pin outputs are "0101" "1001" "1010" "0110" in clockwise turning and "0101" "0110" "1010" "1001" in anti-clockwise turning, so each four pins of PORTB and PORTC on the PIC chip are chosen to send out the sequences. </s>
<s n="s3.3;p80.169">These outputs are seen as Hex values should be given to the PORTB and PORTC regs., so Table 5 shows the matching between the Hex numbers with the outputs (four more pins are added for there are 8 pin in PORTB and PORTC. </s>
</p>
<table id="BAWE_6107d-tab.005">
<head rend="bold">Table 3.1.1: Matching between four pins outputs and Hex number. </head>
<row>
<cell/>
</row>
</table>
<p n="p81.169">
<s n="s1.4;p81.169">To make the stepper-motor turning step by step, a "for" looped "switch" statement were used. </s>
<s n="s2.4;p81.169">Take clockwise turning as an example, if the current state of four pins is "0101", so the next state of four pins will be "1001" and then will be "1010"; then will be "0110". </s>
<s n="s3.4;p81.169">The other case is the same and they all obey the same sequence. </s>
<s n="s4.4;p81.169">The code first written in C language is given below: </s>
</p>
<p n="p82.169">
<s n="s1.1;p82.169">
<formula notation="" id="BAWE_6107d-form.013"/> </s>
</p>
<p n="p83.169">
<s n="s1.5;p83.169">What should be stressed is that there may some states other than the four states above which can cause problem to the program. </s>
<s n="s2.5;p83.169">Another "<hi rend="bold">default</hi>" state was added to the bottom of the switch statements. </s>
<s n="s3.5;p83.169">The PIC chip executes each line of statement very fast. </s>
<s n="s4.5;p83.169">So there should be some delay statements enable the PIC chip wait for enough time. </s>
<s n="s5.5;p83.169">The delay statement was shown as follow: </s>
</p>
<p n="p84.169">
<s rend="bold" n="s1.1;p84.169">for(i=DELAY;i>0;i--) ; </s>
</p>
<p n="p85.169">
<s n="s1.4;p85.169">This statement was added in the end of each "<hi rend="bold">for</hi>" loop, so the program wait for the time equals to "<hi rend="bold">DELAY</hi>" cycles on each state. </s>
<s n="s2.4;p85.169">With the help of an "<hi rend="bold">if</hi>" statement, another set of code which similar to the code above were written to let the stepper-motor go anti-clockwise. </s>
<s n="s3.4;p85.169">After test the program "Automatic", the behaviour of stepper-motor shows the code can control the stepper-motor turn itself successfully. </s>
<s n="s4.4;p85.169">The tested code was written as a function into the practical program as briefly follows: </s>
</p>
<p n="p86.169">
<s n="s1.1;p86.169">
<formula notation="" id="BAWE_6107d-form.014"/> </s>
</p>
<p n="p87.169">
<s n="s1.3;p87.169">It can be seen from this block of code there are two keywords called "<hi rend="bold">nsteps</hi>" and "<hi rend="bold">direction</hi>" was passed to this function by the main function. </s>
<s n="s2.3;p87.169">They tell the function which direction and how many steps to be taken according to the input. </s>
<s n="s3.3;p87.169">Obviously, the following problem need to be solved it how to link to binary numbers from the DTMF with the "nsteps" and "dir". </s>
</p>
<p n="p88.169">
<s n="s1.1;p88.169">
<formula notation="" id="BAWE_6107d-form.015"/> </s>
</p>
<p n="p89.169">
<s n="s1.6;p89.169">Up to now, the function of control has been solved by program. </s>
<s n="s2.6;p89.169">However, the communication between GSM and PIC still remains a problem. </s>
<s n="s3.6;p89.169">When the GSM receiving an incoming call, it first need to answer that call then begin other communicate. </s>
<s n="s4.6;p89.169">This can be realized by transferring AT commands through RS232 serial port, as introduced in background part. </s>
<s n="s5.6;p89.169">With the basic AT commands, we can make, answer or hang up calls directly, select the dialing method (tone or pulse), control the speaker volume, and perform a number of other basic modem operations. </s>
<s n="s6.6;p89.169">The only thing should note is that the modem must be set in the Command mode in which the AT commands be accepted as commands not data. </s>
</p>
<p n="p90.169">
<s n="s1.3;p90.169">Refer to the documentation that came with the communications software Hyper-terminal for information before entering the Command mode. </s>
<s n="s2.3;p90.169">The modem acknowledges most commands almost immediately. </s>
<s n="s3.3;p90.169">As soon as you type in a command ending with the carriage return character your modem will respond with OK. </s>
</p>
<p n="p91.169">
<s n="s1.1;p91.169">Tabulate the commands that I have tested. </s>
</p>
<table id="BAWE_6107d-tab.006">
<head>*Note: the response +CPAS: &lt;pas> &lt;pas>: 0: ready (allow commands from TA/TE) 1: unavailable (does not allow commands) 2: unknown 3: ringing (ringer is active) 4: call in progress 5: asleep (low functionality)<hi rend="bold">Table 3.1.2 AT commands that have been tested in Hyper-terminal</hi>
</head>
<row>
<cell/>
</row>
</table>
<p n="p92.169">
<s n="s1.3;p92.169">As the tested examples above, we can dial to a destination by using the "ATD" command. </s>
<s n="s2.3;p92.169">The ATD command is used to set a voice, data or fax call. </s>
<s n="s3.3;p92.169">For a data or a fax or a voice call, the application sends the following ASCII string to the modem: ATD&lt;nb> where &lt;nb> is the destination phone number. </s>
</p>
<p n="p93.169">
<s n="s1.4;p93.169">We can also answer the call selectively or automatically. </s>
<s n="s2.4;p93.169">When the product receives a call, it sets the RingInd signal and sends the ASCII "RING" or "+CRING: &lt;type>" string to the application. </s>
<s n="s3.4;p93.169">It is testified in Hyper-terminal. </s>
<s n="s4.4;p93.169">Then it waits for the application to accept the call with the ATA command. </s>
</p>
<p n="p94.169">
<s n="s1.4;p94.169">In the project, the buggy is determined to receive any incoming call. </s>
<s n="s2.4;p94.169">In other words, everyone can control the buggy using mobile phones with different numbers. </s>
<s n="s3.4;p94.169">So we can set the modem in automatic answering mode, which is S0. </s>
<s n="s4.4;p94.169">Now the AT command here "ATS0=&lt;value>" can meet the application. &lt;value> is used to determine after how many rings it answers. </s>
</p>
<p n="p95.169">
<s n="s1.2;p95.169">Since the AT commands are sent through RS232 to modem in the form of ASCII string. </s>
<s n="s2.2;p95.169">This can be realized by just one code: </s>
</p>
<p n="p96.169">
<s rend="bold" n="s1.1;p96.169">puts("ATS0=1\r\n"); // after one ring then automatic answer </s>
</p>
<p n="p97.169">
<s n="s1.4;p97.169">The built-in function "puts()" in 18F452 sends each character in the string out the RS232 pin using "putc()". </s>
<s n="s2.4;p97.169">After the string is sent a RETURN(13) and LINE-FEED(10) are sent. </s>
<s n="s3.4;p97.169">That's the reason why "\r\n" is after AT commands. </s>
<s n="s4.4;p97.169">In general, "puts" has the same function as "printf()". </s>
</p>
<p n="p98.169">
<s n="s1.1;p98.169">After all the programs tested and all steps settled, download the program from PC to the PIC chip in MPLAB. Then the 18F452 PIC chip becomes a powerful and small-size microcontroller on the buggy. </s>
</p>
<p n="p99.169">
<s n="s1.3;p99.169">In this part, we have solved two major problems in implementation. </s>
<s n="s2.3;p99.169">They are how to answer the commander's call and how to control the stepper motors on buggy. </s>
<s n="s3.3;p99.169">Holding this design philosophy, we will deal with more practical details in the following implementation session. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">4. Implementation</head>
<p n="p100.169">
<s n="s1.3;p100.169">In the previous part, we have designed the whole system including the exact interfaces. </s>
<s n="s2.3;p100.169">According to the design philosophy, a figure about the whole buggy system has been drawn and given below. </s>
<s n="s3.3;p100.169">What we should do in this session is linking all components and realizing their function. </s>
</p>
<figure id="BAWE_6107d-fig.014">
<head rend="bold">Figure 4.1.1 Structure and connection of the system</head>
</figure>
<p n="p101.169">
<s n="s1.7;p101.169">From the structure above, we know the function of all parts and the connection between them. </s>
<s n="s2.7;p101.169">First, the whole system needs a DC power supply for every component. </s>
<s n="s3.7;p101.169">Different device requires different voltage power supply. </s>
<s n="s4.7;p101.169">Refer to the data sheet, we learn that the voltage can range from 5 to 32 volts as the power for GSM100T. The PIC18F452 integrated board needs a voltage of 5V while the regulator on it can adjust the 12V to 5V. </s>
<s n="s5.7;p101.169">12V also meets the two stepper motor's requirement. </s>
<s n="s6.7;p101.169">The DTMF needs a 5V can be solved via connecting to the 5V source on the PIC integrated board. </s>
<s n="s7.7;p101.169">So after all these consideration, we choose a 12V lead acid battery which can provide stable power to all the devices on the buggy at the same time. </s>
</p>
<p n="p102.169">
<s n="s1.1;p102.169">Second, as the major communication part, GSM modem is the first one we care about. </s>
</p>
<p n="p103.169">
<s n="s1.2;p103.169">Above all, an external antenna is used for picking up and transferring the signals through GSM wireless network. </s>
<s n="s2.2;p103.169">Correctly connect the antenna to the modem as the instructions below. </s>
</p>
<figure id="BAWE_6107d-fig.015">
<head rend="bold">Figure 4.1.2 connect the antenna</head>
</figure>
<p n="p104.169">
<s n="s1.2;p104.169">The next step is installing the SIM card into the SIM card holder on the modem. </s>
<s n="s2.2;p104.169">The SIM card hold will come out by pressing the eject button. </s>
</p>
<figure id="BAWE_6107d-fig.016">
<head rend="bold">Figure 4.1.3 install the SIM card</head>
</figure>
<p n="p105.169">
<s n="s1.2;p105.169">Now we need to connect the modem to the external device, which will cooperate and fulfill the control function together with the modem. </s>
<s n="s2.2;p105.169">The external devices in the project are composed of two parts: DTMF handset socket and PIC microcontroller. </s>
</p>
<figure id="BAWE_6107d-fig.017"/>
<table id="BAWE_6107d-tab.007">
<head rend="bold">Table 4.1.4 DTMF 4p4c plug </head>
<row>
<cell/>
</row>
</table>
<figure id="BAWE_6107d-fig.018">
<head rend="bold">Figure 4.1.5 connect to DTMF handset socket and PIC microcontroller</head>
</figure>
<p n="p106.169">
<s n="s1.5;p106.169">The Y-cable used in here has been introduced in the background section, which connect the 15PIN and 9PIN RS232 serial ports perfectly. </s>
<s n="s2.5;p106.169">There are four Pins in the DTMF 4p4c plug, while the PIN 2 which is "speaker+" will transfer the incoming voice tone feature to the DTMF input. </s>
<s n="s3.5;p106.169">So we only make use of PIN2. </s>
<s n="s4.5;p106.169">Then connect the two RS232 ports. </s>
<s n="s5.5;p106.169">The Y-cable divides the 15PIN on the modem into a 9PIN male and a 4PIN DTMF plug, which enable the serial communication with the 9PIN female port on the PIC integrated board. </s>
</p>
<table id="BAWE_6107d-tab.008">
<row>
<cell/>
</row>
</table>
<figure id="BAWE_6107d-fig.019">
<head rend="bold">Figure and table 4.1.6</head>
</figure>
<p n="p107.169">
<s n="s1.1;p107.169">The last step about GSM modem is connecting with the power supply to activate. </s>
</p>
<p n="p108.169">
<s n="s1.6;p108.169">From the figure above, it is clear that the PIN 3 and 4 on the 4 PIN modem socket are power supply port. </s>
<s n="s2.6;p108.169">Connect the open ending of the included power cord to a DC supply and refer to the instructions for power supply requirement. </s>
<s n="s3.6;p108.169">Connect the connector to the modem. </s>
<s n="s4.6;p108.169">The modem will turn on automatically if the power supply has been correctly connected. </s>
<s n="s5.6;p108.169">The red status indicator on the modem will be lit when power on. </s>
<s n="s6.6;p108.169">After a few seconds it will go flashing slowly. </s>
</p>
<p n="p109.169">
<s n="s1.1;p109.169">By far, we have connected the GSM modem with PIC and DTMF. The next step is connecting the DTMF with the PIC board. </s>
</p>
<p n="p110.169">
<s n="s1.4;p110.169">MT8870D is the DTMF decoder which will be used on the buggy. </s>
<s n="s2.4;p110.169">It is a very small-sized chip so the breadboard in the 18F452 is big enough. </s>
<s n="s3.4;p110.169">Place the chip into the breadboard and find out its working circuit. </s>
<s n="s4.4;p110.169">According to the components and their connected PIN, link them precisely and correctly. </s>
</p>
<figure id="BAWE_6107d-fig.020">
<head rend="bold">Figure 4.1.7 Single ended input configuration for BT or CEPT spec</head>
</figure>
<p n="p111.169">
<s n="s1.4;p111.169">We will notice that the crystal must be 3.579545MHZ and the capacitors and resistance be in precise quantity. </s>
<s n="s2.4;p111.169">The required 5V DC voltage source can obtain by connecting to the DC voltage source on the PIC integrated board. </s>
<s n="s3.4;p111.169">The DTMF input has already been connected to the "speaker+" from the GSM modem. </s>
<s n="s4.4;p111.169">The outputs (Q1, Q2, Q3 and Q4) need to be connected to low 4 bits of PORT D on PIC, which are PIN 19, 20, 21, 22 (see in Figure 2.3.1), will act as the information input port of PIC. </s>
</p>
<p n="p112.169">
<s n="s1.3;p112.169">Outputs of PIC are sequences of 0 and 1 which will control stepper motors by changing the current flowing directions, taking up the low 4 bits of PORT B and PORT C on PIC. According to the program and refer to the figure 4.1.1, it is easy to find that PORTB is in charge of the forward and backward stepper motor while PORTC for the leftward and rightward motor. </s>
<s n="s2.3;p112.169">The following step is connecting them well. </s>
<s n="s3.3;p112.169">The connections between drive boards and stepper motors have been done as well. </s>
</p>
<p n="p113.169">
<s n="s1.3;p113.169">The last step for the whole system is that provide the power supply for every part. </s>
<s n="s2.3;p113.169">PIC, drive boards and stepper motors must be connected to the 12V lead acid battery correctly. </s>
<s n="s3.3;p113.169">It is vital to be careful and never be confused about the positive and negative because almost all device are using a same battery. </s>
</p>
<p n="p114.169">
<s n="s1.2;p114.169">Now, the system is activated and starting to implement its functions. </s>
<s n="s2.2;p114.169">The steps below specify a whole control and implement process from the instructor to the machine. </s>
</p>
<p n="p115.169">
<s n="s1.1;p115.169">Steps: </s>
</p>
<p rend="ordered" n="p116.169">
<s n="s1.2;p116.169">
<hi rend="bold">1</hi>. </s>
<s n="s2.2;p116.169">Call the number of the GSM modem (a SIM card in it) </s>
</p>
<p rend="ordered" n="p117.169">
<s n="s1.2;p117.169">
<hi rend="bold">2</hi>. </s>
<s n="s2.2;p117.169">Wait for the modem's answer </s>
</p>
<p rend="ordered" n="p118.169">
<s n="s1.3;p118.169">
<hi rend="bold">3</hi>. </s>
<s n="s2.3;p118.169">The modem gets the AT command written in the program delivered by PIC through RS232 serial port. </s>
<s n="s3.3;p118.169">So it automatically answer the call, communication 1 connected </s>
</p>
<p rend="ordered" n="p119.169">
<s n="s1.2;p119.169">
<hi rend="bold">4</hi>. </s>
<s n="s2.2;p119.169">Press one of the five keys on the phone's keyboard </s>
</p>
<p rend="ordered" n="p120.169">
<s n="s1.3;p120.169">
<hi rend="bold">5</hi>. </s>
<s n="s2.3;p120.169">The modem received the tone through GSM network and sends it to DTMF decoder through its handset's speaker(+) output wire. </s>
<s n="s3.3;p120.169">Communication 2 is linked. </s>
</p>
<p rend="ordered" n="p121.169">
<s n="s1.3;p121.169">
<hi rend="bold">6</hi>. </s>
<s n="s2.3;p121.169">The DTMF decoder gets the tone and decodes it into binary numbers then sends them to the input port of PIC processor. </s>
<s n="s3.3;p121.169">Communication 3 is established. </s>
</p>
<p rend="ordered" n="p122.169">
<s n="s1.3;p122.169">
<hi rend="bold">7</hi>. </s>
<s n="s2.3;p122.169">The PIC processor receives these binary numbers and executes the program in itself. </s>
<s n="s3.3;p122.169">The expected result is sending effective control binary numbers to two stepper motors separately, which will drive the magnet rotating in proper way. </s>
</p>
<p rend="ordered" n="p123.169">
<s n="s1.2;p123.169">
<hi rend="bold">8</hi>. </s>
<s n="s2.2;p123.169">With the stepper motor correctly rotating, we will see the buggy moves in various directions which merely according to the number you pressed. </s>
</p>
<p n="p124.169">
<s n="s1.6;p124.169">Note: Everyone can control this buggy by calling its number: "07798517512", no matter how far away you are from it. </s>
<s n="s2.6;p124.169">It doesn't set a restrict caller either. </s>
<s n="s3.6;p124.169">When press "5", it halt the movement. </s>
<s n="s4.6;p124.169">Press any other 4 numbers, it activate again. </s>
<s n="s5.6;p124.169">You can not try to stop its performance by ending the conversation. </s>
<s n="s6.6;p124.169">There is no design for the "end" key, which is a defect of the system. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">5. Tests and Performance Analysis</head>
<p n="p125.169">
<s n="s1.2;p125.169">Tests have been done all the time, including the tests on certain parts and on the whole system. </s>
<s n="s2.2;p125.169">In this stage, some problems were found and necessary modifications and improvements are made. </s>
</p>
<div2>
<head rend="bold">Problem 1: (partial tests only on PIC and stepper motor): </head>
<p n="p126.169">
<s n="s1.1;p126.169">When fixed the connection between serial port and the stepper-motor, after power on, the stepper-motor turned some steps and stopped at a position. </s>
</p>
<p n="p127.169">
<s n="s1.1;p127.169">Analysis: </s>
</p>
<p n="p128.169">
<s n="s1.1;p128.169">Because there wasn't any operation on GSM and DTMF then, it seemed that the problem was caused by the program in the PIC chip. </s>
</p>
<p n="p129.169">
<s n="s1.5;p129.169">Some steps movements indicate that the initializing is ok. </s>
<s n="s2.5;p129.169">Just the outputs of PORTB and PORTC were forced to a fixed state. </s>
<s n="s3.5;p129.169">Examining the program in PIC, it seems that only the "<hi rend="bold">switch()</hi>" statement can cause the output to a default state. </s>
<s n="s4.5;p129.169">When the states of PORTB or PORTC were not any of the four states, the switch will go to default state forever. </s>
<s n="s5.5;p129.169">In this case, the value of PORTB and PORTC can never be one of the "0x05", "0x09", "0x0A" or "0x06". </s>
</p>
<p n="p130.169">
<s n="s1.1;p130.169">Solution: </s>
</p>
<p n="p131.169">
<s n="s1.4;p131.169">After finding out the problem, there are different ways of solving it. </s>
<s n="s2.4;p131.169">The most simplest and effective one is to change the condition vector of the "<hi rend="bold">switch()</hi>" statement. </s>
<s n="s3.4;p131.169">Using the state of PORT as a condition, define a new variable as the state will be sensible to solve the problem. </s>
<s n="s4.4;p131.169">So the code was changed into: </s>
</p>
<p n="p132.169">
<s n="s1.1;p132.169">
<formula notation="" id="BAWE_6107d-form.016"/> </s>
</p>
<p n="p133.169">
<s n="s1.1;p133.169">After program the PIC chip in this program, this problem was fixed. </s>
</p>
</div2>
<div2>
<head rend="bold">Problem 2: (tests on the whole system)</head>
<p n="p134.169">
<s n="s1.1;p134.169">Sometimes the GSM didn't answer the call and sometimes it answered but can't get the correct decoder numbers from DTMF. </s>
</p>
<p n="p135.169">
<s n="s1.1;p135.169">The best skill I learned from plenty of testing experiences is how to locate the place that causing the problem and separate it from the other irrespective components. </s>
</p>
<p n="p136.169">
<s n="s1.7;p136.169">Since GSM can't answer the incoming call automatically, we should focus on the AT commands. </s>
<s n="s2.7;p136.169">It is not sure that the commands are sent through RS232 serial port. </s>
<s n="s3.7;p136.169">Now we need to find out whether the ASCII string being sent. </s>
<s n="s4.7;p136.169">When using the Hyper-terminal software, any commands that were tested in the design philosophy part worked well. </s>
<s n="s5.7;p136.169">The response was always a right one, including "ATS0=1" used in program. </s>
<s n="s6.7;p136.169">So the TX (transmit) and RX (receive) pins on the RS232 serial ports are the first object to check. </s>
<s n="s7.7;p136.169">According to the Pin diagram and interface introduced in the background, we found out the very pins. </s>
</p>
<table id="BAWE_6107d-tab.009">
<head rend="bold">Table 5.1.1 Tx and Rx PIN on two types of RS232</head>
<row>
<cell/>
</row>
</table>
<p n="p137.169">
<s n="s1.4;p137.169">In order to find the source of problem, first we check the state of these Pins when in a good communication condition with Hyper-terminal. </s>
<s n="s2.4;p137.169">Connect the modem with PC by serial ports. </s>
<s n="s3.4;p137.169">Measuring the waveform and check the values on the RX (PIN6) of 15 PIN modem and Tx (PIN3) of 9 PIN PC serial port. </s>
<s n="s4.4;p137.169">I found that when entering the "ATS0=1" in the keyboard, the voltage on the pin dropped from high to low, indicating that the ASCII string is sent through RS232 and accepted as AT commands. </s>
</p>
<p n="p138.169">
<s n="s1.1;p138.169">Because since this has been done, the modem can answer any call automatically after one ring. </s>
</p>
<p n="p139.169">
<s n="s1.2;p139.169">Disconnect the PC and modem and reconnect the PIC integrated board. </s>
<s n="s2.2;p139.169">Turn on the power supply and running the program, repeat the same steps as above, but the voltage value didn't change but remained high. </s>
</p>
<p n="p140.169">
<s n="s1.10;p140.169">So it's the problem of program in the chip definitely. </s>
<s n="s2.10;p140.169">But the sentence concerning with the AT commands in the whole program is just "puts ("ATS0=0\r\n")". </s>
<s n="s3.10;p140.169">There is no mistake in this code. </s>
<s n="s4.10;p140.169">The problem must be somewhere else. </s>
<s n="s5.10;p140.169">Then I noticed that when opening the Hyper-terminal, the system will ask you to set some value about the serial port. </s>
<s n="s6.10;p140.169">The default value of bits per second is 9600. </s>
<s n="s7.10;p140.169">However, 9600 is for GSM20 not GSM100T, which has enhanced features than GSM20. </s>
<s n="s8.10;p140.169">If I don't change the 9600 to 115200 for GSM100T, even in hyper-terminal, the AT commands that I entered would return the string response: "ERROR". </s>
<s n="s9.10;p140.169">This suddenly reminded me of the beginning of my program that in the define code, the baud rate is 9600 as well. </s>
<s n="s10.10;p140.169">May be this is the main reason resulted in problems. </s>
</p>
<p n="p141.169">
<s n="s1.1;p141.169">
<formula notation="" id="BAWE_6107d-form.017"/> </s>
</p>
<p n="p142.169">
<s n="s1.1;p142.169">modify it into: </s>
</p>
<p n="p143.169">
<s n="s1.1;p143.169">
<formula notation="" id="BAWE_6107d-form.018"/> </s>
</p>
<p n="p144.169">
<s n="s1.2;p144.169">After change the baud rate, the GSM modem worked immediately. </s>
<s n="s2.2;p144.169">This gave me a big lesson that every detail you ignored may become the failure of the whole project. </s>
</p>
<p n="p145.169">
<s n="s1.1;p145.169">Settings made via AT commands are automatically reused by the modem until another </s>
</p>
<p n="p146.169">
<s n="s1.2;p146.169">command is received to change them, or the modem is turned off. </s>
<s n="s2.2;p146.169">This is why I need </s>
</p>
<p n="p147.169">
<s n="s1.1;p147.169">to reset it every time when the turning on the power supply. </s>
</p>
<p n="p148.169">
<s n="s1.1;p148.169">Since GSM100T is more advanced, it has some extra functions, such as TCP/IP stack </s>
</p>
<p n="p149.169">
<s n="s1.2;p149.169">available for data and internet. </s>
<s n="s2.2;p149.169">My project here doesn't need to the TCP/IP, however </s>
</p>
<p n="p150.169">
<s n="s1.1;p150.169">it brought some invisible trouble to the system. </s>
</p>
<p n="p151.169">
<s n="s1.2;p151.169">The TCP/IP stack has a "side effect" feature, which needs the setting ATQ0. </s>
<s n="s2.2;p151.169">So when </s>
</p>
<p n="p152.169">
<s n="s1.2;p152.169">sending a ATQ1 in testing stage, I got a response "+CME ERROR": 600. </s>
<s n="s2.2;p152.169">This TCP/IP </s>
</p>
<p n="p153.169">
<s n="s1.1;p153.169">stack sometimes will enable the modem no longer send responses to AT commands or </s>
</p>
<p n="p154.169">
<s n="s1.1;p154.169">enable some unsolicited codes (e.g. +WIND, +CREG...). </s>
</p>
<p n="p155.169">
<s n="s1.2;p155.169">I almost met with all the problems described above. </s>
<s n="s2.2;p155.169">It is very necessary to find some </s>
</p>
<p n="p156.169">
<s n="s1.2;p156.169">code to disable the TCP/IP stack. </s>
<s n="s2.2;p156.169">From a FAQ on the GSM100T product website, I </s>
</p>
<p n="p157.169">
<s n="s1.2;p157.169">got the useful methods. </s>
<s n="s2.2;p157.169">Two possible resolutions to this problem are: </s>
</p>
<list type="ordered">
<item>1. Disable command echos with the command ATE0.</item>
<item>2. Disable the TCP/IP stack with following commands:</item>
<item>
<formula notation="" id="BAWE_6107d-form.019"/>
</item>
<item>
<formula notation="" id="BAWE_6107d-form.020"/>
</item>
<item>
<formula notation="" id="BAWE_6107d-form.021"/>
</item>
</list>
<p n="p158.169">
<s n="s1.6;p158.169">I tried the second way and from then on not a mistake cause by the side effect of TCP/IP. It is proved to be effective. </s>
<s n="s2.6;p158.169">By far we have solved the problem about AT command transmitting. </s>
<s n="s3.6;p158.169">The modem and PIC and communicate well now. </s>
<s n="s4.6;p158.169">After the call was answered, the stepper motors don't rotating as instructed when pressing numbers on the phone. </s>
<s n="s5.6;p158.169">The program about controlling has been proved right as we simulated the input to PIC using the switches on board to replace the DTMF decoded binary numbers and got the correct movement on both motors. </s>
<s n="s6.6;p158.169">So this may be related with DTMF decoder and its working circuit since we have excluded the false possibility of program in PIC. </s>
</p>
<p n="p159.169">
<s n="s1.4;p159.169">The working circuit configuration of DTMF is connected on the breadboard of the PIC board because it is simple and clear. </s>
<s n="s2.4;p159.169">But after all the space on the breadboard is limited and other devices are also linked with PIC, the circuit got damaged easily, which greatly influenced the performance. </s>
<s n="s3.4;p159.169">For example, when carrying out the last several tests with my supervisor, the capacitor in the input of DTMF decoder dropped down without being noticed. </s>
<s n="s4.4;p159.169">This resulted in the buggy not working again until we found the small capacitor and fix it. </s>
</p>
</div2>
<div2>
<head rend="bold">Problem 3 (on whole system)</head>
<p n="p160.169">
<s n="s1.1;p160.169">Sometimes the front parts are all OK just the stepper motors don't turn correctly. </s>
</p>
<p n="p161.169">
<s n="s1.4;p161.169">A good way to decide the problem exists in DTMF or in stepper motor is that connecting the output of DTMF not to stepper motors but to the LEDs on the integrated board. </s>
<s n="s2.4;p161.169">Because the binary numbers decoded by DTMF can be seen through the lighting of LEDs. </s>
<s n="s3.4;p161.169">By using this method, we found that the decoded binary numbers are right so exclude the possibility of DTMF. Double check the connection between PIC and stepper motor and found that one of five wires on the socket has broken. </s>
<s n="s4.4;p161.169">Weld the wire and the problem solved. </s>
</p>
<p n="p162.169">
<s n="s1.2;p162.169">At last all big problems have been solved by different solutions and through lots of tests and analysis and the buggy can realize its function with a very slow speed. </s>
<s n="s2.2;p162.169">But the performance stability of this system still needs to be improved. </s>
</p>
<p n="p163.169">
<s n="s1.1;p163.169">The full code of the program was printed later in Appendix and saved a copy in the CD attached. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">6. Conclusion and Future expansions</head>
<p n="p164.169">
<s n="s1.5;p164.169">The time and energy dedicated to this project over the past 7 months has certainly met and the experiences and skills I learned exceeded the original scope of project expectations. </s>
<s n="s2.5;p164.169">There are many challenges and commitments illustrated in this industry technical report to produce such a buggy and many risks taken in trying something new and untested to me. </s>
<s n="s3.5;p164.169">The final result of project is worth the effort of engaging and involving in it. </s>
<s n="s4.5;p164.169">In the process of trying different approaches, I gained a better understanding both on industry and academy. </s>
<s n="s5.5;p164.169">The big practice like this teaches me how industry works and how projects explore one after another. </s>
</p>
<p n="p165.169">
<s n="s1.5;p165.169">However, there exist some points still needing to be improved. </s>
<s n="s2.5;p165.169">First, the requirement of resetting every time when the power on, which brings inconvenience to the implementation. </s>
<s n="s3.5;p165.169">I think a deeper research into AT commands of GSM modem can solve this problem. </s>
<s n="s4.5;p165.169">Hundreds of commands can meet almost all the application circumstances. </s>
<s n="s5.5;p165.169">Many of them are seldom noticed and used so there should be one command can solve this. </s>
</p>
<p n="p166.169">
<s n="s1.4;p166.169">Second, based on the present function, the buggy can be made only recognize one specific controller. </s>
<s n="s2.4;p166.169">This requires a more advanced compare function which can be done by improving the program. </s>
<s n="s3.4;p166.169">Furthermore, it is also practicable to define additional parameters to the modem by AT commands that instruct the modem to perform certain functions automatically when dialing a phone number. </s>
<s n="s4.4;p166.169">The commands that are used to accomplish this task must be placed in the dial string prior to issuing the command. </s>
</p>
<p n="p167.169">
<s n="s1.5;p167.169">Third, the end of every control communication must first ending with a key "5" then pressing the "hang-up" key. </s>
<s n="s2.5;p167.169">If the sequence is opposite, the buggy still moves according to the last command. </s>
<s n="s3.5;p167.169">But normally people would like to use the "hang-up" key to end everything. </s>
<s n="s4.5;p167.169">So this should be reconsidered in the program that making the "hang-up" key has the same function as key "5". </s>
<s n="s5.5;p167.169">It is hard to implement in the project is that the "hang-up" key in the keyboard doesn't have a specific DTMF frequency and can not be decoded into binary numbers as the key "5" does. </s>
</p>
<p n="p168.169">
<s n="s1.4;p168.169">Last, the movement speed of buggy can be faster by software methods, such as modifying the program. </s>
<s n="s2.4;p168.169">Basically we control the speed of stepper motor by changing the parameter of cycle delay. </s>
<s n="s3.4;p168.169">However, this method has limitation when the parameter has already been very small. </s>
<s n="s4.4;p168.169">Hence another approach needs to be explored to solve this problem. </s>
</p>
<p n="p169.169">
<s n="s1.1;p169.169">In one word, there is great potential in the future development and improvement on both hardware and software in this project. </s>
</p>
</div1>
</body>
<back>
<div1 type="back text">
<head rend="bold">7. Acknowledgements</head>
<p>I would like to express my many thanks to my project supervisor <name type="tutor name"/> for his great assistances and guidances throughout the entire work, <name type="other"/> and <name type="other"/> at electronic engineering department for their timely practical help in the process of this project, <name type="other"/> for his providing some of the components, and <name type="other"/> for his advice on the GSM communication.</p>
<p>I would also like to thank my parents and friends for their encouragements and supports from beginning to the end. This report is dedicated to all of them. </p>
</div1>
<div1 type="bibliography">
<head rend="bold">8. References</head>
<p>1. Microchip PIC 18Fxx2 Data sheet, 2002 Microchip technology</p>
<p>
<seg type="URL" n="http://ww1.microchip.com/downloads/en/DeviceDoc/39564b.pdf"/> </p>
<p>2. Wikipedia: Global System for Mobile Communications</p>
<p>
<seg type="URL" n="http://en.wikipedia.org/wiki/GSM"/>
</p>
<p>3. Better by design RF Solutions Ltd > GSM Products > GSM Modems, RF solutions Ltd 2004, all rights reserved <seg type="URL" n="http://www.rfsolutions.co.uk/acatalog/GSM_Modems.html"/> </p>
<p>4. RFsolutions, GSM &amp; GPRS modem GSM20 GSM100T, 2004 REG No 277 4001, ENGLAND.</p>
<p>
<seg type="URL" n="http://www.rfsolutions.co.uk/acatalog/DS020-6.pdf"/> </p>
<p>5. Technology in Capsules</p>
<p>
<seg type="URL" n="http://techcapsules.blogspot.com/2005/07/dtmf-signalling.html?gclid=CLCM_6HevIQCFQxeEgod5GYyDw"/>
</p>
<p>6. Douglas W.Jones, 1995. Stepping Motor Types [online]. The University of IOWA. Available at: &lt;URL: <seg type="URL" n="http://www.cs.uiowa.edu/~jones/step/types.html"/>> [Latest accessed 25 April 2005]</p>
<p>7. PIC Circuit Gallery, Stepper Motor controller, 2002, Operation principle of stepper</p>
<p>motor [online]. Cleveland State University. Available at:&lt;URL:</p>
<p>
<seg type="URL" n="http://www.interq.or.jp/japan/se-inoue/e_step1.htm"/>> [Latest Accessed 11 Mar</p>
<p>2005]</p>
<p>8. <seg type="URL" n="http://www.webopedia.com/TERM/D/DTMF.html"/> </p>
<p>9. MITEL, [PDF] MT8870D/MT8870D-1 Integrated DTMF Receiver <seg type="URL" n="www.vandijkenelektronica.nl/"/> site/preview.php?index=538&amp;table=files</p>
<p>10. <hi rend="bold">C Compiler Reference Manual, May 2005 (in the department lab)</hi>
</p>
<p>11. Advanced Wireless Planet</p>
<p>
<seg type="URL" n="http://www.gsm-modem.de/gsm-modem-module.html"/>
</p>
<p>12. Wikipedia: Hayes Command Set</p>
<p>
<seg type="URL" n="http://en.wikipedia.org/wiki/AT_command"/>
</p>
<p>13. Modem.com: Extended AT command sets, 2003</p>
<p>
<seg type="URL" n="http://www.modem.com/general/extendat.html"/>
</p>
<p>14. Muse Platform: AT Commands Interface Guide </p>
<p>Wavecom at Version 004 April, 05<hi rend="sup">th</hi> , 2004</p>
<p>
<seg type="URL" n="http://www.rfsolutions.co.uk/acatalog/Downloads/AT_commands.pdf"/>
</p>
<p>15. Holtek HT9170B/HT9170D DTMF Receiver September 24<hi rend="sup">th</hi>, 2002</p>
<p>
<seg type="URL" n="http://www.holtek.com.tw/pdf/comm/9170v110.pdf"/>
</p>
</div1>
<div1 type="appendix">
<head rend="bold">9. Appendix</head>
<p/>
</div1>
</back>
</text>
</TEI.2>
