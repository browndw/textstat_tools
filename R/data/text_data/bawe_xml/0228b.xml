<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_0228b" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Pixel Shape and its Effects on Images</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
<note resp="British Academic Written English (BAWE) corpus project">Language used in quote: <foreign id="English">English</foreign>
</note>
<note resp="British Academic Written English (BAWE) corpus project">deleted: page numbers</note>
<note resp="British Academic Written English (BAWE) corpus project">appendices: .jpgs</note>
</notesStmt>
<sourceDesc>
<p n="level">3</p>
<p n="date">2006-01</p>
<p n="module title">Computer Systems Engineering</p>
<p n="module code">CG352</p>
<p n="genre family">Research report</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">12284</p>
<p n="number of s-units">625</p>
<p n="number of p">172</p>
<p n="number of tables">12</p>
<p n="number of figures">18</p>
<p n="number of block quotes">18</p>
<p n="number of formulae">1</p>
<p n="number of lists">1</p>
<p n="number of paragraphs formatted like lists">2</p>
<p n="abstract present">abstract present</p>
<p n="average words per s-unit">19.7</p>
<p n="average s-units per p">3.6</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1984</p>
<p n="first language">English</p>
<p n="education">UKA</p>
<p n="course">Computer Science</p>
<p n="student ID">0228</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart rend="underlined bold">Pixel Shape and its Effects on Images</titlePart>
</docTitle>
<titlePart>Author: <name type="student name"/> Supervisor: <name type="tutor name"/> Year of Study: 2004 - 2005</titlePart>
<titlePart>Keywords: Hexagon, Pixel, Sampling, OpenGL, Image</titlePart>
</titlePage>
<div1 type="front text">
<head rend="underlined bold">Acknowledgments</head>
<p>First I would like to thank God, for without Him nothing is possible.</p>
<p>Secondly I would like to thank my project supervisor, <name type="tutor name"/>, for his consistent advice and guidance from the beginning of the project through to the end.</p>
</div1>
<div1 type="front text">
<head rend="underlined bold">Self Assessment</head>
<p>Images are rarely presented using shapes other than the square. Many studies have indicated that hexagonal sampling is more useful than square sampling. Hexagonal pixels naturally fall on a hexagonal sampling grid and so it was important to finally test the theories. The result of the project could have benefited everyone, not just computer scientists, by allowing a faster, better quality image to be displayed on websites.</p>
<p>Other people can investigate my work use the ideas presented in the conclusion to better investigate the different pixel shapes.</p>
<p>The project may be deemed a success in some respects because the aim of the project was to investigate pixel shape and its effects on images. Hexagons and circles were investigated and their effects on images were noted in the results. Although the results were negative this can be a positive matter; now there is no need for someone else to investigate the ideas from scratch.</p>
<p>The main weakness of the project was that a deep understanding of the concepts involved was not developed until late into the project. This seriously reduced the chance to improve some of the aspects of image display.</p>
</div1>
</front>
<body>
<div1 type="abstract">
<head rend="underlined bold">Summary</head>
<p n="p1.172">
<s n="s1.4;p1.172">The aim of the project was to determine whether a shape alternative to squares could provide a better quality image at low resolution. </s>
<s n="s2.4;p1.172">This was investigated by simulating pixel shapes using the OpenGL graphics software. </s>
<s n="s3.4;p1.172">In a direct comparison between square pixel and hexagon pixel images, square pixel images were preferred 60% of the time compared with hexagon pixel images being preferred 28% of the time. </s>
<s n="s4.4;p1.172">However hexagon pixel images were using between 14.29% - 14.78% less samples than the square pixel images and were therefore at a disadvantage. </s>
</p>
</div1>
<div1 type="front-back-matter">
<head rend="underlined bold">Contents</head>
<p/>
</div1>
<div1 type="front-back-matter">
<head rend="underlined bold">List of Figures</head>
<list type="ordered">
<item>1. Square pixel images (square sampling grid) at different resolutions 11</item>
<item>2. Hexagonal sensory elements of the eye 14</item>
<item>3. Circularly bandlimited signals using squares and hexagons 15</item>
<item>4. Hexagon shape dimension ratios 16</item>
<item>5. Hexagonal sampling grid with pixels offset every other line 16</item>
<item>6. Hexagonal sampling grid aligning vertically with square sampling grid 17</item>
<item>7. Hexagonal sampling grid horizontal inconsistency with square sampling grid 17</item>
<item>8. Horizontal hexagonal sampling grid equivalent to square sampling grid 19</item>
<item>9. Hexagons displayed with different orientations 19</item>
<item>10. Circles on square sampling grids and hexagonal sampling grids 20</item>
<item>11. Circles overlapping on square and hexagonal sampling grids 20</item>
<item>12. RGB model colour cube 22</item>
<item>13. Hexagon simulation using square screen pixels from a monitor 23</item>
<item>14. Software Design 26</item>
<item>15. Hexagon Formation 29</item>
<item>16. Hexagons with decreased Z elements 30</item>
<item>17. GL_QUADS - ensures quadrilaterals only 30</item>
<item>18. Square formation 31</item>
<item>19. Geometry of circles 32</item>
<item>20. Increased definition of circle due to increase in number of defining points 32</item>
<item>21. GL_TRIANGLE_FAN - triangles are drawn in a fan-like fashion around an origin 33</item>
<item>22. Circle formation 33</item>
<item>23. Translation of drawing axis 34</item>
<item>24. Multiple hexagon display 35</item>
<item>25. Translation in Y direction 36</item>
<item>26. Every other line drawn before filling missing lines 36</item>
<item>27. Every line drawn sequentially by continually shifting drawing 37</item>
<item>28. Color-Index mode 38</item>
<item>29. Hexagons with colour 39</item>
<item>30. Range of colours displayed using hexagons 40</item>
<item>31. Envelope 41</item>
<item>32. Enlarged envelope 41</item>
<item>33. Pixel element in location (0,0) 41</item>
<item>34. Block of 3x3 pixels from top left of envelope 42</item>
<item>35. Mapping of first pixel 43</item>
<item>36. Mapping of second pixel 44</item>
<item>37. Correct sampling grids for different pixel shape 44</item>
<item>38. Image mapping from square pixels to hexagonal pixels 44</item>
<item>39. Uneven edge 45</item>
<item>40. OpenGL window unsuitable for dimensions of image 46</item>
<item>41. OpenGL window matching dimension of image 46</item>
<item>42. Image displayed with correct clipping 47</item>
<item>43. Subsampled image 48</item>
<item>44. Overlapping problem 49</item>
<item>45. Transparency solution 49</item>
<item>46. Test images used during preliminary experiment 51</item>
<item>47. Test images used for the final test 54</item>
<item>48. Nose displayed using hexagon pixels (left) and square pixels (right) 56</item>
<item>49. Final software design 59</item>
<item>50. Bluehills displayed using vertical hexagons 69</item>
<item>51. Bluehills displayed using horizontal hexagons 69</item>
<item>52. Bluehills displayed using circles on a hexagonal sampling grid 70</item>
<item>53. Bluehills displayed using circles on a square sampling grid 70</item>
<item>54. Bluehills displayed using squares 71</item>
<item>55. Sunset displayed using vertical hexagons 71</item>
<item>56. Sunset displayed using horizontal hexagons 72</item>
<item>57. Sunset displayed using circles on a hexagonal sampling grid 72</item>
<item>58. Sunset displayed using circles on a square sampling grid 73</item>
<item>59. Sunset displayed using squares 73</item>
<item>60. Sky displayed using vertical hexagons 74</item>
<item>61. Sky displayed using horizontal hexagons 74</item>
<item>62. Sky displayed using circles on a hexagonal sampling grid 75</item>
<item>63. Sky displayed using circles on a square sampling grid 75</item>
<item>64. Sky displayed using squares 76</item>
<item>65. Waterlilies displayed using vertical hexagons 76</item>
<item>66. Waterlilies displayed using horizontal hexagons 77</item>
<item>67. Waterlilies displayed using circles on a hexagonal sampling grid 77</item>
<item>68. Waterlilies displayed using circles on a square sampling grid 78</item>
<item>69. Waterlilies displayed using squares 78</item>
<item>70. Autumn displayed using vertical hexagons 79</item>
<item>71. Autumn displayed using horizontal hexagons 79</item>
<item>72. Autumn displayed using circles on a hexagonal sampling grid 80</item>
<item>73. Autumn displayed using circles on a square sampling grid 80</item>
<item>74. Autumn displayed using squares 81</item>
<item>75. Sakuraba displayed using hexagons 82</item>
<item>76. Sakuraba displayed using squares 82</item>
<item>77. Sky displayed using hexagons 83</item>
<item>78. Sky displayed using squares 84</item>
<item>79. House displayed using hexagons 85</item>
<item>80. House displayed using squares 86</item>
<item>81. Grass displayed using hexagons 87</item>
<item>82. Grass displayed using squares 87</item>
</list>
<p/>
</div1>
<div1 type="section">
<head rend="underlined bold">1. Introduction</head>
<div2>
<head rend="underlined bold">1.1 Motivation</head>
<p n="p2.172">
<s n="s1.5;p2.172">Images have been displayed in many different formats over the centuries. </s>
<s n="s2.5;p2.172">They have decorated the walls of the caveman, been presented on paper and exhibited in galleries on canvases. </s>
<s n="s3.5;p2.172">However in recent times images have been shown on computer monitors and television screens. </s>
<s n="s4.5;p2.172">The properties of these pictures are different from all the other pictures on different formats. </s>
<s n="s5.5;p2.172">Images are normally continuous, however on a computer the image is made from discrete pixels. </s>
</p>
<p n="p3.172">
<s n="s1.3;p3.172">Presently the current standard for presenting digital images on computers is to use square pixels on a square sampling grid. </s>
<s n="s2.3;p3.172">While in most cases this is adequate it has been shown that a hexagonal sampling grid can improve on the sampling efficiency and data storage size provided by square sampling grids <hi rend="sup">[1]</hi>. </s>
<s n="s3.3;p3.172">Changing other properties of pixels may also be able to improve certain qualities of images. </s>
</p>
<p n="p4.172">
<s n="s1.7;p4.172">Square pixels on a square sampling grid produce good quality images at high resolutions. </s>
<s n="s2.7;p4.172">When using the World Wide Web, webpages can take some time to load, especially when displaying many images on the webpage. </s>
<s n="s3.7;p4.172">To improve the speed of loading the webpage one can either obtain a faster internet connection or decrease the storage size of the images. </s>
<s n="s4.7;p4.172">Storage size of an image can be reduced by lowering the resolution. </s>
<s n="s5.7;p4.172">However at lower resolutions using square pixels on a square sampling grid can produce unwanted artefacts in an image. </s>
<s n="s6.7;p4.172">This is particularly the case when viewing diagonal lines at low resolution. </s>
<s n="s7.7;p4.172">Diagonal lines may not fall correctly on the square grid giving more of a stepping effect than a natural transition of position. </s>
</p>
<p n="p5.172">
<s n="s1.5;p5.172">Images on computers may be transferred to paper by printing them. </s>
<s n="s2.5;p5.172">Printing low resolution images can produce an image with grey blocky areas. </s>
<s n="s3.5;p5.172">Printer errors can also result in lines and streaks forming on the printout. </s>
<s n="s4.5;p5.172">Printers transfer ink onto the paper using circular droplets of ink. </s>
<s n="s5.5;p5.172">It has been suggested that using a square pixel for the original pixel and then printing using circles could be causing these grey areas. </s>
</p>
<p n="p6.172">
<s n="s1.1;p6.172">This report will investigate pixel shape and its effect on images. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">1.2 Background</head>
<p n="p7.172">
<s n="s1.7;p7.172">Each pixel has certain properties associated with it; the properties concerned with in this report are shape, colour and position. </s>
<s n="s2.7;p7.172">When producing pictures correct tessellation of pixels must be ensured otherwise there would be gaps in the image. </s>
<s n="s3.7;p7.172">This may be achieved by completely tiling an area with any shapes, as in a Voronoi diagram. </s>
<s n="s4.7;p7.172">However efficient image processing is obtained by maintaining a constant pixel shape throughout one particular image. </s>
<s n="s5.7;p7.172">The colour and position of pixels in an image are varied in a particular manner such that a useful image is formed. </s>
<s n="s6.7;p7.172">A useful image can be defined as an image from which some information can be taken. </s>
<s n="s7.7;p7.172">If an image is too blurred due to noise, or too low a resolution then it is not possible to make out the picture, hence there is no information in the picture and so the image is useless. </s>
</p>
<p n="p8.172">
<s n="s1.10;p8.172">As resolution is gradually reduced information is lost from the image. </s>
<s n="s2.10;p8.172">This may be achieved by subsampling an image. </s>
<s n="s3.10;p8.172">A fixed number of samples are taken from the pixel data - the fewer samples taken the lower the resolution. </s>
<s n="s4.10;p8.172">It is at these low resolutions where pixel shape can make a difference. </s>
<s n="s5.10;p8.172">At high resolutions the human eye can not discern individual pixels. </s>
<s n="s6.10;p8.172">So whether the image was displayed using square, diamond, trapezium or indeed any shape pixel would not make much difference. </s>
<s n="s7.10;p8.172">The image would still look the same; the same amount of information could be obtained. </s>
<s n="s8.10;p8.172">However because the resolution is so high there is much more pixel data to be stored and hence the storage size of the image increases. </s>
<s n="s9.10;p8.172">Image compression can be applied but this has led to artefacts appearing in images and a lowering of the quality of the image. </s>
<s n="s10.10;p8.172">At low resolutions using a different pixel shape could result in more information being gained from an image. </s>
</p>
<figure id="BAWE_0228b-fig.001">
<head rend="bold">Figure 1 - Square pixel images (square sampling grid) at different resolutions</head>
</figure>
<p n="p9.172">
<s rend="italic" n="s1.2;p9.172">Figure 1A represents a diagonal line at high resolution. </s>
<s rend="italic" n="s2.2;p9.172">We have a very smooth line. </s>
</p>
<p n="p10.172">
<s rend="italic" n="s1.2;p10.172">Figure 1B represents a diagonal line at very low resolution. </s>
<s rend="italic" n="s2.2;p10.172">Here we can see the individual pixels. </s>
</p>
<p n="p11.172">
<s rend="italic" n="s1.2;p11.172">Figure 1C represents a diagonal line at low resolution. </s>
<s rend="italic" n="s2.2;p11.172">Here were are just about able to see the individual pixels </s>
</p>
<p n="p12.172">
<s n="s1.13;p12.172">In figure 1A we see a diagonal line at a high resolution. </s>
<s n="s2.13;p12.172">Here we cannot make out the individual pixels of the line. </s>
<s n="s3.13;p12.172">Therefore the line looks like a smooth diagonal line. </s>
<s n="s4.13;p12.172">However in figure 1B the resolution is a lot lower. </s>
<s n="s5.13;p12.172">This image is not pleasing to the human eye because we can see the individual pixels. </s>
<s n="s6.13;p12.172">The diagonal line can be seen as a series of squares in a stepping fashion. </s>
<s n="s7.13;p12.172">If the intention was to produce a diagonal line this image would be unsatisfactory. </s>
<s n="s8.13;p12.172">In figure 1C it is only just possible to see the pixels. </s>
<s n="s9.13;p12.172">The image is bordering between acceptable and unacceptable. </s>
<s n="s10.13;p12.172">Using a different shaped pixel in this situation could result in a smoother diagonal line, meaning a more useful image would be obtained at the same low resolution. </s>
<s n="s11.13;p12.172">This also applies to edges of objects. </s>
<s n="s12.13;p12.172">The boundary between two objects can be simply viewed as a line. </s>
<s n="s13.13;p12.172">An object may have edges at a variety of angles. </s>
</p>
<p n="p13.172">
<s n="s1.1;p13.172">Using the example of World Wide Web based images it would be useful to produce an image that had a low resolution, allowing it to load more quickly, but still contain useful information. </s>
</p>
<p n="p14.172">
<s n="s1.4;p14.172">Printers use circular droplets of ink or circular light spots to print images, or indeed anything else. </s>
<s n="s2.4;p14.172">At low resolutions printers sometimes print incorrectly leaving large areas with unwanted ink. </s>
<s n="s3.4;p14.172">This may be due to the mapping difference between the circular droplets and the square pixels of the original image. </s>
<s n="s4.4;p14.172">If the image was made of circular pixels then perhaps these printing errors would not occur. </s>
</p>
<p n="p15.172">
<s n="s1.2;p15.172">The primary objective of the project was to investigate pixel shape, alternative to square pixels, in order to provide a better quality image. </s>
<s n="s2.2;p15.172">The secondary objective was to investigate pixel shape in order to provide a better printout. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">2. Theory</head>
<p n="p16.172">
<s n="s1.1;p16.172">For the best possible approach to the project it was important to gain an understanding of the issues involved with displaying images and also the different features of different shapes. </s>
</p>
<div2>
<head rend="underlined bold">2.1 Human Eye</head>
<p n="p17.172">
<s n="s1.12;p17.172">Before deciding what pixel shape to investigate it is interesting to observe how humans perceive images. </s>
<s n="s2.12;p17.172">Light travels through the cornea and lens which focus the light on to the retina, located at the back of the eye. </s>
<s n="s3.12;p17.172">The retina is formed from two types of cell - rods and cones. </s>
<s n="s4.12;p17.172">The rods specialise in receiving light under poor lighting conditions and are generally very sensitive to changes in light intensity while the cones specialise in receiving colour <hi rend="sup">[2]</hi>. </s>
<s n="s5.12;p17.172">The cones are divided into groups, those which specialise in receiving yellowish-green light, those which specialise in receiving green light and those which specialise in receiving blue light <hi rend="sup">[3]</hi>. </s>
<s n="s6.12;p17.172">The rods and cones pick up the light signals which are sent to the visual cortex of the brain. </s>
<s n="s7.12;p17.172">The brain receives the main elements of the images and then fills in the spaces. </s>
<s n="s8.12;p17.172">The interesting point to note from the examination of the human vision system is the organisation of the rods and cones. </s>
<s n="s9.12;p17.172">These sensory elements are roughly hexagonal and are arranged in the hexagonal mosaic fashion as this is the most efficient packing method. </s>
<s n="s10.12;p17.172">Since humans are perceiving images through hexagonal receptors it may be better to view images with hexagonal pixels instead of square pixels. </s>
<s n="s11.12;p17.172">To ensure correct tessellation hexagonal pixels must be sampled on a hexagonal sampling grid - the benefits of the hexagonal sampling grid have already been mentioned in the introduction. </s>
<s n="s12.12;p17.172">Middleton and Sivaswamy suggest that hexagonal sampling exploit the oblique effect in human vision thereby providing a better image when viewed by humans <hi rend="sup">[4]</hi>. </s>
</p>
<figure id="BAWE_0228b-pic.001">
<head rend="bold">Figure 2 - Hexagonal sensory elements of the eye</head>
</figure>
</div2>
<div2>
<head rend="underlined bold">2.2 Computer Images</head>
<p n="p18.172">
<s n="s1.7;p18.172">An image can be described as a continuous two-dimensional brightness field. </s>
<s n="s2.7;p18.172">An image must be sampled and those samples digitized before a computer can process the image. </s>
<s n="s3.7;p18.172">The continuous image is then reconstructed from the samples. </s>
<s n="s4.7;p18.172">The brightness fields can be converted to the Fourier plane where the spatial-frequencies can be analysed - the frequency with which the brightness varies across a space. </s>
<s n="s5.7;p18.172">For correct image reconstruction, from the samples, the spatial frequencies must be non-overlapping. </s>
<s n="s6.7;p18.172">However a real world image will have spatial frequency components throughout the image. </s>
<s n="s7.7;p18.172">If this image were to be sampled and then reconstructed, the resultant image would contain aliasing errors and would therefore be an inaccurate representation of the original image. </s>
</p>
<p n="p19.172">
<s n="s1.2;p19.172">To avoid this problem the original image must be bandlimited. </s>
<s n="s2.2;p19.172">Typically images have been limited to a circular shape because the circular shape limits equally in all directions <hi rend="sup">[5]</hi>. </s>
</p>
<p n="p20.172">
<s n="s1.4;p20.172">Gauss proved that the hexagonal packing structure was the most efficient method when using regular circles. </s>
<s n="s2.4;p20.172">The hexagonal arrangement provided a density of 0.9069. </s>
<s n="s3.4;p20.172">Therefore more samples in a fixed space can be taken using a hexagonal sampling scheme. </s>
<s n="s4.4;p20.172">The increase in number of samples could provide a better quality image <hi rend="sup">[6]</hi>. </s>
</p>
<p n="p21.172">
<s n="s1.3;p21.172">However if image reconstruction were to be carried out using circularly bandlimited samples there would be gaps in the resultant image. </s>
<s n="s2.3;p21.172">On a physical display it would not be possible to overlap the samples to form a complete tiling. </s>
<s n="s3.3;p21.172">However the circularly bandlimited samples can be resized to fit inside other shapes which tessellate perfectly thus allowing correct reconstruction of the original image. </s>
</p>
<figure id="BAWE_0228b-fig.002">
<head rend="bold">Figure 3 - Circularly bandlimited signals using squares and hexagons</head>
</figure>
<p n="p22.172">
<s n="s1.3;p22.172">As mentioned in the introduction the current standard is to use squares pixels. </s>
<s n="s2.3;p22.172">However it can be seen that the hexagon provides a closer match for the circle than the square. </s>
<s n="s3.3;p22.172">The hexagonal shape therefore saves on bandwidth which is important when dealing with internet images. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">2.3 Hexagons</head>
<p n="p23.172">
<s n="s1.3;p23.172">The regular hexagon polygon is formed from the connection of six equal sides where each of the interior angles is 120○. </s>
<s n="s2.3;p23.172">The figure shows the relationship between the height and the width of a hexagon. </s>
<s n="s3.3;p23.172">The correct width for a regular hexagon can be obtained by simply multiplying the height by <formula notation="" id="BAWE_0228b-form.001"/>. </s>
</p>
<figure id="BAWE_0228b-fig.003">
<head rend="bold">Figure 4 - Hexagon shape dimension ratios</head>
</figure>
<p n="p24.172">
<s n="s1.3;p24.172">An image is formed from a two dimensional arrangement of pixels completely tiling a fixed area. </s>
<s n="s2.3;p24.172">It is therefore essential to ensure correct tessellation of hexagons to make sure there are no gaps in between the pixels. </s>
<s n="s3.3;p24.172">Due to the nature of the hexagon shape it would be necessary to offset the pixels by half a pixel on every other line for complete tiling. </s>
</p>
<figure id="BAWE_0228b-fig.004">
<head rend="bold">Figure 5 - Hexagonal sampling grid with pixels offset every other line</head>
</figure>
<p n="p25.172">
<s n="s1.1;p25.172">There are similarities and differences when subsampling an image on to square and hexagonal grids. </s>
</p>
<figure id="BAWE_0228b-fig.005">
<head rend="bold">Figure 6 - Hexagonal sampling grid aligning vertically with square sampling grid</head>
</figure>
<p n="p26.172">
<s n="s1.7;p26.172">When sampling in the vertical direction there is no difference between the hexagon and square sampling grids. </s>
<s n="s2.7;p26.172">Although the height of the hexagon and square are not the same, the interlocking action of the hexagonal sampling grid compensates for the extra height. </s>
<s n="s3.7;p26.172">As can be seen from figure 6 the hexagons will always appear slightly taller. </s>
<s n="s4.7;p26.172">However this height difference is constant no matter how many pixels are displayed; there will not be much difference over an image that may be hundreds of pixels high. </s>
<s n="s5.7;p26.172">The figure also shows that the square and hexagonal pixels line up in the vertical direction. </s>
<s n="s6.7;p26.172">The red lines are always the same distance apart. </s>
<s n="s7.7;p26.172">The origins of both the square and the hexagon are the same distance apart vertically; therefore the vertical subsampling will be identical for both squares on a square sampling grid and hexagons on a hexagonal sampling grid. </s>
</p>
<p n="p27.172">
<s n="s1.1;p27.172">However this is not the case for the horizontal subsampling. </s>
</p>
<figure id="BAWE_0228b-fig.006">
<head rend="bold">Figure 7 - Hexagonal sampling grid horizontal inconsistency with square sampling grid</head>
</figure>
<p n="p28.172">
<s n="s1.10;p28.172">The hexagon shape is wider than the equivalent square. </s>
<s n="s2.10;p28.172">However, unlike the vertical hexagonal sampling grid, there is no interlocking of pixels in the horizontal direction. </s>
<s n="s3.10;p28.172">Therefore the width of a group of hexagonal pixels will be greater than that of the square pixel. </s>
<s n="s4.10;p28.172">The figure shows that, even though the hexagonal pixel starts level with the square pixel, the result is that the difference between the boundaries keeps increasing. </s>
<s n="s5.10;p28.172">In a large image the hexagonal pixel image will result in an image that is much wider than the square pixel image. </s>
<s n="s6.10;p28.172">However it has already been shown that the vertical distance will be approximately the same. </s>
<s n="s7.10;p28.172">Therefore the hexagonal pixel image will appear distorted. </s>
<s n="s8.10;p28.172">For this reason the horizontal subsampling of an image must be different for square pixels on a square sampling grid and hexagons on a hexagonal sampling grid. </s>
<s n="s9.10;p28.172">A hexagonal sampling grid must take fewer samples in the horizontal direction to ensure that the image does not appear distorted. </s>
<s n="s10.10;p28.172">As mentioned earlier the correct pixels must be taken in order to ensure all the features of the original image are displayed in the reconstructed image. </s>
</p>
<p n="p29.172">
<s n="s1.6;p29.172">As mentioned earlier, research has already been carried out into the appropriate hexagonal sampling grid. </s>
<s n="s2.6;p29.172">It was found that every sample must be taken on a hexagonal sampling grid to match up with the square sampling grid <hi rend="sup">[7]</hi>. </s>
<s n="s3.6;p29.172">However this number is not an integer and samples can only be taken at integer values. </s>
<s n="s4.6;p29.172">Therefore the closest approximation to this value is to take every seventh pixel on a hexagonal sampling grid for every sixth pixel taken on a square sampling grid. </s>
<s n="s5.6;p29.172">This may be further examined: for every seven pixels displayed using square pixels on a square sampling grid only six pixels should be displayed using hexagonal pixels on a hexagonal grid. </s>
<s n="s6.6;p29.172">In this manner it is possible to display images using hexagonal pixels on hexagonal sampling grid that is not distorted. </s>
</p>
<figure id="BAWE_0228b-fig.007">
<head rend="bold">Figure 8 - Horizontal hexagonal sampling grid equivalent to square sampling grid</head>
</figure>
<p n="p30.172">
<s n="s1.2;p30.172">The same theory applies to hexagons rotated by 90 <hi rend="sup">o</hi>. </s>
<s n="s2.2;p30.172">During testing it would be important to test both types of hexagons. </s>
</p>
<figure id="BAWE_0228b-fig.008">
<head rend="bold">Figure 9 - Hexagons displayed with different orientations</head>
</figure>
</div2>
<div2>
<head rend="underlined bold">2.4 Image display with Circles</head>
<p n="p31.172">
<s n="s1.4;p31.172">When placing circles on a sampling grid some adjustments have to be made compared with placing squares or hexagons. </s>
<s n="s2.4;p31.172">Regular circles do not tessellate with each other - therefore they do not result in a complete tiling. </s>
<s n="s3.4;p31.172">This leaves gaps in between the circles - an image with black spaces all over it would be unsuitable for viewing. </s>
<s n="s4.4;p31.172">This would occur on either a square sampling grid or on a hexagonal sampling grid. </s>
</p>
<figure id="BAWE_0228b-fig.009">
<head rend="bold">Figure 10 - Circles on square sampling grids and hexagonal sampling grids</head>
</figure>
<p n="p32.172">
<s n="s1.1;p32.172">It was therefore necessary to overlap the circles to ensure a complete tiling. </s>
</p>
<figure id="BAWE_0228b-fig.010">
<head rend="bold">Figure 11 - Circles overlapping on square and hexagonal sampling grids</head>
</figure>
<p n="p33.172">
<s n="s1.4;p33.172">For complete tiling, through overlapping, it is necessary for the outer edge of one circle to pass through the origins of the four adjacent circles (horizontal and vertical). </s>
<s n="s2.4;p33.172">If there are circles overlapping each other, by half a circle in both the horizontal and vertical directions, the image dimensions would be halved. </s>
<s n="s3.4;p33.172">Hence circles may require a diameter that is twice the width of a hexagon or square. </s>
<s n="s4.4;p33.172">This method of overlapping allowed circles to be placed on either a square or hexagonal sampling grid. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">2.5 Ink</head>
<p n="p34.172">
<s n="s1.8;p34.172">Regardless of the method of printing the result is the same. </s>
<s n="s2.8;p34.172">Dots of ink are printed onto a page. </s>
<s n="s3.8;p34.172">The composition of inks are allows them to flow easily through even a ball point pen <hi rend="sup"> [8]</hi>. </s>
<s n="s4.8;p34.172">Hence, when ink is placed on paper it is in its nature to flow. </s>
<s n="s5.8;p34.172">Therefore even though the circular ink dot is a certain size when placed, it may flow and therefore grow in size. </s>
<s n="s6.8;p34.172">With the inks spreading over the page they may come in to contact with each other. </s>
<s n="s7.8;p34.172">Therefore it is possible that the inks mix with each other to form slightly different colours in the contact regions. </s>
<s n="s8.8;p34.172">It is therefore important to simulate this effect when changing pixel shape to circles. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">2.6 Colour model</head>
<p n="p35.172">
<s n="s1.4;p35.172">As mentioned before the human eye has yellowish-green, green and blue light sensitive cones. </s>
<s n="s2.4;p35.172">The colour green is detected by the green light sensitive cones and the colour blue is detected by the blue light sensitive cones. </s>
<s n="s3.4;p35.172">However the colour red is perceived when the yellowish-green light sensitive cone is stimulated more considerably than the green light sensitive cone. </s>
<s n="s4.4;p35.172">This reality has produced the RGB (Red, Green and Blue) colour model due to the fact that the three colours can separately stimulate the three different cones of the human eye. </s>
</p>
<p n="p36.172">
<s n="s1.5;p36.172">Digital displays, such as televisions and computer monitors, compliment this property of human vision by using an RGB system for displaying colour. </s>
<s n="s2.5;p36.172">Currently monitors can display colour using 24 bits - 8 bits for the red element, 8 bits for the green element and 8 bits for the blue element of a colour. </s>
<s n="s3.5;p36.172">These individual elements can be set at different intensities - a different mix of intensities produces a new colour. </s>
<s n="s4.5;p36.172">For example, setting red to full intensity, while keeping blue and green at zero, would produce red. </s>
<s n="s5.5;p36.172">However, setting red to half of maximum intensity, whilst setting green and blue at a quarter of maximum intensity, would produce pink. </s>
</p>
<p n="p37.172">
<s n="s1.1;p37.172">Each of the elements can be set between 0 and 255 to produce a different intensity - using this system up to 16.7 million discrete colours can be produced <hi rend="sup">[9]</hi>. </s>
</p>
<p n="p38.172">
<s n="s1.3;p38.172">The RGB model can also be described using a colour cube. </s>
<s n="s2.3;p38.172">The vertices of the cube represent a particular colour group. </s>
<s n="s3.3;p38.172">Any given point within the cube would result in colour that was a combination of the colour groups, represented by the relative distance from each of the colour groups <hi rend="sup">[10]</hi>. </s>
</p>
<figure id="BAWE_0228b-fig.011">
<head rend="bold">Figure 12 - RGB model colour cube</head>
</figure>
</div2>
<div2>
<head rend="underlined bold">2.7 Viewing distance</head>
<p n="p39.172">
<s n="s1.5;p39.172">The viewing distance may some effect on the resolution of an image. </s>
<s n="s2.5;p39.172">Less detail can be captured from an image that is far away from the eyes in comparison to an image that is nearby. </s>
<s n="s3.5;p39.172">Hence when viewing images from further away than normal boundaries of objects and pixels become less discernable. </s>
<s n="s4.5;p39.172">This can be considered equivalent to increasing the resolution of an image. </s>
<s n="s5.5;p39.172">However the image size would also be considered lowered. </s>
</p>
<p n="p40.172">
<s n="s1.3;p40.172">The recommended viewing distance between eyes and monitor is 25". </s>
<s n="s2.3;p40.172">The viewing angle should also be between 15 <hi rend="sup">o</hi> and 50 <hi rend="sup"> o [11]</hi>. </s>
<s n="s3.3;p40.172">To maintain a constant resolution when enlarging pixels then viewing distance must also be increased. </s>
</p>
<p n="p41.172">
<s n="s1.1;p41.172">With these concepts in mind it was decided to investigate hexagonal and circular pixels on various sampling grids. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">3. Design</head>
<p n="p42.172">
<s n="s1.1;p42.172">The design section discussed the equipment chosen for investigating pixel shape followed by some of the design ideas for the software and experiments. </s>
</p>
<div2>
<head rend="underlined bold">3.1 Equipment</head>
<div3>
<head rend="underlined bold">3.1.1 Graphics software</head>
<p n="p43.172">
<s n="s1.4;p43.172">Currently there is no readily available hardware for displaying hexagonal or circular pixels. </s>
<s n="s2.4;p43.172">Therefore the best method to study pixel shapes is to simulate using computer graphics software. </s>
<s n="s3.4;p43.172">The pixels on a monitor are square therefore the simulation will not provide a completely accurate representation of a hexagon or circular shape. </s>
<s n="s4.4;p43.172">However the definition of the shapes increases with the number of pixels used. </s>
</p>
<figure id="BAWE_0228b-fig.012">
<head rend="bold">Figure 13 - Hexagon simulation using square screen pixels from a monitor</head>
</figure>
<p n="p44.172">
<s n="s1.1;p44.172">By drawing the hexagons large in comparison to the square screen pixels a more accurate shape can be displayed. </s>
</p>
<p n="p45.172">
<s n="s1.1;p45.172">Many software packages are available - some are easy to use, others provide the ability to control every aspect of an image or animation. </s>
</p>
<p n="p46.172">
<s n="s1.5;p46.172">A graphics package will fall into one of two broad categories. </s>
<s n="s2.5;p46.172">The first type is the graphics software which is easy to use, provides one-click feature changes and does most of the work for the user. </s>
<s n="s3.5;p46.172">However there is no high level control of what is being displayed. </s>
<s n="s4.5;p46.172">The second type of graphics package is fully customisable and allows full control of the screen display. </s>
<s n="s5.5;p46.172">However this type of package involves high level coding and takes a lot of effort to produce simple graphics in comparison to the first type of package <hi rend="sup">[12]</hi>. </s>
</p>
<p n="p47.172">
<s n="s1.3;p47.172">The main aim of the project is to control pixel shape. </s>
<s n="s2.3;p47.172">It is unlikely that an easy-to-use graphics package would provide such a high level of control. </s>
<s n="s3.3;p47.172">For this reason it has been decided to investigate pixel shape using a graphics programming language. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">3.1.2 Graphics Programming Language</head>
<p n="p48.172">
<s n="s1.3;p48.172">Two very powerful graphics languages are DirectX and OpenGL. Both are industry standards for developing games and animations and are also frequently used by amateur programmers <hi rend="sup">[13] [14]</hi>. </s>
<s n="s2.3;p48.172">DirectX has the limitation that it has been designed for use with Windows platform PC's, whereas OpenGL can run on any platform. </s>
<s n="s3.3;p48.172">The limitation of OpenGL is that it needs to be used in conjunction with another language. </s>
</p>
<p n="p49.172">
<s n="s1.1;p49.172">It was decided that the project will be carried forward using OpenGL. This is for the two following reasons: </s>
</p>
<p rend="bulleted" n="p50.172">
<s n="s1.1;p50.172">The need to work in different labs, some running Windows PC's, some running Linux machines, will require a language which is operating system independent. </s>
</p>
<p rend="bulleted" n="p51.172">
<s n="s1.2;p51.172">DirectX has a reputation of being quite difficult to learn. </s>
<s n="s2.2;p51.172">In the interests of project investigation and management it will be better to spend more time experimenting with ideas than coding software unnecessarily. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">3.1.3 Host Language</head>
<p n="p52.172">
<s n="s1.4;p52.172">OpenGL is a set of graphics libraries, which can be used in conjunction with programming languages. </s>
<s n="s2.4;p52.172">OpenGL is an industry standard when dealing with 2D and 3D graphics. </s>
<s n="s3.4;p52.172">It has been available for twelve years making it reliable, stable and well documented. </s>
<s n="s4.4;p52.172">Using OpenGL it is possible to draw shapes with a specified location and colour. </s>
</p>
<p n="p53.172">
<s n="s1.9;p53.172">However OpenGL needs to be used in conjunction with another high level programming language. </s>
<s n="s2.9;p53.172">OpenGL has been designed to be used with the C programming language and is used this way by both industry and amateur programmers. </s>
<s n="s3.9;p53.172">In spite of this the popularity of the Java programming language has caused the development of some Java specific OpenGL libraries. </s>
<s n="s4.9;p53.172">However these libraries have not been present for as long as the OpenGL language itself. </s>
<s n="s5.9;p53.172">This may make them less reliable and less well documented. </s>
<s n="s6.9;p53.172">But the advantage of using Java over C is that Java is a very powerful language and there are readily available libraries for image processing. </s>
<s n="s7.9;p53.172">C does not have these features so easily accessible. </s>
<s n="s8.9;p53.172">However this does not mean the project cannot continue when using C. Images can also be processed in packages like MATLAB. The data from the image processing can be saved in a file and then passed to the C language when appropriate. </s>
<s n="s9.9;p53.172">The decision to be made is whether to use Java and possibly encounter coding errors further on in the project or to use C in conjunction with MATLAB which will mean a less efficient process due to different programs. </s>
</p>
<p n="p54.172">
<s n="s1.1;p54.172">It was decided to use OpenGL in with Java as the overall process will be more efficient and easier to control if all processes are kept with in the same program. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">3.1.4 OpenGL Library</head>
<p n="p55.172">
<s n="s1.7;p55.172">The next decision to be made was which OpenGL library to use. </s>
<s n="s2.7;p55.172">To discover the best library to use it was decided to explore the official OpenGL website. </s>
<s n="s3.7;p55.172">The website yielded two libraries. </s>
<s n="s4.7;p55.172">One was JOGL (Java OpenGL) and the other was GL4Java. </s>
<s n="s5.7;p55.172">JOGL had the advantage that it was more widely used amongst amateur programmers and therefore more help could be found if needed. </s>
<s n="s6.7;p55.172">But GL4Java claimed that it had successfully converted all the features of OpenGL <hi rend="sup">[17]</hi>. </s>
<s n="s7.7;p55.172">For this reason it was decided to use the GL4Java library because it was unknown which features of OpenGL would be required to further the project. </s>
</p>
</div3>
</div2>
<div2>
<head rend="underlined bold">3.2 Design of experiments</head>
<p n="p56.172">
<s n="s1.1;p56.172">Before designing the software it was better to design the experiment - thus a more suitable design for the software could be generated. </s>
</p>
<p n="p57.172">
<s n="s1.1;p57.172">One of the aims of the project was to determine whether more information could be obtained from an image, at a fixed resolution, if the pixel shape was changed. </s>
</p>
<p n="p58.172">
<s n="s1.3;p58.172">Therefore to determine whether an image had more information than another would require a direct comparison of images - however the quality of an image is subjective to the individual viewing the image. </s>
<s n="s2.3;p58.172">What may be high quality to one person may be less quality to another. </s>
<s n="s3.3;p58.172">As a result it would be important to ensure that there is less chance of bias towards one shape due to a reason other than image quality. </s>
</p>
<p n="p59.172">
<s n="s1.3;p59.172">As a result the experiment took on a psychological aspect. </s>
<s n="s2.3;p59.172">The images must be displayed using the same techniques where possible and the change between the different types of image must be quick. </s>
<s n="s3.3;p59.172">It would be unreasonable for experiment participants to continually wait for new images to load. </s>
</p>
<p n="p60.172">
<s n="s1.2;p60.172">Participants could view the images and decide whether they prefer square pixel images or hexagonal pixel images. </s>
<s n="s2.2;p60.172">They should also have the option of choosing no preference if they felt that there were no worthy differences between images. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">3.3 Design of software</head>
<figure id="BAWE_0228b-fig.013">
<head rend="bold">Figure 14 - Software Design</head>
</figure>
<p n="p61.172">
<s n="s1.4;p61.172">The image would first be loaded into the program, where it would be processed, sampled and temporarily saved. </s>
<s n="s2.4;p61.172">The shape desired for image display would then be chosen by the user while the corresponding sampling grid for the shape would then be determined by the program. </s>
<s n="s3.4;p61.172">The correct subsampling technique could then be applied to the sample set and the subsampled image data can be sent to the framebuffer. </s>
<s n="s4.4;p61.172">The graphics card would then display the image on the monitor. </s>
</p>
<p n="p62.172">
<s n="s1.5;p62.172">The software had been designed to ease the experiment procedure. </s>
<s n="s2.5;p62.172">The image shape was determined while the program is running; therefore it would be possible to alter pixel shape without calling up another instance of the program. </s>
<s n="s3.5;p62.172">The process was also fairly automatic. </s>
<s n="s4.5;p62.172">The user only needed to choose the picture and the sample shape - the program could take care of the rest. </s>
<s n="s5.5;p62.172">This could speed up the experiment greatly because the program did not need to wait constantly for user input. </s>
</p>
<p n="p63.172">
<s n="s1.5;p63.172">This design included the basic processes of the program and the interaction between them - however it was only a design. </s>
<s n="s2.5;p63.172">There may be many problems when using OpenGL and the software may need to be redesigned to overcome these problems. </s>
<s n="s3.5;p63.172">Also the user could only alter two inputs, pixel shape and test image. </s>
<s n="s4.5;p63.172">However, at a later point it may be desired to have a higher level of control while the program was running, for example the ability to zoom in to certain parts of the image for closer inspection. </s>
<s n="s5.5;p63.172">Hence while the design displayed was the desirable method for displaying images it may have needed to be changed once implementation begun. </s>
</p>
<p n="p64.172">
<s n="s1.2;p64.172">Pixel shape was to be investigated using the graphics programming language OpenGL in conjunction with the language Java. </s>
<s n="s2.2;p64.172">The experiment would involve direct image comparison from participants. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">4. Implementation</head>
<p n="p65.172">
<s n="s1.3;p65.172">The implementation of the design formed a major part of the project. </s>
<s n="s2.3;p65.172">Techniques for displaying images were tested and integrated into the main code. </s>
<s n="s3.3;p65.172">The methods used for forming and displaying the polygons are discussed. </s>
</p>
<div2>
<head rend="underlined bold">4.1 OpenGL Window</head>
<p n="p66.172">
<s n="s1.4;p66.172">After successfully installing the OpenGL library the language itself was further investigated. </s>
<s n="s2.4;p66.172">After reading several websites it was noted that a lot of effort would be required to simply generate an empty window. </s>
<s n="s3.4;p66.172">Due to this problem, ready written code of an empty window was taken to move forward into the pixel manipulation rather than linger in the coding problems. </s>
<s n="s4.4;p66.172">The code used was a GL4Java port of an OpenGL window written for C. After further investigation it was noted that this same code had been used in many amateur websites and many people had used it as a base to further their own projects. </s>
</p>
<p n="p67.172">
<s n="s1.3;p67.172">OpenGL used a double buffering system. </s>
<s n="s2.3;p67.172">One buffer was used for drawing graphics on to the screen while the other buffer stored the following frame for displaying. </s>
<s n="s3.3;p67.172">This was useful because the next frame would be instantly displayed instead of slowly wiping over the previous frame, allowing faster comparison of images whilst the program was running. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">4.2 Polygon Formation</head>
<div3>
<head rend="underlined bold">4.2.1 Hexagon</head>
<p n="p68.172">
<s n="s1.3;p68.172">In OpenGL polygons were drawn using the 3D Cartesian coordinate system. </s>
<s n="s2.3;p68.172">The vertices of a polygon could be addressed as a set of coordinates and OpenGL would fill in the space in between the points. </s>
<s n="s3.3;p68.172">Hence the code for the hexagon polygon was written as: </s>
</p>
<quote lang="English">gl.glBegin(GL_POLYGON); gl.glVertex3d(1.732, -1.0, 0.0); gl.glVertex3d(1.732, 1.0, 0.0); gl.glVertex3d(0.0, 2.0, 0.0); gl.glVertex3d(-1.732, 1.0, 0.0); gl.glVertex3d(-1.732, -1.0, 0.0); gl.glVertex3d(0.0, -2.0, 0.0); gl.glEnd();</quote>
<figure id="BAWE_0228b-pic.002">
<head rend="bold">Figure 15 - Hexagon Formation</head>
</figure>
<p n="p69.172">
<s n="s1.3;p69.172">The Z element controlled the location of the points in the Z plane. </s>
<s n="s2.3;p69.172">By keeping the Z element the same for each vertex would mean the shape would be kept parallel to the plane of the screen. </s>
<s n="s3.3;p69.172">The benefit of this was that it would be easy to simulate zooming in and out of an image by simply adjusting the z value. </s>
</p>
<figure id="BAWE_0228b-pic.003">
<head rend="bold">Figure 16 - Hexagons with decreased Z elements</head>
</figure>
<quote lang="English">gl.glBegin(GL_POLYGON); gl.glVertex3d(1.732, -1.0, -10.0); gl.glVertex3d(1.732, 1.0, -10.0); gl.glVertex3d(0.0, 2.0, -10.0); gl.glVertex3d(-1.732, 1.0, -10.0); gl.glVertex3d(-1.732, -1.0, -10.0); gl.glVertex3d(0.0, -2.0, -10.0); gl.glEnd();</quote>
<quote lang="English">gl.glBegin(GL_POLYGON); gl.glVertex3d(1.732, -1.0, -100.0); gl.glVertex3d(1.732, 1.0, -100.0); gl.glVertex3d(0.0, 2.0, -100.0); gl.glVertex3d(-1.732, 1.0, -100.0); gl.glVertex3d(-1.732, -1.0, -100.0); gl.glVertex3d(0.0, -2.0, -100.0); gl.glEnd()</quote>
<p n="p70.172">
<s n="s1.3;p70.172">The same OpenGL call, GL_POLYGON, could be used to produce other shapes but there were some specific calls for frequent shapes. </s>
<s n="s2.3;p70.172">The call GL_QUADS could be used to produce any four sided shape including squares and rectangles. </s>
<s n="s3.3;p70.172">The process for the displaying shape was the same; however, it ensured that only 4 sided shapes are produced. </s>
</p>
<p n="p71.172">
<s n="s1.2;p71.172">For the final experiment it was important for square pixel images to be displayed in the same manner as hexagon pixel images. </s>
<s n="s2.2;p71.172">Therefore the square was also drawn in OpenGL however swapping the command GL_POLYGON with the command GL_QUADS. </s>
</p>
<figure id="BAWE_0228b-fig.014">
<head rend="bold">Figure 17 - GL_QUADS - ensures quadrilaterals only</head>
</figure>
<quote lang="English">gl.glBegin(GL_QUADS); gl.glVertex3d(-1.5, -1.5, -10.0); gl.glVertex3d(1.5, -1.5, -10.0); gl.glVertex3d(1.5, 1.5, -10.0); gl.glVertex3d(-1.5, 1.5, -10.0); gl.glEnd();</quote>
<figure id="BAWE_0228b-pic.004">
<head rend="bold">Figure 18 - Square formation</head>
</figure>
</div3>
<div3>
<head rend="underlined bold">4.2.2 Circle</head>
<p n="p72.172">
<s n="s1.4;p72.172">In OpenGL there was no preset command for drawing circles. </s>
<s n="s2.4;p72.172">Hence, it was necessary to create circles from other shapes. </s>
<s n="s3.4;p72.172">After searching the World Wide Web some code was found that allowed empty circles to be drawn <hi rend="sup">[16]</hi>. </s>
<s n="s4.4;p72.172">However the code found was written for C and had to be converted to Java first. </s>
</p>
<quote lang="English">void disp(void) { int num_lines = 5; double angle; glBegin(GL_LINE_LOOP); for(int i =0;i&lt;num_lines;i++){ angle = i*2*M_PI/num_lines; glVertex2f(cos(angle),sin(angle)); } glEnd(); } C</quote>
<quote lang="English"> double PI = Math.PI; double angle = 0.0; gl.glBegin(GL_LINE_LOOP); for (int i = 0; i &lt; circle_points; i++) { angle = 2*PI*i/circle_points; } gl.glVertex3d(1.732*Math.cos(angle),1.732*Math.sin(angle), size); gl.glEnd(); Java</quote>
<figure id="BAWE_0228b-fig.015">
<head rend="bold">Figure 19 - Geometry of circles</head>
</figure>
<p n="p73.172">
<s n="s1.2;p73.172">The points on the edge of the circle were defined using the mathematic sine and cosine functions. </s>
<s n="s2.2;p73.172">OpenGL then joined the points together with the line due to the command GL_LINE_LOOP. </s>
</p>
<p n="p74.172">
<s n="s1.10;p74.172">The circle produced was an empty circle - only the boundary was defined. </s>
<s n="s2.10;p74.172">However pixels in images are coloured and hence filled circles would be required. </s>
<s n="s3.10;p74.172">The circle found was just a single line. </s>
<s n="s4.10;p74.172">However it provided some useful techniques for producing a circle. </s>
<s n="s5.10;p74.172">The circle was formed by defining points around the circle. </s>
<s n="s6.10;p74.172">OpenGL would do the rest and join the line between the points. </s>
<s n="s7.10;p74.172">If there were only a few points set then a less defined shape was formed. </s>
<s n="s8.10;p74.172">With only four points a diamond was formed. </s>
<s n="s9.10;p74.172">However as the number of points increased the definition of the circle improved. </s>
<s n="s10.10;p74.172">At 100 points the circle was well defined and had good shape. </s>
</p>
<figure id="BAWE_0228b-pic.005">
<head rend="bold">Figure 20 - Increased definition of circle due to increase in number of defining points</head>
</figure>
<p n="p75.172">
<s n="s1.1;p75.172">The command GL_LINE_LOOP was swapped for the command GL_TRIANGLE_FAN. This allowed the circles to be formed from many, very thin, triangles. </s>
</p>
<figure id="BAWE_0228b-fig.016">
<head rend="bold">Figure 21 - GL_TRIANGLE_FAN - triangles are drawn in a fan-like fashion around an origin</head>
</figure>
<p n="p76.172">
<s n="s1.2;p76.172">The origin of the circle was set and the triangles were formed around this point in a fan-like fashion. </s>
<s n="s2.2;p76.172">These triangles could be filled and hence colour could be applied to the circle. </s>
</p>
<figure id="BAWE_0228b-pic.006">
<head rend="bold">Figure 22 - Circle formation</head>
</figure>
</div3>
</div2>
<div2>
<head rend="underlined bold">4.3 Multiple Polygon Formation</head>
<div3>
<head rend="underlined bold">4.3.1 Axis Translation</head>
<p n="p77.172">
<s n="s1.6;p77.172">The code to produce one hexagon was inserted into a method, which allowed the code for the hexagon to be called upon at any time. </s>
<s n="s2.6;p77.172">However if the method was called twice one hexagon would be drawn over by another, due to the fact that the method uses the same coordinates for the hexagons. </s>
<s n="s3.6;p77.172">It is possible to send in different coordinates for the hexagon to stop overlapping; however when dealing with hundreds of hexagons it would become a slow and tedious process to continually calculate new values for the hexagons. </s>
<s n="s4.6;p77.172">The OpenGL language can overcome this problem by using translations. </s>
<s n="s5.6;p77.172">By translating the origin of the axis, new hexagons can be drawn using the same values. </s>
<s n="s6.6;p77.172">The new hexagon would be drawn relative to the new positioning of the axis and so would not draw over the previous hexagon. </s>
</p>
<figure id="BAWE_0228b-pic.007">
<head rend="bold">Figure 23 - Translation of drawing axis</head>
</figure>
<quote lang="English">hexagon; hexagon; hexagon { gl.glBegin(GL_POLYGON); gl.glVertex3d(1.732, -1.0, -15.0); gl.glVertex3d(1.732, 1.0, -15.0); gl.glVertex3d(0.0, 2.0, -15.0); gl.glVertex3d(-1.732, 1.0, -15.0); gl.glVertex3d(-1.732, -1.0, -15.0); gl.glVertex3d(0.0, -2.0, -15.0); gl.glEnd(); gl.glTranslated(3.464, 0.0, 0.0); }</quote>
<p n="p78.172">
<s n="s1.3;p78.172">The translation call was inserted into the hexagon method because in most situations another hexagon would be drawn adjacent to the previous one. </s>
<s n="s2.3;p78.172">It would be more efficient to perform the translation and then remove it if not necessary than to check whether a translation is necessary every time. </s>
<s n="s3.3;p78.172">The new method made it possible to continually call the hexagon method to display hexagons in a straight line one after the other. </s>
</p>
<quote lang="English">for (i =0, i &lt; 10, i++) { hexagon; }</quote>
<figure id="BAWE_0228b-pic.008">
<head rend="bold">Figure 24 - Multiple hexagon display</head>
</figure>
</div3>
</div2>
<div2>
<head rend="underlined bold">4.3.2 Multiple Line Polygon Display</head>
<p n="p79.172">
<s n="s1.4;p79.172">The first problem related to the initial positioning of the drawing axis. </s>
<s n="s2.4;p79.172">It was simple enough to move it down to the next line using a simple translation of position in the Y direction. </s>
<s n="s3.4;p79.172">However to the move the drawing axis back to the start of the line was a bit more difficult because the program had to know how far the axis had moved in the first place. </s>
<s n="s4.4;p79.172">Also the program needed to know which lines had to be offset by a half a pixel. </s>
</p>
<p n="p80.172">
<s n="s1.4;p80.172">To deal with translation in the X direction the program would need to know how many hexagons had been drawn on a line to make sure it moved back the right amount. </s>
<s n="s2.4;p80.172">This could be achieved by recording the number of hexagons drawn. </s>
<s n="s3.4;p80.172">However the number of hexagons to be drawn will be fixed before any hexagons are drawn - either a number entered by a user or the pixel width of an image. </s>
<s n="s4.4;p80.172">Therefore this part of the problem is easily solvable. </s>
</p>
<figure id="BAWE_0228b-pic.009">
<head rend="bold">Figure 25 - Translation in Y direction</head>
</figure>
<p n="p81.172">
<s n="s1.6;p81.172">However when dealing with the half pixel offset there were a couple of methods that could have been used. </s>
<s n="s2.6;p81.172">The first method would have been to draw every other line. </s>
<s n="s3.6;p81.172">Then the program would translate the drawing axis back to the top and draw the lines in between but offset by half a pixel. </s>
<s n="s4.6;p81.172">The simple Y translation could then be employed to draw in the remaining lines. </s>
<s n="s5.6;p81.172">The benefit of this method is that the offset only needs to be calculated once. </s>
<s n="s6.6;p81.172">The difficulty is that more complicated calculations are required to make sure complete tiling is obtained. </s>
</p>
<figure id="BAWE_0228b-pic.010">
<head rend="bold">Figure 26 - Every other line drawn before filling missing lines</head>
</figure>
<p n="p82.172">
<s n="s1.3;p82.172">The other option was to draw every line sequentially and continually offset every other line. </s>
<s n="s2.3;p82.172">The benefit of using this method is that it follows a more sequential pattern making it easier to follow the code later when more difficult problems emerged. </s>
<s n="s3.3;p82.172">The disadvantage with using this method is that it could be deemed inefficient to continually check whether the offset was needed. </s>
</p>
<figure id="BAWE_0228b-pic.011">
<head rend="bold">Figure 27 - Every line drawn sequentially by continually shifting drawing </head>
</figure>
<p n="p83.172">
<s n="s1.2;p83.172">It was decided to use the method to draw every line sequentially. </s>
<s n="s2.2;p83.172">This was because it would be easier to link this method with the image processing later on in the project. </s>
</p>
<p n="p84.172">
<s n="s1.4;p84.172">An algorithm was developed which ensured a correct hexagonal tiling. </s>
<s n="s2.4;p84.172">A check was made to detect whether the line had been offset - a return of 1 would mean the line had been offset, 0 would mean it had not been offset. </s>
<s n="s3.4;p84.172">If a line needed to be offset, the program would detect that the offset check was 0; the line would then be offset and the offset check set to 1. </s>
<s n="s4.4;p84.172">If the line was already offset then the program would return the line to the original position and then reset the offset check. </s>
</p>
<p n="p85.172">
<s n="s1.1;p85.172">This algorithm made sure that the pixels were offset by half a pixel for every other line. </s>
</p>
<quote lang="English">double nextLine = hexDrawn * 3.464 + 1.732; double secondline = nextLine; if (offset == 1) { secondline = secondline - 3.464; offset = 0; } else { secondline = nextLine; offset = 1; }</quote>
</div2>
<div2>
<head rend="underlined bold">4.4 Image display</head>
<div3>
<head rend="underlined bold">4.4.1 Colour Model</head>
<p n="p86.172">
<s n="s1.2;p86.172">The subsequent section was the control of colour. </s>
<s n="s2.2;p86.172">There are a variety of colour models used in computer image applications. </s>
</p>
<p n="p87.172">
<s n="s1.4;p87.172">The difference between colour models is the method in which the RGB system is manipulated. </s>
<s n="s2.4;p87.172">OpenGL provided two different models for colour manipulation - the simple RGB model and the Colour-Index model. </s>
<s n="s3.4;p87.172">The RGB model relied on the user inputting the specific values for each of the red, green and blue elements to produce a desired colour. </s>
<s n="s4.4;p87.172">The Colour-Index mode used an index value matched against preset colours in a lookup table. </s>
</p>
<figure id="BAWE_0228b-fig.017">
<head rend="bold">Figure 28 - Color-Index mode</head>
</figure>
<p n="p88.172">
<s n="s1.3;p88.172">It was decided that the RGB model would be more suitable for the project. </s>
<s n="s2.3;p88.172">The RGB model provided a more direct manipulation and control of colour. </s>
<s n="s3.3;p88.172">Although it was possible to obtain a vast number of colours using the Colour-Index model, its inflexibility made it unsuitable for the image processing later on in the project. </s>
</p>
<p n="p89.172">
<s n="s1.4;p89.172">The OpenGL RGB model used 1.0 as the maximum value for an individual RGB element and 0.0 for the minimum. </s>
<s n="s2.4;p89.172">For example, setting each of the RGB values to 0.0 would result in the colour black. </s>
<s n="s3.4;p89.172">Setting all the values to 1.0 would change the colour to white. </s>
<s n="s4.4;p89.172">The table below gives a few examples demonstrating the colour flexibility. </s>
</p>
<table id="BAWE_0228b-tab.001">
<head rend="bold">Table 1 - Examples of colour</head>
<row>
<cell/>
</row>
</table>
<p n="p90.172">
<s n="s1.5;p90.172">It was now possible to apply colour to the hexagons by using the OpenGL call, gl.Color. </s>
<s n="s2.5;p90.172">The call took three inputs, namely the values of the individual red, green and blue components. </s>
<s n="s3.5;p90.172">To colour a polygon in OpenGL the colour was set first by using the glColor call. </s>
<s n="s4.5;p90.172">All polygons would then be drawn with that same colour until a new colour was set. </s>
<s n="s5.5;p90.172">Therefore the colour for a particular hexagon had to be set before the hexagon was drawn. </s>
</p>
<quote lang="English">gl.glColor3d(0.3, 0.7, 0.5) hexagon; hexagon gl.glColor3d(0.7, 0.9, 0.4) hexagon; gl.glColor3d(0.1, 0.3, 0.4) hexagon; gl.glColor3d(0.9, 0.4, 0.1) hexagon; hexagon</quote>
<figure id="BAWE_0228b-pic.012">
<head rend="bold">Figure 29 - Hexagons with colour</head>
</figure>
<p n="p91.172">
<s n="s1.2;p91.172">A test program was written which, by using hexagons, gradually went through the colour range for a few colours. </s>
<s n="s2.2;p91.172">This gave great promise for the future development of the project. </s>
</p>
<figure id="BAWE_0228b-pic.013">
<head rend="bold">Figure 30 - Range of colours displayed using hexagons</head>
</figure>
</div3>
<div3>
<head rend="underlined bold">4.4.2 Image Processing</head>
<p n="p92.172">
<s n="s1.3;p92.172">The next section of the project involved processing the images within the program. </s>
<s n="s2.3;p92.172">Since this would involve a lot of work developing, integrating and testing it was decided that it would be best to research ready written code on the web. </s>
<s n="s3.3;p92.172">As previously mentioned Java is a popular language and there is much ready written code on the web. </s>
</p>
<p n="p93.172">
<s n="s1.6;p93.172">One source provided code that would load images with JPEG, GIF and BMP codings into the Java program. </s>
<s n="s2.6;p93.172">Another source provided code that stored images in a method desirable for the project. </s>
<s n="s3.6;p93.172">The images were processed and separated into the individual pixel elements. </s>
<s n="s4.6;p93.172">The location and colour value of this pixel was then stored in a zero based 3D array. </s>
<s n="s5.6;p93.172">The first two elements of the 3D array represented the (i,j) position of the pixel whilst the third element identified the colour of the pixel. </s>
<s n="s6.6;p93.172">This colour value could be further processed to extract the individual red, green and blue elements of a pixel - the elements used in the RGB model. </s>
</p>
<quote lang="English">int[][][] sampledImage = imageIO.getImagePixels(img);</quote>
<p n="p94.172">
<s n="s1.1;p94.172">For example, below we have a 13 x 10 pixel image of an envelope. </s>
</p>
<figure id="BAWE_0228b-pic.014">
<head rend="bold">Figure 31 - Envelope</head>
</figure>
<p n="p95.172">
<s n="s1.1;p95.172">By enlarging the image we can see the pixel boundaries. </s>
</p>
<figure id="BAWE_0228b-pic.015">
<head rend="bold">Figure 32 - Enlarged envelope</head>
</figure>
<p n="p96.172">
<s n="s1.1;p96.172">The program began by identifying the pixel located in position (0,0). </s>
</p>
<figure id="BAWE_0228b-pic.016">
<head rend="bold">Figure 33 - Pixel element in location (0,0)</head>
</figure>
<p n="p97.172">
<s n="s1.6;p97.172">The program then identified the colour value of the pixel which was then stored in the 3D array. </s>
<s n="s2.6;p97.172">This value could be manipulated to provide the individual RGB components of the colour value. </s>
<s n="s3.6;p97.172">The colour values obtained were on a zero based index 256-level scale. </s>
<s n="s4.6;p97.172">For the pixel located at (0,0) the RGB components were 148 for red, 143 for green and 123 for blue. </s>
<s n="s5.6;p97.172">These values had to be divided by 255 to obtain a value between 0.0 and 1.0, the colour range of the OpenGL RGB colour model. </s>
<s n="s6.6;p97.172">Therefore using the OpenGL colour range the components were 0.580 for red, 0.561 for green and 0.482 for blue. </s>
</p>
<p n="p98.172">
<s n="s1.1;p98.172">For further explanation it is suitable to concentrate on a smaller number of pixels, for example, the 3x3 block of pixels formed from the top left of the envelope. </s>
</p>
<figure id="BAWE_0228b-pic.017">
<head rend="bold">Figure 34 - Block of 3x3 pixels from top left of envelope</head>
</figure>
<p n="p99.172">
<s n="s1.1;p99.172">By processing this block of pixels the image is stored in memory as: </s>
</p>
<table id="BAWE_0228b-tab.002">
<head rend="bold">Table 2 - Storage data for 3x3 block of pixels</head>
<row>
<cell/>
</row>
</table>
<p n="p100.172">
<s n="s1.2;p100.172">These colour values can be extracted with simple array calls. </s>
<s n="s2.2;p100.172">For example, [0][2][RED] would return the red component of the pixel in location (0,2), which in this case is 136. </s>
</p>
<p n="p101.172">
<s n="s1.2;p101.172">These red, green and blue elements could be mapped onto a hexagonal polygon. </s>
<s n="s2.2;p101.172">By obtaining the colour of each individual pixel element in an image, it would be possible to convert square based images to hexagon based images. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">4.4.3 Image Mapping</head>
<p n="p102.172">
<s n="s1.2;p102.172">The conversion process had a specific mapping procedure. </s>
<s n="s2.2;p102.172">The program would begin by identifying the first pixel of the loaded image. </s>
</p>
<quote lang="English">for (int i = 0; i &lt; (img.getHeight(this)); i++) { for (int j = 0; j &lt; (img.getWidth(this)); j++ ) {</quote>
<p n="p103.172">
<s n="s1.1;p103.172">The colour of that pixel would then be obtained. </s>
</p>
<quote lang="English">r = sampledImage[i][j][RED]; g = sampledImage[i][j][GREEN]; b = sampledImage[i][j][BLUE]; r = r / 255; g = g / 255; b = b / 255;</quote>
<p n="p104.172">
<s n="s1.1;p104.172">The colour would then be sent to the hexagon call method which was modified to set OpenGL to that colour. </s>
</p>
<quote lang="English">hexagons(r, g, b);</quote>
<p n="p105.172">
<s n="s1.1;p105.172">A hexagonal pixel would be drawn which would result in a hexagon with the same colour as the first square pixel. </s>
</p>
<quote lang="English">public void hexagons(double red, double green, double blue) { gl.glColor3d (red, green, blue); gl.glBegin(GL_POLYGON); gl.glVertex3d(1.732, -1.0, size); gl.glVertex3d(1.732, 1.0, size); gl.glVertex3d(0.0, 2.0, size); gl.glVertex3d(-1.732, 1.0, size); gl.glVertex3d(-1.732, -1.0, size); gl.glVertex3d(0.0, -2.0, size); gl.glEnd(); gl.glTranslated(3.464, 0.0, 0.0);</quote>
<figure id="BAWE_0228b-pic.018">
<head rend="bold">Figure 35 - Mapping of first pixel</head>
</figure>
<p n="p106.172">
<s n="s1.2;p106.172">The program would then identify the next pixel of the image and determine its colour. </s>
<s n="s2.2;p106.172">Again this colour would be set and another hexagonal pixel would be drawn. </s>
</p>
<figure id="BAWE_0228b-pic.019">
<head rend="bold">Figure 36 - Mapping of second pixel</head>
</figure>
<p n="p107.172">
<s n="s1.1;p107.172">The algorithms developed earlier ensured the hexagons were being drawn in the correct places. </s>
</p>
<figure id="BAWE_0228b-pic.020">
<head rend="bold">Figure 37 - Correct sampling grids for different pixel shape</head>
</figure>
<figure id="BAWE_0228b-pic.021">
<head rend="bold">Figure 38 - Image mapping from square pixels to hexagonal pixels</head>
</figure>
<p n="p108.172">
<s n="s1.2;p108.172">The same method could be used for producing OpenGL images with square based pixels, as well rectangles or circles. </s>
<s n="s2.2;p108.172">In the interest of fairness it was important to ensure that square based images were displayed using the same mapping procedure as the hexagonal pixel based images. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">4.4.4 Clipping</head>
<p n="p109.172">
<s n="s1.3;p109.172">When creating images with pixels on a hexagonal sampling grid it was possible to see an uneven edge. </s>
<s n="s2.3;p109.172">This was due to the nature of the sampling grid in that every other line had to be offset by half a pixel. </s>
<s n="s3.3;p109.172">This uneven edge could bias judgements during the experiment phase. </s>
</p>
<figure id="BAWE_0228b-pic.022">
<head rend="bold">Figure 39 - Uneven edge</head>
</figure>
<p n="p110.172">
<s n="s1.4;p110.172">It was therefore necessary to ensure that the window edge would clip off the uneven edges of the image. </s>
<s n="s2.4;p110.172">This could be achieved by enlarging the image until its edges were just cut off by the edges of the window. </s>
<s n="s3.4;p110.172">The window had been kept a constant size at 446 x 446 pixels. </s>
<s n="s4.4;p110.172">This produced a square window; most images are not square and are of rectangles with varying ratios between width and height. </s>
</p>
<figure id="BAWE_0228b-pic.023">
<head rend="bold">Figure 40 - OpenGL window unsuitable for dimensions of image</head>
</figure>
<p n="p111.172">
<s n="s1.7;p111.172">The window therefore had to have the same dimensions as the image that was required for viewing. </s>
<s n="s2.7;p111.172">The size of the window had to be set before the window was created. </s>
<s n="s3.7;p111.172">It was also not possible to draw any graphics until the window had been created. </s>
<s n="s4.7;p111.172">Hence it was necessary to alter the order in which certain processes were carried out. </s>
<s n="s5.7;p111.172">The image had to be loaded into the program first so that the size of the window to be drawn could be determined. </s>
<s n="s6.7;p111.172">The window was then drawn followed by all other necessary processes. </s>
<s n="s7.7;p111.172">This change of processes produced a window that had the correct dimensions for an image that was to be displayed. </s>
</p>
<figure id="BAWE_0228b-pic.024">
<head rend="bold">Figure 41 - OpenGL window matching dimension of image</head>
</figure>
<p n="p112.172">
<s n="s1.6;p112.172">However the window still did not clip off the window edges. </s>
<s n="s2.6;p112.172">The origin of the drawing axis was in the centre of the window. </s>
<s n="s3.6;p112.172">For the image to fit in the window the program had to move the drawing axis to the top left corner, before displaying the image, to ensure that the image fit in the window. </s>
<s n="s4.6;p112.172">Finally, the enlargement of the image had to be set so that the edges were only just cut off. </s>
<s n="s5.6;p112.172">After investigation it was found there was a relationship between the height of the image and the zoom factor that needed to be applied. </s>
<s n="s6.6;p112.172">This relationship was exploited such that the edges of an image were automatically clipped when the image was displayed. </s>
</p>
<figure id="BAWE_0228b-pic.025">
<head rend="bold">Figure 42 - Image displayed with correct clipping</head>
</figure>
</div3>
<div3>
<head rend="underlined bold">4.4.5 Subsampling</head>
<p n="p113.172">
<s n="s1.4;p113.172">The final part of the displaying procedure involved subsampling the images. </s>
<s n="s2.4;p113.172">For subsampling a lower number of pixels had to be processed than for a normal resolution image. </s>
<s n="s3.4;p113.172">For square pixels every sixth pixel was taken in the horizontal direction while for every seventh pixel was taken for hexagonal pixels in the horizontal direction. </s>
<s n="s4.4;p113.172">Every sixth pixel was taken in the vertical direction for both sampling systems. </s>
</p>
<quote lang="English">for (int i = 1; i &lt; img.getHeight(this); i = i + 6) { for (int j = 1; j &lt; img.getWidth(this); j = j + 7) Hexagonal Sampling</quote>
<quote lang="English">for (int i = 1; i &lt; img.getHeight(this); i = i + 6) { for (int j = 1; j &lt; img.getWidth(this); j = j + 6) { Square Sampling</quote>
<p n="p114.172">
<s n="s1.4;p114.172">The images displayed were six times smaller than normal. </s>
<s n="s2.4;p114.172">These had to be enlarged so that better shape formation could take place. </s>
<s n="s3.4;p114.172">Also on such small images it would be difficult to determine any differences. </s>
<s n="s4.4;p114.172">Therefore the zoom factor was adjusted to compensate for these variations. </s>
</p>
<figure id="BAWE_0228b-pic.026">
<head rend="bold">Figure 43 - Subsampled image</head>
</figure>
<p n="p115.172">
<s n="s1.2;p115.172">However the resultant image was not of a very high quality. </s>
<s n="s2.2;p115.172">Higher resolution images would be required for testing for testing purposes. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">4.4.6 Alpha Element</head>
<p n="p116.172">
<s n="s1.2;p116.172">The overlapping of circles introduced new problems. </s>
<s n="s2.2;p116.172">With only part of the circle showing a new shape was being introduced. </s>
</p>
<figure id="BAWE_0228b-pic.027">
<head rend="bold">Figure 44 - Overlapping problem</head>
</figure>
<p n="p117.172">
<s n="s1.9;p117.172">Apart from the circles on the outer edge every other circle would be displayed as in figure 44. </s>
<s n="s2.9;p117.172">The edge circles were also not being displayed correctly. </s>
<s n="s3.9;p117.172">In a real printout the ink on a page may spread and mix together. </s>
<s n="s4.9;p117.172">This concept provided the solution to the overlapping problem. </s>
<s n="s5.9;p117.172">OpenGL could add a fourth element to the RGB colour model to produce the RGBA model. </s>
<s n="s6.9;p117.172">The fourth element was the alpha element. </s>
<s n="s7.9;p117.172">The alpha element controlled the transparency of polygons, or in this case, circles. </s>
<s n="s8.9;p117.172">With the transparency applied to the circles, the circle behind another would have more of its colour showing through. </s>
<s n="s9.9;p117.172">This transparency caused the colours to mix also simulating the effects on inks on a paper. </s>
</p>
<figure id="BAWE_0228b-pic.028">
<head rend="bold">Figure 45 - Transparency solution</head>
</figure>
</div3>
</div2>
<div2>
<head rend="underlined bold">4.5 Experiments</head>
<div3>
<head rend="underlined bold">4.5.1 Preliminary Experiment</head>
<p n="p118.172">
<s n="s1.2;p118.172">A preliminary experiment was carried out to gain experience in performing the testing procedure. </s>
<s n="s2.2;p118.172">With the knowledge received from the preliminary experiment it would be possible to improve the procedure and provide a more fair and suitable final experiment. </s>
</p>
<p n="p119.172">
<s n="s1.4;p119.172">To display an image the program had to be loaded from a command line with the image file name as an argument. </s>
<s n="s2.4;p119.172">This made it unfeasible to change the image being displayed while the program was running, especially with different images requiring different window sizes. </s>
<s n="s3.4;p119.172">Therefore to change an image being displayed the current program had to be closed and a new command had to be typed into the command line with a new argument. </s>
<s n="s4.4;p119.172">This could take a lot of time, especially when displaying a string of images - a test participant may be unwilling to wait for such periods in between testing. </s>
</p>
<p n="p120.172">
<s n="s1.4;p120.172">Therefore a method was needed for quickly changing the image being displayed. </s>
<s n="s2.4;p120.172">The workstation for performing the tests was a Windows platform pc. </s>
<s n="s3.4;p120.172">Therefore an MS-DOS batch file was created which lined up the commands that needed to be called. </s>
<s n="s4.4;p120.172">All the necessary program files were compressed to a jar file which made organisation and execution of the program easier. </s>
</p>
<quote lang="English">java -jar -classpath ./ Image4.jar sakuraba.jpg java -jar -classpath ./ Image4.jar sky.jpg java -jar -classpath ./ Image4.jar house.jpg java -jar -classpath ./ Image4.jar grass.jpg</quote>
<p n="p121.172">
<s n="s1.3;p121.172">As soon as one image was no longer needed, the program was closed and the next image would automatically be displayed. </s>
<s n="s2.3;p121.172">This process greatly reduced the changeover time between images. </s>
<s n="s3.3;p121.172">A similar batch process could also be created using UNIX shell script to allow the same test to be run on a workstation running UNIX. </s>
</p>
<p n="p122.172">
<s n="s1.6;p122.172">The test procedure asked participants to compare an image with different shape pixels, at varying distances, and decide which displaying of the image they preferred. </s>
<s n="s2.6;p122.172">The images were displayed without any sub-sampling. </s>
<s n="s3.6;p122.172">To ensure that the height and width of the images were still correct the dimensions of the hexagon were altered. </s>
<s n="s4.6;p122.172">A regular hexagon is wider than the regular square and so displaying every sample with this type of hexagon would cause a distortion in the image. </s>
<s n="s5.6;p122.172">Therefore the width of the hexagon was adjusted to only 3.0 units width instead of 3.464 units. </s>
<s n="s6.6;p122.172">This allowed images consisting of hexagons on a hexagonal sampling grid to be displayed in the same window as images consisting of squares on a square sampling grid. </s>
</p>
<p n="p123.172">
<s n="s1.4;p123.172">The four images chosen for testing were images of natural scenes. </s>
<s n="s2.4;p123.172">The images displayed were a face, a portion of sky, a house and a field. </s>
<s n="s3.4;p123.172">The dimensions of the images were also relatively small in size so that the images would load up more quickly. </s>
<s n="s4.4;p123.172">The images were also displayed at twice their original size to allow the graphics card to display more accurate hexagons. </s>
</p>
<figure id="BAWE_0228b-pic.029">
<head rend="bold">Figure 46 - Test images used during preliminary experiment</head>
</figure>
<p n="p124.172">
<s n="s1.5;p124.172">The participants were asked to view one of the images. </s>
<s n="s2.5;p124.172">The pixels would be swapped between hexagons on a hexagonal sampling grid and squares on a square sampling grid. </s>
<s n="s3.5;p124.172">The participants were not told which pixel shape was being used - they were simply informed of version 1 or version 2. </s>
<s n="s4.5;p124.172">The version number applied was changed between the two shapes to ensure the participant did not become attached to a version number and instead chose the image they preferred. </s>
<s n="s5.5;p124.172">After a participant had given their answer, whether they preferred version 1, version 2 or had no preference, the image was changed so that the comparison could take place on a different image. </s>
</p>
<p n="p125.172">
<s n="s1.4;p125.172">During the test the participants were asked to stand at varying distances to simulate higher and lower resolution. </s>
<s n="s2.4;p125.172">First participants were asked to stand at twice the normal distance, followed by the normal distance and finishing with three times the normal distance. </s>
<s n="s3.4;p125.172">Since the images were being displayed at twice their actual size, viewing the image from a normal distance would simulate lower resolution because the pixel shapes could be seen more clearly. </s>
<s n="s4.4;p125.172">Viewing the image from twice the normal distance would be equivalent to a normal viewing and finally, viewing the images from three times the normal distance would simulate a higher resolution as the pixel shape would be harder to make out. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">4.5.2 Final Experiment</head>
<p n="p126.172">
<s n="s1.5;p126.172">The final experiment ran in a similar fashion to the preliminary experiment however a few important changes were made. </s>
<s n="s2.5;p126.172">The images displayed had gone through the subsampling process and so were of much lower resolution. </s>
<s n="s3.5;p126.172">Therefore when displaying the images it was not easy to tell what was being displayed. </s>
<s n="s4.5;p126.172">For this reason participants were shown the original images at maximum resolution to give them some idea of what the image was supposed to display. </s>
<s n="s5.5;p126.172">The participants were shown all the images at the beginning of the test and then were not allowed to see the images later on during the test. </s>
</p>
<p n="p127.172">
<s n="s1.4;p127.172">Because the images were being subsampled a much higher resolution original image was required so that the subsampled image would have some quality and some features of the image could be discernable. </s>
<s n="s2.4;p127.172">It was fairly difficult to find BMP or TIFF images that are of high resolution due to the large file size. </s>
<s n="s3.4;p127.172">However some JPEG images were found which did not contain any artefacting. </s>
<s n="s4.4;p127.172">Hence these images were suitable for testing and contained a variety of different features - some containing straight edges; others providing curves and some images had subtle colour changes. </s>
</p>
<p n="p128.172">
<s n="s1.2;p128.172">Because the images were being displayed at six times larger than usual the participant had to stand six times the normal viewing distance away. </s>
<s n="s2.2;p128.172">This was the correct viewing distance for the subsampled image. </s>
</p>
<p n="p129.172">
<s n="s1.4;p129.172">There were some extra features to be tested in the final test. </s>
<s n="s2.4;p129.172">Images with hexagons at different rotations were also tested as there could be a difference in an image displaying with a different hexagon rotation. </s>
<s n="s3.4;p129.172">Circles were also tested in the final experiment to provide an alternative to the squares and the hexagons. </s>
<s n="s4.4;p129.172">Because circles fit on either sampling grid it was important to test the circles with both of the sampling grids. </s>
</p>
<p n="p130.172">
<s n="s1.1;p130.172">Five images were chosen for the final test, again each of them displaying a natural scene. </s>
</p>
<figure id="BAWE_0228b-pic.030">
<head rend="bold">Figure 47 - Test images used for the final test</head>
</figure>
<p n="p131.172">
<s n="s1.2;p131.172">Using these methods images could be displayed using hexagons, squares or circles on square and hexagonal sampling grids. </s>
<s n="s2.2;p131.172">The preliminary experiment provided improvements for the final experiment. </s>
</p>
</div3>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">5. Results and Analysis</head>
<p n="p132.172">
<s n="s1.3;p132.172">The actual data from the preliminary results were not the key aspect. </s>
<s n="s2.3;p132.172">The experience gained from running the experiment ensured a more accurate and reliable final experiment. </s>
<s n="s3.3;p132.172">The final experiment compared hexagon, square and circular pixels, the results of which are discussed in the following sections. </s>
</p>
<div2>
<head rend="underlined bold">5.1 Preliminary Results</head>
<p n="p133.172">
<s n="s1.1;p133.172">The images produced may be viewed in the appendix. </s>
</p>
<p n="p134.172">
<s n="s1.5;p134.172">The images displayed using square pixels were generally better quality than the images using the hexagons. </s>
<s n="s2.5;p134.172">At the closer ranges square pixel images were almost always preferred to hexagon pixel images. </s>
<s n="s3.5;p134.172">At the greatest range there were no discernable differences between the images. </s>
<s n="s4.5;p134.172">At the normal viewing distance the square pixel images were preferred to the hexagon pixel images. </s>
<s n="s5.5;p134.172">Although the alternative pixel shape did not provide positive results the purpose of the preliminary experiment was fulfilled - running an early test to devise an improved final experiment. </s>
</p>
<div3>
<head rend="underlined bold">5.1.1 Single Window</head>
<p n="p135.172">
<s n="s1.9;p135.172">An image was loaded in a window with either square or hexagon pixel images. </s>
<s n="s2.9;p135.172">While the program was running it was possible to change the pixel shape, and the sampling grid it was displayed on, by the touch of a button. </s>
<s n="s3.9;p135.172">The other option was to display images side by side. </s>
<s n="s4.9;p135.172">However participants may have preferred a particular side, so this chance of bias was removed. </s>
<s n="s5.9;p135.172">It was possible to switch between various shapes, hexagons, squares and circles as well as various sampling grids, square and hexagon. </s>
<s n="s6.9;p135.172">The fact that it happened in the same window increased the speed of the test. </s>
<s n="s7.9;p135.172">The participant did not have to wait for extra windows to be loaded. </s>
<s n="s8.9;p135.172">Participants also kept asking to see the two different versions again and again. </s>
<s n="s9.9;p135.172">The one touch button method greatly sped up this process - instead of having to continually load up new windows. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">5.1.2 Preference of Shape</head>
<p n="p136.172">
<s n="s1.4;p136.172">In most cases participants could not immediately decide which image they preferred. </s>
<s n="s2.4;p136.172">The participant had to focus on a particular part of the image or on an edge within the image. </s>
<s n="s3.4;p136.172">Their decision about the image was sometimes entirely based upon a single object. </s>
<s n="s4.4;p136.172">For example, during a test of the 'grass.jpg' image a participant revealed that their decision was based on the clarity of the dog. </s>
</p>
<p n="p137.172">
<s n="s1.1;p137.172">While this may be a valid to do in the situation where there is only one difference between the two images, in other images differences could have been overlooked. </s>
</p>
<p n="p138.172">
<s n="s1.2;p138.172">In a few test cases the resolution of the image was set very low. </s>
<s n="s2.2;p138.172">For example, the 'sakuraba.jpg' was zoomed in until only the nose was visible. </s>
</p>
<figure id="BAWE_0228b-pic.031">
<head rend="bold">Figure 48 - Nose displayed using hexagon pixels (left) and square pixels (right)</head>
</figure>
<p n="p139.172">
<s n="s1.2;p139.172">The participants pointed out that the squares were better for the edges, but the hexagons were better for the detail within an image. </s>
<s n="s2.2;p139.172">This gave some promise for the hexagon shape at certain resolutions. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">5.1.3 Jpeg Image File Format</head>
<p n="p140.172">
<s n="s1.6;p140.172">The image displayed were conversion of jpegs. </s>
<s n="s2.6;p140.172">Jpegs are compressed image files. </s>
<s n="s3.6;p140.172">This compression has lead to artefacts appearing in images, due to the algorithms used. </s>
<s n="s4.6;p140.172">Particularly when using the 'grass.jpg' image the artefacts were exaggerated when using hexagons compared with squares. </s>
<s n="s5.6;p140.172">This may have distorted the results for that particular image. </s>
<s n="s6.6;p140.172">It was therefore important to ensure that the test images used were not compressed, such as .TIFF or .BMP. If this was not possible then it would at least be better to obtain images where there were not artefacts present or the compression percentage was low. </s>
</p>
<p n="p141.172">
<s n="s1.2;p141.172">The 'sakuraba.jpg' image may also have had a smoothing effect applied to it. </s>
<s n="s2.2;p141.172">The effects of this were again exaggerated in hexagons as the edges of the objects were stretched out. </s>
</p>
</div3>
<div3>
<head rend="underlined bold">5.1.4 Subsampling</head>
<p n="p142.172">
<s n="s1.7;p142.172">The images were not sampled, i.e. every pixel was being displayed. </s>
<s n="s2.7;p142.172">Even though the images were being displayed at twice their size this meant that there were only 4 pixels available on the monitor for the formation of hexagons. </s>
<s n="s3.7;p142.172">The graphics card overcame this problem by simply changing the colour of the monitor's pixels where it thought it was appropriate - to simulate the hexagonal sampling grid effect. </s>
<s n="s4.7;p142.172">This meant that a true representation of hexagons being sampling on a hexagonal grid was not being displayed. </s>
<s n="s5.7;p142.172">Therefore the results obtained were not of much use. </s>
<s n="s6.7;p142.172">However the preliminary test did give an idea of how to run the final test. </s>
<s n="s7.7;p142.172">It also gave pointers on how to improve the final test - choosing better images and the importance of sampling. </s>
</p>
</div3>
</div2>
<div2>
<head rend="underlined bold">5.2 Final Experiment Results</head>
<div3>
<head rend="underlined bold">5.2.1 General results </head>
<div4>
<head rend="underlined bold">5.2.1.1 Resultant Program</head>
<p n="p143.172">
<s n="s1.6;p143.172">The original aim was to produce software that would display images using hexagonal pixels on a hexagonal sampling grid. </s>
<s n="s2.6;p143.172">However it was beneficial to add extra features to the program. </s>
<s n="s3.6;p143.172">It was possible to move the picture around and zoom in to specific parts of the picture to see exactly how the pixels were forming the image. </s>
<s n="s4.6;p143.172">It was also possible to change between square and hexagonal sampling grids. </s>
<s n="s5.6;p143.172">Another feature was the ability to change shape to hexagons, squares, circles and rectangles. </s>
<s n="s6.6;p143.172">The hexagons could also be drawn with a different rotation and on its appropriate sampling grid. </s>
</p>
<p n="p144.172">
<s n="s1.5;p144.172">The original image was loaded into the program where the image dimensions were obtained. </s>
<s n="s2.5;p144.172">An appropriate window was initiated and the image was sent for processing. </s>
<s n="s3.5;p144.172">The sampling grid to be used was set by the user and the appropriate subsampling technique was applied to the processed image data. </s>
<s n="s4.5;p144.172">The shape of the pixel to be used was then set by the user and the appropriate image displayed. </s>
<s n="s5.5;p144.172">Any translations, transparency alterations, zooming and pixel rotation adjustments could be applied while the program was running. </s>
</p>
<p n="p145.172">
<s n="s1.1;p145.172">The final program structure resembled the following diagram </s>
</p>
<figure id="BAWE_0228b-fig.018">
<head rend="bold">Figure 49 - Final software design</head>
</figure>
</div4>
<div4>
<head rend="underlined bold">5.2.1.2 Image Qualities</head>
<p n="p146.172">
<s n="s1.4;p146.172">The program produced images using various shape pixels on various sampling grids. </s>
<s n="s2.4;p146.172">The formations of the shapes were better than in the preliminary experiment because of the subsampling. </s>
<s n="s3.4;p146.172">Less samples were being used therefore the image could be enlarged to a bigger size on the same display. </s>
<s n="s4.4;p146.172">The hexagons were formed from 38 square display pixels which were a lot more than the 4 square display pixels used to form hexagons in the preliminary experiment. </s>
</p>
<p n="p147.172">
<s n="s1.2;p147.172">When viewed at the correct distance there was no difference between using hexagons or rectangles on a hexagonal sampling grid. </s>
<s n="s2.2;p147.172">Therefore rectangles were removed from the final experiment. </s>
</p>
<p n="p148.172">
<s n="s1.8;p148.172">Images displayed using circles appeared less bright than when displayed with other pixel shapes. </s>
<s n="s2.8;p148.172">This was due to the transparency of the circles. </s>
<s n="s3.8;p148.172">All images displayed using circles were set to a transparency level of 50%. </s>
<s n="s4.8;p148.172">Therefore the images displayed were half as bright as images displayed with other pixels. </s>
<s n="s5.8;p148.172">The overlapping of the circles also introduced a new problem. </s>
<s n="s6.8;p148.172">The images appeared blurry and unclear. </s>
<s n="s7.8;p148.172">However this same blurry effect removed the distinctive pixel boundaries that appeared in images using other shapes. </s>
<s n="s8.8;p148.172">This gave a smoother transition of colour over the image and therefore in some aspects more closely resembled a continuous image. </s>
</p>
</div4>
<div4>
<head rend="underlined bold">5.2.1.3 Printing</head>
<p n="p149.172">
<s n="s1.6;p149.172">It was not yet possible to print out images. </s>
<s n="s2.6;p149.172">OpenGL had not been researched deeply enough to find an effective method for printing images. </s>
<s n="s3.6;p149.172">Screen captures could be taken which did allow printing. </s>
<s n="s4.6;p149.172">However the captures did not contain enough detail to make them suitable for printing. </s>
<s n="s5.6;p149.172">Any captures taken would also be taken using square pixels on a square sampling grid thus defeating the purpose of printing. </s>
<s n="s6.6;p149.172">Therefore there was no result for the secondary objective. </s>
</p>
</div4>
</div3>
<div3>
<head rend="underlined bold">5.2.2 Test results</head>
<p n="p150.172">
<s n="s1.1;p150.172">The images produced may be viewed in the appendix. </s>
</p>
<div4>
<head rend="underlined bold">5.2.2.1 Pixel Comparison</head>
<div5>
<head rend="underlined bold">Vertical Hexagons against Horizontal Hexagons</head>
<p n="p151.172">
<s n="s1.4;p151.172">The first test to consider was the orientation of the hexagon shape. </s>
<s n="s2.4;p151.172">It was important to decide which hexagon shape provided the best image. </s>
<s n="s3.4;p151.172">The better of the two orientations could then be used for comparison against squares and circles. </s>
<s n="s4.4;p151.172">The set of five images were tested on three different people. </s>
</p>
<table id="BAWE_0228b-tab.003">
<row>
<cell/>
</row>
</table>
<p n="p152.172">
<s n="s1.5;p152.172">In general it was found that images displaying vertical hexagons were preferred twice as many times to the horizontal hexagons. </s>
<s n="s2.5;p152.172">The vertical hexagons appeared to display straight horizontal edges better than the horizontal hexagons. </s>
<s n="s3.5;p152.172">However the opposite was the case for vertical straight edges. </s>
<s n="s4.5;p152.172">However in some images there did not appear to be many straight edges at all and still the vertical hexagons were preferred. </s>
<s n="s5.5;p152.172">Therefore vertical hexagons were used in the remaining tests when hexagon pixels were required. </s>
</p>
</div5>
<div5>
<head rend="underlined bold">Circles on Hexagonal Sampling Grid against Circles on Square Sampling Grid</head>
<p n="p153.172">
<s n="s1.4;p153.172">The next test involved testing circles on the two different sampling grids. </s>
<s n="s2.4;p153.172">Overlapping circles could be displayed on either square sampling grids or hexagonal sampling grids - both would give a complete tiling. </s>
<s n="s3.4;p153.172">However the sampling grids did affect the resultant image in different ways. </s>
<s n="s4.4;p153.172">Again the set of images were tested on three people. </s>
</p>
<table id="BAWE_0228b-tab.004">
<row>
<cell/>
</row>
</table>
<p n="p154.172">
<s n="s1.7;p154.172">It was found that circles displayed on a hexagonal sampling grid were preferred more than twice as many times as the circles displayed on a square sampling grid. </s>
<s n="s2.7;p154.172">The transparency of the circles introduced a problem with the images. </s>
<s n="s3.7;p154.172">In an area of one circle there were portions where there was no overlapping and portions where there were four circles overlapping each other. </s>
<s n="s4.7;p154.172">The result was lighter and darker sections within the single circle pixel area. </s>
<s n="s5.7;p154.172">This effect was present in all circles and led to a grid effect on the images. </s>
<s n="s6.7;p154.172">However the grid could be seen more clearly in the images using a square sampling grid. </s>
<s n="s7.7;p154.172">For this reason some participants preferred circles to be displayed on a hexagonal sampling grid - therefore circles would be displayed on a hexagonal grid for the remainder of the tests. </s>
</p>
</div5>
<div5>
<head rend="underlined bold">Hexagons against Squares</head>
<p n="p155.172">
<s n="s1.2;p155.172">The hexagon pixel images, displayed on a hexagonal sampling grid, were compared with square pixel images, displayed on a square sampling grid. </s>
<s n="s2.2;p155.172">The set of five images were tested on five different people. </s>
</p>
<table id="BAWE_0228b-tab.005">
<row>
<cell/>
</row>
</table>
<p n="p156.172">
<s n="s1.2;p156.172">60% of participants preferred square pixel images compared to 28% of participants who preferred hexagonal pixel images. </s>
<s n="s2.2;p156.172">12% of participants had no preference between the images. </s>
</p>
<p n="p157.172">
<s n="s1.2;p157.172">However it is important to note the total number of samples used in each case. </s>
<s n="s2.2;p157.172">The different sampling grids required a different number of samples. </s>
</p>
<p n="p158.172">
<s n="s1.8;p158.172">For the 800x600 images 13,300 samples were used for a square pixel image whereas only 11,400 samples were used for the hexagon pixel images. </s>
<s n="s2.8;p158.172">The 691x922 image was displayed using 17,595 samples for the square pixels whereas only 14,994 samples were used for hexagon pixels. </s>
<s n="s3.8;p158.172">Hexagon image pixels were displayed using between 14.29% - 14.78% less pixels than with square images. </s>
<s n="s4.8;p158.172">As mentioned earlier if there are fewer samples in an image then there is less information content; the square pixel images had more than a tenth extra information in the image than the hexagon pixel images. </s>
<s n="s5.8;p158.172">However with a lower number of samples and therefore lower information content, the hexagon pixel images were still preferred 28% percent of the time - almost a third of all cases. </s>
<s n="s6.8;p158.172">Additionally in over 10% of cases there was no preference - demonstrating that squares were not deemed better than the hexagons in more cases. </s>
<s n="s7.8;p158.172">If the hexagons were displayed using the same number of samples the gap between the results may be closed down. </s>
<s n="s8.8;p158.172">However the dimensions of the images would be slightly different, although the aspect ratio would remain the same. </s>
</p>
</div5>
<div5>
<head rend="underlined bold">Circles against Squares</head>
<p n="p159.172">
<s n="s1.2;p159.172">Images using circle pixels on hexagonal sampling grid were compared with square pixel images. </s>
<s n="s2.2;p159.172">The set of five images were tested on five different people. </s>
</p>
<table id="BAWE_0228b-tab.006">
<row>
<cell/>
</row>
</table>
<p n="p160.172">
<s n="s1.5;p160.172">Again the square pixel images were preferred in 60% of all cases. </s>
<s n="s2.5;p160.172">The circle pixels were preferred in 32% of cases and there was no preference in 8% of all cases. </s>
<s n="s3.5;p160.172">Once more because circles were displayed on a hexagonal sampling grid a fewer number of samples were used compared to the square pixel images. </s>
<s n="s4.5;p160.172">This must be taken into account when comparing the results. </s>
<s n="s5.5;p160.172">However it is interesting to note that the circles performed slightly better than the hexagons in the same situation. </s>
</p>
</div5>
<div5>
<head rend="underlined bold">Hexagons against Circles</head>
<p n="p161.172">
<s n="s1.3;p161.172">Hexagon pixel images were compared to circle pixel images. </s>
<s n="s2.3;p161.172">The images were subsampled on a hexagonal sampling grid. </s>
<s n="s3.3;p161.172">Once again the set of five images were tested on five different people. </s>
</p>
<table id="BAWE_0228b-tab.007">
<row>
<cell/>
</row>
</table>
<p n="p162.172">
<s n="s1.6;p162.172">The hexagonal pixel images were preferred in 68% of all cases. </s>
<s n="s2.6;p162.172">The circle pixel images were preferred in 32% of all cases. </s>
<s n="s3.6;p162.172">There were no instances of no preference being chosen in a test case. </s>
<s n="s4.6;p162.172">Therefore it was quite clear which image provided the best quality. </s>
<s n="s5.6;p162.172">Both images were being displayed with the same number of samples and on the same sampling grid. </s>
<s n="s6.6;p162.172">The smoothing effect of the circles images were outweighed by the blurry and brightness factors. </s>
</p>
</div5>
</div4>
<div4>
<head rend="underlined bold">5.2.2.2 Image comparison</head>
<p n="p163.172">
<s n="s1.1;p163.172">By comparing the results of each image individually trends in the results may be established. </s>
</p>
<div5>
<head rend="underlined bold">Bluehills</head>
<table id="BAWE_0228b-tab.008">
<row>
<cell/>
</row>
</table>
<p n="p164.172">
<s n="s1.4;p164.172">In this image there are not many straight edges - only the curves of the hill. </s>
<s n="s2.4;p164.172">In this situation the pixels using the hexagonal sampling grid are preferred more often than the square pixel using the square sampling grid. </s>
<s n="s3.4;p164.172">As stated in the introduction square pixels are more suited to straight horizontal and vertical edges. </s>
<s n="s4.4;p164.172">This factor may have attributed to the square pixel not performing so well in this image. </s>
</p>
<p n="p165.172">
<s n="s1.3;p165.172">A large proportion of the original image was blue. </s>
<s n="s2.3;p165.172">The change between the different intensities of blue was subtle. </s>
<s n="s3.3;p165.172">The smoothing, blurring effect of the circles helped to preserve this subtle change whereas the hexagon pixels defined the pixel boundary too clearly. </s>
</p>
</div5>
<div5>
<head rend="underlined bold">Sunset</head>
<table id="BAWE_0228b-tab.009">
<row>
<cell/>
</row>
</table>
<p n="p166.172">
<s n="s1.4;p166.172">Although there were some straight lines in this image the hexagon pixel was preferred more than the square pixel. </s>
<s n="s2.4;p166.172">At such low resolutions the hexagonal pixel performed just as well as the square pixel on the horizontal straight edges. </s>
<s n="s3.4;p166.172">The remainder of the image consisted of curves non-regular shapes. </s>
<s n="s4.4;p166.172">Although there were not too many clashing colours adjacent to each other the circle proved to blur edges too much for the participants. </s>
</p>
</div5>
<div5>
<head rend="underlined bold">Sky</head>
<table id="BAWE_0228b-tab.010">
<row>
<cell/>
</row>
</table>
<p n="p167.172">
<s n="s1.4;p167.172">Even though the resolution was low the hexagon pixel did not perform as well as square pixels on vertical straight lines. </s>
<s n="s2.4;p167.172">Because the tower is the main focus of the image participants based their decision on the quality of the tower. </s>
<s n="s3.4;p167.172">When viewing the clouds or the rest of the sky there is not much difference between the hexagon pixels and the square pixels. </s>
<s n="s4.4;p167.172">There was not much difference between preference of hexagon pixels and circle pixels. </s>
</p>
</div5>
<div5>
<head rend="underlined bold">Water Lilies</head>
<table id="BAWE_0228b-tab.011">
<row>
<cell/>
</row>
</table>
<p n="p168.172">
<s n="s1.7;p168.172">The image provides many interesting features. </s>
<s n="s2.7;p168.172">The edges of the leaves are fairly straight and at varying angles. </s>
<s n="s3.7;p168.172">There any many curves in the leaves in the background and finally there are many near-vertical straight edges displayed by the stalk of the flowers. </s>
<s n="s4.7;p168.172">It is found that the square pixel image was most preferred. </s>
<s n="s5.7;p168.172">Over the range of feature present in the image the square pixel may handle them better in general whereas the hexagon may excel with some features whilst not performing so well with others. </s>
<s n="s6.7;p168.172">More detail in the flowers is displayed when using square pixels. </s>
<s n="s7.7;p168.172">The circles blur the detail in the flowers too much thus removing some of the information in the image. </s>
</p>
</div5>
<div5>
<head rend="underlined bold">Autumn</head>
<table id="BAWE_0228b-tab.012">
<row>
<cell/>
</row>
</table>
<p n="p169.172">
<s n="s1.5;p169.172">The final image has much detail in the leaves. </s>
<s n="s2.5;p169.172">The leaves are fairly small and one of the pixels is sometimes larger than the leaf itself. </s>
<s n="s3.5;p169.172">A lot of detail is lost due to the subsampling techniques. </s>
<s n="s4.5;p169.172">However, square pixels were still preferred over hexagons, perhaps because the square pixels covered a lower surface area and so resembled the leaves more closely. </s>
<s n="s5.5;p169.172">The circles blurred the leaves of the image far too much resulting in a 0% preference percentage for this particular image. </s>
</p>
</div5>
</div4>
</div3>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">6. Conclusion</head>
<p n="p170.172">
<s n="s1.5;p170.172">The project aim was to investigate the effects of pixel shape on images at low resolution. </s>
<s n="s2.5;p170.172">Changing the pixel shape had many different effects - using hexagons provided more detail but was poor for edges; using circles applied a smoothing effect and blurred the image but the overall brightness of an image was decreased. </s>
<s n="s3.5;p170.172">Hexagon pixel images were preferred over circle pixel images however square pixel images were preferred over both hexagon and circle pixel images. </s>
<s n="s4.5;p170.172">This was mainly due to the straight edges provided by the square pixels. </s>
<s n="s5.5;p170.172">However images displayed using hexagonal sampling grids were using roughly 14% less samples than when using the square sampling grid - therefore images were being displayed with less information content. </s>
</p>
<p n="p171.172">
<s n="s1.5;p171.172">The project could still be further developed by investigating different pixel shapes when the number of samples in either square sampled or hexagonally sampled images were the same. </s>
<s n="s2.5;p171.172">Ultimately it would be desirable to test hexagonal images on hardware that was capable of using hexagonal pixels. </s>
<s n="s3.5;p171.172">This would remove the simulation effects and be a true test. </s>
<s n="s4.5;p171.172">The experiments could be performed by a psychologist to ensure the tests were fair. </s>
<s n="s5.5;p171.172">The secondary objective of the project was never achieved and hence could still be investigated further. </s>
</p>
<p n="p172.172">
<s n="s1.3;p172.172">The main project aim was achieved - the effect of pixel shape on images was investigated. </s>
<s n="s2.3;p172.172">However the solution to the problems discussed at the beginning of the report were not attained. </s>
<s n="s3.3;p172.172">The secondary objective was not accomplished due to lack of understanding of the OpenGL graphics language. </s>
</p>
</div1>
</body>
<back>
<div1 type="bibliography">
<head rend="underlined bold">References</head>
<p>
<hi rend="bold">1, 5, 7)</hi> Staunton R.C. , The processing of hexagonally sampled images, <hi rend="italic">Advances in Imaging and Electron Physics,</hi> 2001, 119, pp192-205 </p>
<p>
<hi rend="bold">2)</hi> Wandell B.A. , Foundations of vision, Sunderland - Massacusetts, Sinauer Associates Inc</p>
<p>
<hi rend="bold">3, 9)</hi> Unknown Author, RGB Color Model, Last accessed 27<hi rend="sup">th</hi> April 2005, &lt;<seg type="URL" n="http://en.wikipedia.org/wiki/RGB_color_model"/>>
</p>
<p>
<hi rend="bold">4)</hi> Middleton L, Sivaswamy J, Edge detection in hexagonal-image processing framework, <hi rend="italic">Image and Vision Computing</hi>, 2001, 19(14), pp 1071-1081</p>
<p>
<hi rend="bold">6)</hi> Unknown Author, Sphere Packing, Last accessed 27<hi rend="sup">th</hi> April 2005, &lt;<seg type="URL" n="http://en.wikipedia.org/wiki/Sphere_packing"/>>
</p>
<p>
<hi rend="bold">8)</hi> Unknown Author, Ink, Last accessed 27<hi rend="sup">th</hi> April 2005, &lt;<seg type="URL" n="http://www.encyclopedia.com/html/i1/ink.asp"/>>
</p>
<p>
<hi rend="bold">10)</hi> Neider J, Davis T, The official guide to learning OpenGL second edition, USA, Addison-Wesley</p>
<p>
<hi rend="bold">11)</hi> Ankrum D.R. , Computer Monitor Height, Angle and Distance, Last accessed 27<hi rend="sup">th</hi> 2005, &lt;<seg type="URL" n="http://www.office-ergo.com/setting.htm"/>>
</p>
<p>
<hi rend="bold">12)</hi> Unknown Author, Graphics, Last accessed 27<hi rend="sup">th</hi> April 2005, &lt;<seg type="URL" n="http://www.homeofficereports.com/graphics.htm"/>>
</p>
<p>
<hi rend="bold">13)</hi> Unknown Author, Microsoft DirectX Technology Overview, Last accessed 27<hi rend="sup">th</hi> April 2005, </p>
<p>&lt;<seg type="URL" n="http://www.microsoft.com/windows/directx/default.aspx?url=/windows/directx/productinfo/overview/default.htm"/>>
</p>
<p>
<hi rend="bold">14)</hi> Unknown Author, OpenGL Overview, Last accessed 27<hi rend="sup">th</hi> April 2005, </p>
<p>&lt;<seg type="URL" n="http://www.opengl.org/about/overview.html"/>>
</p>
<p>
<hi rend="bold">15)</hi> Unknown Author, Jausoft GL4Java Home-page, Last accessed 27<hi rend="sup">th</hi> April 2005, &lt;<seg type="URL" n="http://www.jausoft.com/gl4java.html"/>>
</p>
<p>
<hi rend="bold">16)</hi> Brauwer E.D. , : circle, Last accessed 27<hi rend="sup">th</hi> April 2005, &lt;<seg type="URL" n="http://mindfuck.de-brauwer.be/articles/circle/index.php"/>>
</p>
</div1>
<div1 type="appendix">
<head rend="underlined bold">Appendix 1 - Final Experiment Image Results</head>
<p/>
</div1>
<div1 type="appendix">
<head rend="underlined bold">Appendix2 - Preliminary Experiment Image Results</head>
<p/>
</div1>
</back>
</text>
</TEI.2>
