<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_3026b" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Assignment 2 - Orders Placement Program</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
<note resp="British Academic Written English (BAWE) corpus project">Standard title page / cover sheet in table, title and title parts taken out of table and marked-up (rest of table/cover sheet deleted). Student name, student number, module code and name in doc header. name of lecturer in doc footer. Many tables contain computer code.</note>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2004-11</p>
<p n="module title">Structured programming</p>
<p n="module code">U08003</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">3678</p>
<p n="number of s-units">140</p>
<p n="number of p">75</p>
<p n="number of tables">28</p>
<p n="number of figures">25</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">11</p>
<p n="number of lists">11</p>
<p n="number of paragraphs formatted like lists">12</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">26.3</p>
<p n="average s-units per p">1.9</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1986</p>
<p n="first language">French</p>
<p n="education">UK2</p>
<p n="course">BSc Computing</p>
<p n="student ID">3026</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<titlePart>
<hi rend="bold">Student No.</hi> <name type="student ID"/>
<hi rend="bold"> Student Name<name type="student name"/>
</hi>
</titlePart>
<titlePart rend="bold">Module No. U08003 Module Title Structured Programming</titlePart>
<docTitle>
<titlePart rend="bold">Coursework Title or No. Assignment 2 - Orders Placement Program</titlePart>
</docTitle>
<titlePart rend="bold">Module Leader <name type="tutor name"/>
</titlePart>
<docTitle>
<titlePart rend="underlined bold">Assignment 2 - Orders Placement Program</titlePart>
</docTitle>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="bold">Defining the problem</head>
<div2>
<head rend="underlined">Enter product details:</head>
<p n="p1.75">
<s n="s1.4;p1.75">As the title indicates it, the program is to be an orders placement program. </s>
<s n="s2.4;p1.75">In this case, the user will have 3 products to choose from during the orders placement process. </s>
<s n="s3.4;p1.75">These products details will be recorded into the program by the user at the start of the program. </s>
<s n="s4.4;p1.75">He will have to enter these details for each of the three products: </s>
</p>
<list type="bulleted">
<item>Product Name</item>
<item>Product ID (in the range 1000 - 1999)</item>
<item>Product Cost (in pence)</item>
<item>Number of Products in Stock</item>
</list>
</div2>
<div2>
<head rend="underlined">Placing order(s):</head>
<p n="p2.75">
<s n="s1.3;p2.75">The program should then ask the user if he wants to place an order. </s>
<s n="s2.3;p2.75">If answer is 'y' or 'Y', the program should use a loop to offer the user the opportunity to keep adding products to the order until he enters 'n'. </s>
<s n="s3.3;p2.75">The user can keep adding products to the order until they say that they do not want to add anymore (by entering 'n' when asked) at which point the program will tell the user the cost of the whole order. </s>
</p>
<p n="p3.75">
<s n="s1.3;p3.75">To add a product to the order, the program will ask the user to enter the name of the product and will loop until a valid product name is entered. </s>
<s n="s2.3;p3.75">The system will then responds by showing the products details and ask the user how many products he wants to order. </s>
<s n="s3.3;p3.75">Again, the program will loop until a correct value is entered (value not negative and not greater than the number of products in stock). </s>
</p>
<p n="p4.75">
<s n="s1.2;p4.75">When a valid quantity is entered, that amount is subtracted from the number in stock for that product and the total cost is increased by the calculated cost of the items ordered. </s>
<s n="s2.2;p4.75">The user is then offered the chance to add another product to the order. </s>
</p>
</div2>
<div2>
<head rend="underlined">Data checking:</head>
<p n="p5.75">
<s n="s1.1;p5.75">The program is required to carry out the following data checking and in case of error should repeatedly ask the user for a correct value until one is entered: </s>
</p>
<list type="bulleted">
<item rend="bold italic">Data entry:</item>
<item>Ensuring that product ids entered are in the range 1000 - 1999.</item>
<item>Ensuring that product cost and quantity in stock entered are >= 0. </item>
<item rend="bold italic">Placing orders:</item>
<item>Ensuring quantities requested are >= 0 and &lt;= the quantity in stock.</item>
</list>
</div2>
<div2>
<head rend="underlined">Show total cost &amp; place new order if user decides to:</head>
<p n="p6.75">
<s n="s1.4;p6.75">At the end of the program, the program has to show the total cost of the order that was made by the user. </s>
<s n="s2.4;p6.75">It should then ask him if he wants to place a new order. </s>
<s n="s3.4;p6.75">If he enters 'y', the program should simply restart from the placing orders part. </s>
<s n="s4.4;p6.75">This means that the stock available will stay the same and the user will not have to re-enter all the product details. </s>
</p>
<p n="p7.75">
<s n="s1.1;p7.75">On the other hand, if he doesn't want to restart, the program should simply end. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Understanding the problem</head>
<div2>
<head rend="underlined">Enter the three products details</head>
<p n="p8.75">
<s n="s1.3;p8.75">The first thing the user will have to do is to enter the products details so he can place orders afterwards. </s>
<s n="s2.3;p8.75">As required by the specification, I'll have to use records to store the information entered by the user. </s>
<s n="s3.3;p8.75">One record should be enough as they all contain the same type of information: </s>
</p>
<list type="bulleted">
<item>
<hi rend="bold">Name : String</hi> (because the value will contain letters)</item>
<item>
<hi rend="bold">ID, Cost, Stock : Integer</hi> (because the value will only contain whole numbers)</item>
</list>
<p n="p9.75">
<s n="s1.1;p9.75">In order to differentiate the three products, I will use an array that will allow me to access three times the same record and save three different products details. </s>
</p>
<p n="p10.75">
<s rend="underlined bold italic" n="s1.1;p10.75">For example: </s>
</p>
<p n="p11.75">
<s n="s1.1;p11.75">If I declare my product like this <formula notation="" id="BAWE_3026b-form.001"/> </s>
</p>
<p n="p12.75">
<s n="s1.1;p12.75">And if I declare an array that has my record as it type <formula notation="" id="BAWE_3026b-form.002"/> </s>
</p>
<p n="p13.75">
<s n="s1.2;p13.75">I will then be able to store three products that have the information Name, ID, Cost and Stock. </s>
<s n="s2.2;p13.75">See underneath for an example that could be used to assign value to the three records: </s>
</p>
<p n="p14.75">
<s n="s1.1;p14.75">
<formula notation="" id="BAWE_3026b-form.003"/> </s>
</p>
<p n="p15.75">
<s n="s1.1;p15.75">
<formula notation="" id="BAWE_3026b-form.004"/> </s>
</p>
<p n="p16.75">
<s n="s1.1;p16.75">
<formula notation="" id="BAWE_3026b-form.005"/> </s>
</p>
<p n="p17.75">
<s n="s1.1;p17.75">In other words, my array would in fact contain the information like this: </s>
</p>
<table id="BAWE_3026b-tab.001">
<row>
<cell/>
</row>
</table>
</div2>
<div2>
<head rend="underlined">Asking question &amp; reading answers</head>
<p n="p18.75">
<s n="s1.5;p18.75">At some points in the program, the user will be asked questions (i.e Would you like to add a product to your order?) and the system will expect him to give his answer using 'y' for yes and 'n' for no. </s>
<s n="s2.5;p18.75">In order to know what the user wants to do, the program will use a variable char (can only hold 1 character) that will hold the answer. </s>
<s n="s3.5;p18.75">It will then read the variable to see what the user's answer is. </s>
<s n="s4.5;p18.75">If its value is 'y' then it means the user's answer to the question is yes. </s>
<s n="s5.5;p18.75">On the other hand if it is 'n', it means that his answer is no. </s>
</p>
</div2>
<div2>
<head rend="underlined">Enter a product &amp; display the product details</head>
<p n="p19.75">
<s n="s1.1;p19.75">Once the user has inputted the three products, and assuming that he wants to place an order and add a product to the order, he will have to enter the product name that he wants to add in order to show the details and then input the quantity that he wants to order. </s>
</p>
<p n="p20.75">
<s n="s1.5;p20.75">The first thing that will need to be checked is the name of the product entered. </s>
<s n="s2.5;p20.75">If the product does indeed exist, the program should continue and show the details of the product. </s>
<s n="s3.5;p20.75">On the opposite case, an error message should let the user know that this product doesn't exist and should loop until a correct name was inputted. </s>
<s n="s4.5;p20.75">To do so, the value entered has to be compared with all the records names. </s>
<s n="s5.5;p20.75">Here is an example on how it could be done: </s>
</p>
<p n="p21.75">
<s n="s1.1;p21.75">
<formula notation="" id="BAWE_3026b-form.006"/> </s>
</p>
<p n="p22.75">
<s n="s1.3;p22.75">There are two steps involved to display the product details. </s>
<s n="s2.3;p22.75">First the program has to find what product has to be displayed (this will be done in the 'if statement' shown above). </s>
<s n="s3.3;p22.75">Secondly the program will then display the details on the screen using a simple 'write' statement. </s>
</p>
<p n="p23.75">
<s rend="bold italic" n="s1.1;p23.75">Note: </s>
</p>
<p n="p24.75">
<s n="s1.2;p24.75">As you can see in the box, the code to display the product details, to update the stock value and to calculate the cost are there in only 3 lines. </s>
<s n="s2.2;p24.75">This is because we will call a procedure at that point to make the program more structured. </s>
</p>
</div2>
<div2>
<head rend="underlined">Enter the quantity of products to order:</head>
<p n="p25.75">
<s n="s1.2;p25.75">During the order process, the user will have to enter the quantity of products that he wants to order. </s>
<s n="s2.2;p25.75">This will have several consequences: </s>
</p>
<p rend="ordered" n="p26.75">
<s n="s1.2;p26.75">The program has to check that the quantity entered is valid. </s>
<s n="s2.2;p26.75">It must neither be higher than the quantity available in stock or below 0. </s>
</p>
<p rend="ordered" n="p27.75">
<s n="s1.2;p27.75">The total cost of the order will have to be updated with the cost of the quantity of products added to the order. </s>
<s n="s2.2;p27.75">To do so, the total cost value has to be updated with the multiplication of the cost of the product by the quantity ordered. </s>
</p>
<p rend="ordered" n="p28.75">
<s n="s1.2;p28.75">The stock available of the concerned product also has to be updated as the user ordered a certain quantity of product. </s>
<s n="s2.2;p28.75">To update it, the quantity of products ordered will need to be subtracted from the actual stock quantity. </s>
</p>
</div2>
<div2>
<head rend="underlined">Consideration of the User Interface</head>
<p n="p29.75">
<s n="s1.2;p29.75">e.g. </s>
<s n="s2.2;p29.75">1 <formula notation="" id="BAWE_3026b-form.007"/> </s>
</p>
<p n="p30.75">
<s n="s1.2;p30.75">e.g. </s>
<s n="s2.2;p30.75">2 <formula notation="" id="BAWE_3026b-form.008"/> </s>
</p>
<p n="p31.75">
<s n="s1.2;p31.75">e.g. </s>
<s n="s2.2;p31.75">3 <formula notation="" id="BAWE_3026b-form.009"/> </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Outline a basic solution algorithm</head>
<table id="BAWE_3026b-tab.002">
<row>
<cell/>
</row>
</table>
<p n="p32.75"/>
</div1>
<div1 type="section">
<head rend="bold">Refining the algorithm &amp; pseudocode</head>
<p n="p33.75">
<s n="s1.3;p33.75">To describe a program, as its name indicates it, a basic algorithm is a sort of very simplified version of the complete program. </s>
<s n="s2.3;p33.75">Each step of the algorithm may also contain some "sub-steps" or sub-sub-sub steps that need to be explained and refined. </s>
<s n="s3.3;p33.75">For this program, these are the steps that needed to be "refined": </s>
</p>
<p rend="bulleted" n="p34.75">
<s n="s1.5;p34.75">
<hi rend="underlined">Ask for product details:</hi> in order to inform and save the program details in the program, there will be two steps involved. </s>
<s n="s2.5;p34.75">First, the program has to inform the user that he needs to enter some information. </s>
<s n="s3.5;p34.75">This will be done by outputting a message on the screen. </s>
<s n="s4.5;p34.75">Secondly, to save the information in the program's memory, an input from the user will have to be made. </s>
<s n="s5.5;p34.75">For some inputs, the program will have to <hi rend="underlined italic">validate</hi> the input: </s>
</p>
<list type="bulleted">
<item>The value of the product IDs' must be in the range 1000 - 1999 otherwise the user will have to re-enter a value. </item>
<item>The value of the product Costs must be whole numbers as the value is expressed in pence.</item>
<item>The value of the product Stock cannot be smaller than 0 because having less than no products in stock would not make any sense.</item>
</list>
<p rend="bulleted" n="p35.75">
<s n="s1.6;p35.75">
<hi rend="underlined">Asking for and placing orders:</hi> asking if the user wishes to place an order and actually allowing him to do so involve several steps. </s>
<s n="s2.6;p35.75">First of all, a message outputted on the screen should ask the user if he wants to place an order. </s>
<s n="s3.6;p35.75">Assuming the answer is yes, the program should then ask him if he wishes to add a product. </s>
<s n="s4.6;p35.75">If yes, the program should give the user the opportunity to enter a product name in order to place the order. </s>
<s n="s5.6;p35.75">If the name matches one of the records, the details should appear on the screen and the user should enter the quantity of products he wishes to order (when he is asked to do so). </s>
<s n="s6.6;p35.75">An update of the stock available and the total cost will be made at that point. </s>
</p>
<p rend="bulleted" n="p36.75">
<s n="s1.1;p36.75">The program will need to subtract the value of the stock available with the quantity of product ordered. </s>
</p>
<p rend="bulleted" n="p37.75">
<s rend="bold" n="s1.1;p37.75">Stock Available = Stock Available - Quantity Ordered </s>
</p>
<p rend="bulleted" n="p38.75">
<s n="s1.1;p38.75">The program will need to add the total cost value to the multiplication of the cost of product entered by the quantity ordered. </s>
</p>
<p rend="bulleted" n="p39.75">
<s rend="bold" n="s1.1;p39.75">Total Cost = Total Cost + (Product Price * Quantity Ordered) </s>
</p>
<p rend="bulleted" n="p40.75">
<s n="s1.1;p40.75">The program will loop this as long as the user wants to keep adding products to the order. </s>
</p>
<p rend="bulleted" n="p41.75">
<s n="s1.1;p41.75">
<hi rend="underlined">Display total cost:</hi> at the end of the program, once the user has finished adding products to his order, the total cost of the order has to be shown (in pence). </s>
</p>
<p rend="bulleted" n="p42.75">
<s n="s1.3;p42.75">
<hi rend="underlined">Ask if user wishes to place another order:</hi> after having shown the total cost of the order, the program will have to ask the user if he wishes to place a new order. </s>
<s n="s2.3;p42.75">If he answers yes, the program should simply loop and restart where the user has the opportunity to add a product to the order. </s>
<s n="s3.3;p42.75">If he does not want to, the program should end. </s>
</p>
<div2>
<head rend="underlined bold italic">Refined pseudocode</head>
<table id="BAWE_3026b-tab.003">
<row>
<cell/>
</row>
</table>
<figure id="BAWE_3026b-pic.001">
<head rend="bold">Check for algorithm correctness on following page:Check for algorithm correctness (trace table)</head>
</figure>
<table id="BAWE_3026b-tab.004">
<head rend="underlined">Entering products details</head>
<row>
<cell/>
</row>
</table>
<p n="p43.75">
<s n="s1.4;p43.75">
<hi rend="underlined bold italic">Note:</hi> As you can see above, the truth table can be applied to the three products details. </s>
<s n="s2.4;p43.75">Although, the statements shown in the table are only applicable for the first product. </s>
<s n="s3.4;p43.75">These will be different for the two other products. </s>
<s n="s4.4;p43.75">For the right statements, compare with the refined pseudocode (page 7 &amp; 8). </s>
</p>
<table id="BAWE_3026b-tab.005">
<head rend="underlined">Placing orders (until product details are shown)</head>
<row>
<cell/>
</row>
</table>
<table id="BAWE_3026b-tab.006">
<head rend="underlined">Placing orders (entering quantity and showing total cost)</head>
<row>
<cell/>
</row>
</table>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Refine and develop the algorithm &amp; pseudocode to deal with all conditions</head>
<div2>
<head rend="underlined">Part 1 - Record Type and global variables</head>
<p n="p44.75">
<s n="s1.4;p44.75">As required by the specification, I have to use records, procedures and parameters passing for this work. </s>
<s n="s2.4;p44.75">The easiest and most effective way for me is to use one record type (which can be done in this case as the three records will have exactly the same fields) which I would relate with an array [1.. </s>
<s n="s3.4;p44.75">3]. </s>
<s n="s4.4;p44.75">The big advantage of doing this is that I will allow me to store three different records and avoid repeating the same code many times. </s>
</p>
<table id="BAWE_3026b-tab.007">
<row>
<cell/>
</row>
</table>
</div2>
<div2>
<head rend="underlined">Part 2 - Dividing the implementation of the code into procedures</head>
<p n="p45.75">
<s n="s1.2;p45.75">In order to find what should be part of a procedure in the program, the best thing to do is to try to identify the different tasks that it needs to carry out. </s>
<s n="s2.2;p45.75">These are: </s>
</p>
<list type="ordered">
<item>Introduce program</item>
<item>Ask user to enter the products details</item>
<item>Place an order</item>
<item rend="italic">Ask the user if he wishes to place an order</item>
<item rend="italic">Ask the user if he wishes to add a product to the order</item>
<item rend="italic">Enter Name of product</item>
<item>Show product details</item>
<item>Update Stock</item>
<item rend="italic">Enter quantity of product to order</item>
<item rend="italic">Update stock value with what has been ordered</item>
<item>Calculate Total Cost</item>
<item>Display Total Cost</item>
</list>
<p n="p46.75">
<s n="s1.3;p46.75">As you can see above, the program can easily be spread into 7 tasks. </s>
<s n="s2.3;p46.75">We could use this as an example to spread the work in procedures. </s>
<s n="s3.3;p46.75">First of all, the 1 <hi rend="sup">st</hi> task do not really need a procedure as it should be included in the "main body" of the program (begin end.). </s>
</p>
<p n="p47.75">
<s n="s1.3;p47.75">Secondly, the code for asking the products details should be in a procedure because it will need to be run at least 3 times to enter all the details. </s>
<s n="s2.3;p47.75">When calling the procedure, a "for loop" could be used instead of calling the procedure three times. </s>
<s n="s3.3;p47.75">This can be done thanks to the array and the position global variables that have been declared. </s>
</p>
<p n="p48.75">
<s n="s1.6;p48.75">The second procedure could be used to start the order placement. </s>
<s n="s2.6;p48.75">It will first ask the user if he wants to place an order, if yes, it will then ask him if he wants to add a product. </s>
<s n="s3.6;p48.75">If his answer is yes, the order placement will then began with entering the name of the product. </s>
<s n="s4.6;p48.75">This procedure could in fact contain all the other tasks of the program but it would make it more difficult to understand. </s>
<s n="s5.6;p48.75">This is why this procedure could call other procedures to make it easier. </s>
<s n="s6.6;p48.75">So, the last task before making any calls will be to check that the product entered does exist. </s>
</p>
<p n="p49.75">
<s n="s1.2;p49.75">The other procedures are as shown above. </s>
<s n="s2.2;p49.75">There will be one to: </s>
</p>
<list type="bulleted">
<item>Show the product details when ordering</item>
<item>Update the stock with the amount of products that has been ordered</item>
<item>Calculate the Total Cost</item>
<item>Display the Total Cost</item>
</list>
</div2>
<div2>
<head rend="underlined">Part 3 - Main body of the program (Point 1 in Refined Pseudocode)</head>
<table id="BAWE_3026b-tab.008">
<row>
<cell/>
</row>
</table>
<p n="p50.75"/>
</div2>
<div2>
<head rend="underlined">Part 4 - Procedure to enter product details (Points 2, 3 and 4 in Refined Pseudocode)</head>
<table id="BAWE_3026b-tab.009">
<row>
<cell/>
</row>
</table>
<p n="p51.75"/>
</div2>
<div2>
<head rend="underlined">Part 5 - Procedure to place order(s) (Points 5 to 5.1.6.2 in Refined Pseudocode)</head>
<table id="BAWE_3026b-tab.010">
<row>
<cell/>
</row>
</table>
<p n="p52.75"/>
</div2>
<div2>
<head rend="underlined">Part 6 - Procedure to show the product details (Point 5.7 in Refined Pseudocode)</head>
<table id="BAWE_3026b-tab.011">
<row>
<cell/>
</row>
</table>
<p n="p53.75"/>
</div2>
<div2>
<head rend="underlined">Part 7 - Procedure to update the stock (Points 5.8 to 6.1 in Refined Pseudocode)</head>
<table id="BAWE_3026b-tab.012">
<row>
<cell/>
</row>
</table>
<p n="p54.75"/>
</div2>
<div2>
<head rend="underlined">Part 8 - Procedure to calculate the cost (Point 7 in Refined Pseudocode)</head>
<table id="BAWE_3026b-tab.013">
<row>
<cell/>
</row>
</table>
<p n="p55.75"/>
</div2>
<div2>
<head rend="underlined">Part 9 - Procedure to display the cost (Point 9 in Refined Pseudocode)</head>
<table id="BAWE_3026b-tab.014">
<row>
<cell/>
</row>
</table>
<p n="p56.75"/>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Data Dictionary</head>
<div2>
<head>Record Type variables</head>
<table id="BAWE_3026b-tab.015">
<row>
<cell/>
</row>
</table>
<p n="p57.75"/>
</div2>
<div2>
<head>Global variables</head>
<table id="BAWE_3026b-tab.016">
<row>
<cell/>
</row>
</table>
<p n="p58.75"/>
</div2>
<div2>
<head>Procedure PlaceOrder (local variables)</head>
<table id="BAWE_3026b-tab.017">
<row>
<cell/>
</row>
</table>
<p n="p59.75"/>
</div2>
<div2>
<head>Procedure Show_details (local variables)</head>
<table id="BAWE_3026b-tab.018">
<row>
<cell/>
</row>
</table>
<p n="p60.75"/>
</div2>
<div2>
<head>Procedure Update_stock (local variables)</head>
<table id="BAWE_3026b-tab.019">
<row>
<cell/>
</row>
</table>
<p n="p61.75"/>
</div2>
<div2>
<head>Procedure Calculate_Cost (local variables)</head>
<table id="BAWE_3026b-tab.020">
<row>
<cell/>
</row>
</table>
<p n="p62.75"/>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Delphi Program Final Source Code (including comments)</head>
<table id="BAWE_3026b-tab.021">
<row>
<cell/>
</row>
</table>
<table id="BAWE_3026b-tab.022">
<head rend="bold">Delphi Program Final Source Code (including comments)</head>
<row>
<cell/>
</row>
</table>
<table id="BAWE_3026b-tab.023">
<head rend="bold">Delphi Program Final Source Code (including comments)</head>
<row>
<cell/>
</row>
</table>
<table id="BAWE_3026b-tab.024">
<head rend="bold">Delphi Program Final Source Code (including comments)</head>
<row>
<cell/>
</row>
</table>
<div2>
<head rend="underlined bold">Notes on Source Code</head>
<p n="p63.75">
<s n="s1.5;p63.75">You will notice that the order of the records, global variables declaration, procedures and main body of the program has changed a little bit. </s>
<s n="s2.5;p63.75">This is simply because in order (for the program) to be able to recognize all the names, procedures, etc... it needs to be written in a specific order. </s>
<s n="s3.5;p63.75">In fact, it simply has to be declared before using it. </s>
<s n="s4.5;p63.75">Although, the program also needs to show the different steps of the orders placement in the right order. </s>
<s n="s5.5;p63.75">This can simply be done by calling the appropriate procedure at the appropriate time. </s>
</p>
<p n="p64.75">
<s n="s1.6;p64.75">So in the program, I had to first declare the record type. </s>
<s n="s2.6;p64.75">Then, it uses it by declaring the global variable P which is a variable of the type of the record declared before. </s>
<s n="s3.6;p64.75">Secondly the program needs the user to enter the products details. </s>
<s n="s4.6;p64.75">Then, the program will call the PlaceOrder procedure to start the ordering process. </s>
<s n="s5.6;p64.75">But if you look in that particular procedure, you will notice that it calls four other procedures within it. </s>
<s n="s6.6;p64.75">This means that those four pieces of code <hi rend="bold">must</hi> be declared before the PlaceOrder procedure otherwise the program will not be able to run as it will not recognize them. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Testing Documentation</head>
<div2>
<head rend="underlined">List of Test Cases &amp; Test Plans</head>
<list type="ordered">
<head rend="bold italic">Asking Product 1:</head>
<item>Enter a name.</item>
<item>Enter an ID in the range 1000-1999.</item>
<item>Enter the ID (1999) on the upper boundary of the range 1000-1999. </item>
<item>Enter the ID (1000) on the lower boundary of the range 1000-1999.</item>
<item>Enter 2000 to see if range works as it should.</item>
<item>Enter 999 to see if range works as it should.</item>
<item>Enter an ID too big for the range.</item>
<item>Enter an ID too small for the range.</item>
<item>Enter a cost higher than 0.</item>
<item>Enter a cost of 0 (to test boundary limit).</item>
<item>Enter a cost of -1 (to test boundary limit).</item>
<item>Enter a cost of -58.</item>
<item>Enter a stock higher than 0.</item>
<item>Enter a stock of 0.</item>
<item>Enter a stock of -1 (to test boundary limit).</item>
<item>Enter a stock of -58.</item>
</list>
<table id="BAWE_3026b-tab.025">
<row>
<cell/>
</row>
</table>
<list type="ordered">
<head rend="bold italic">Asking Product 2:</head>
<item>Enter a name.</item>
<item>Enter an ID in the range 1000-1999.</item>
<item>Enter the ID (1999) on the upper boundary of the range 1000-1999. </item>
<item>Enter the ID (1000) on the lower boundary of the range 1000-1999.</item>
<item>Enter 2000 to see if range works as it should.</item>
<item>Enter 999 to see if range works as it should.</item>
<item>Enter an ID too big for the range.</item>
<item>Enter an ID too small for the range.</item>
<item>Enter a cost higher than 0.</item>
<item>Enter a cost of 0 (to test boundary limit).</item>
<item>Enter a cost of -1 (to test boundary limit).</item>
<item>Enter a cost of -58.</item>
<item>Enter a stock higher than 0.</item>
<item>Enter a stock of 0.</item>
<item>Enter a stock of -1 (to test boundary limit).</item>
<item>Enter a stock of -58.</item>
</list>
<table id="BAWE_3026b-tab.026">
<row>
<cell/>
</row>
</table>
<list type="ordered">
<head rend="bold italic">Asking Product 3:</head>
<item>Enter a name.</item>
<item>Enter an ID in the range 1000-1999.</item>
<item>Enter the ID (1999) on the upper boundary of the range 1000-1999. </item>
<item>Enter the ID (1000) on the lower boundary of the range 1000-1999.</item>
<item>Enter 2000 to see if range works as it should.</item>
<item>Enter 999 to see if range works as it should.</item>
<item>Enter an ID too big for the range.</item>
<item>Enter an ID too small for the range.</item>
<item>Enter a cost higher than 0.</item>
<item>Enter a cost of 0 (to test boundary limit).</item>
<item>Enter a cost of -1 (to test boundary limit).</item>
<item>Enter a cost of -58.</item>
<item>Enter a stock higher than 0.</item>
<item>Enter a stock of 0.</item>
<item>Enter a stock of -1 (to test boundary limit).</item>
<item>Enter a stock of -58.</item>
</list>
<table id="BAWE_3026b-tab.027">
<row>
<cell/>
</row>
</table>
<list type="ordered">
<head rend="bold italic">Placing Orders:</head>
<item>Place an order by entering 'y' when asked.</item>
<item>End the program by entering 'n' when asked if I want to place an order.</item>
<item>Add a product to order by entering 'y' when asked.</item>
<item>Stop adding product to order by entering 'n' when asked.</item>
<item>Enter a name of product that does not exist (assuming prod names are: 1, 2 and 3).</item>
<item>Enter a correct name of product (assuming prod names are: 1, 2 and 3).</item>
<item>Input a quantity to order of -5.</item>
<item>Input a quantity to order of -1 (to test boundary limit).</item>
<item>Input a quantity to order of 0 (to test lower boundary limit).</item>
<item>Input a quantity to order higher than the stock available (assuming 3 are available).</item>
<item>Input a quantity to order higher or equal to 0 &amp; smaller or equal to the stock available (assuming 3 are available).</item>
<item>Assuming that I have ordered 5 products that cost each 20p, enter 'n' when asked if I want to add another product and see what happens.</item>
<item>When the thank you message appears, press any key then the enter key and see what happens.</item>
</list>
<table id="BAWE_3026b-tab.028">
<row>
<cell/>
</row>
</table>
<p n="p65.75"/>
</div2>
<div2>
<head rend="underlined">Screenshots of Tests</head>
<figure id="BAWE_3026b-pic.002">
<head rend="bold">See next page for screenshots</head>
</figure>
<div3>
<head rend="underlined">Test - Asking Products Details </head>
<figure id="BAWE_3026b-pic.003">
<head rend="underlined">Test A </head>
</figure>
<figure id="BAWE_3026b-pic.004">
<head rend="underlined">Test B &amp; C </head>
</figure>
<figure id="BAWE_3026b-pic.005">
<head rend="underlined">Test D </head>
</figure>
<figure id="BAWE_3026b-pic.006">
<head rend="underlined">Test E &amp; G </head>
</figure>
<figure id="BAWE_3026b-pic.007">
<head rend="underlined">Test F &amp; H</head>
</figure>
<figure id="BAWE_3026b-pic.008">
<head rend="underlined">Test I</head>
</figure>
<figure id="BAWE_3026b-pic.009">
<head rend="underlined">Test J </head>
</figure>
<figure id="BAWE_3026b-pic.010">
<head rend="underlined">Test K &amp; L</head>
</figure>
<figure id="BAWE_3026b-pic.011">
<head rend="underlined">Test M</head>
</figure>
<figure id="BAWE_3026b-pic.012">
<head rend="underlined">Test N</head>
</figure>
<figure id="BAWE_3026b-pic.013">
<head rend="underlined">Test O &amp; P</head>
</figure>
<figure id="BAWE_3026b-pic.014">
<head rend="underlined">Test Asking Prod.3 - M</head>
</figure>
<p n="p66.75">
<s n="s1.3;p66.75">As you can see above, the screenshots demonstrate that asking the product 1 details works perfectly fine. </s>
<s n="s2.3;p66.75">There is no need to show the product 2 and 3 details as it uses exactly the same piece of code in the program (ask products procedure - se Delphi source code). </s>
<s n="s3.3;p66.75">The only test that I also did to test the program is entering a correct value for the stock value of product 3 to see if the program continued with the placing orders process (see last screenshot on this page). </s>
</p>
</div3>
<div3>
<head rend="underlined">Test - Placing orders </head>
<figure id="BAWE_3026b-pic.015">
<head rend="underlined">Test A </head>
</figure>
<figure id="BAWE_3026b-pic.016">
<head rend="underlined">Test B </head>
</figure>
<figure id="BAWE_3026b-pic.017">
<head rend="underlined">Test C </head>
</figure>
<figure id="BAWE_3026b-pic.018">
<head rend="underlined">Test D </head>
</figure>
<figure id="BAWE_3026b-pic.019">
<head rend="underlined">Test E </head>
</figure>
<figure id="BAWE_3026b-pic.020">
<head rend="underlined">Test F </head>
</figure>
<figure id="BAWE_3026b-pic.021">
<head rend="underlined">Test G &amp; H</head>
</figure>
<figure id="BAWE_3026b-pic.022">
<head rend="underlined">Test I</head>
</figure>
<figure id="BAWE_3026b-pic.023">
<head rend="underlined">Test J</head>
</figure>
<figure id="BAWE_3026b-pic.024">
<head rend="underlined">Test K</head>
</figure>
<figure id="BAWE_3026b-pic.025">
<head rend="underlined">Test L</head>
</figure>
<p n="p67.75"/>
</div3>
</div2>
<div2>
<head rend="underlined">Solutions to problem(s)</head>
<p n="p68.75">
<s n="s1.4;p68.75">As indicated in the Test Plan, three problems appeared when implementing and running the program. </s>
<s n="s2.4;p68.75">The problem was that the program would not accept 1000 as an ID for any of the product details. </s>
<s n="s3.4;p68.75">This was quite important as it did not match the specification requirement. </s>
<s n="s4.4;p68.75">In order to solve this problem, here are the steps that I followed: </s>
</p>
<list type="bulleted">
<head>Check the pseudocode to make sure that what was written is correct</head>
<item>Compare with other marks procedure and see if there are any abnormal differences.</item>
<item>If everything is normal, check the Delphi source code and make sure that it matches the final refined pseudocode.</item>
<item>Apply the required changes to make the program work properly.</item>
</list>
<p n="p69.75">
<s n="s1.3;p69.75">In this case, the source code that I wrote in Delphi did not match the pseudocode. </s>
<s n="s2.3;p69.75">It says in the pseudocode that while the ID entered is smaller than 1000 or greater than 1999 then, it is incorrect. </s>
<s n="s3.3;p69.75">When I checked my Delphi code, it is this statement that was wrong in the "ask product" procedure: </s>
</p>
<p n="p70.75">
<s n="s1.1;p70.75">
<formula notation="" id="BAWE_3026b-form.010"/> </s>
</p>
<p n="p71.75">
<s n="s1.1;p71.75">If you compare to the pseudocode version of this piece of code, you will easily understand where the mistake is: </s>
</p>
<p n="p72.75">
<s n="s1.1;p72.75">
<formula notation="" id="BAWE_3026b-form.011"/> </s>
</p>
<p n="p73.75">
<s n="s1.1;p73.75">The wrong version, does not accept 1000 and 1999 as an ID. On the other hand, the one from the pseudocode does accept it. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold italic">Solving the problem &amp; Final Result Evaluation</head>
<p n="p74.75">
<s n="s1.3;p74.75">To solve the problem once and for all, all I had to do is to modify the wrong piece of information from the Delphi source code. </s>
<s n="s2.3;p74.75">I could then compile the program and run it again to check that it was working as expected. </s>
<s n="s3.3;p74.75">If you look at the screenshots, you will see a proof that the program works as expected as it accepted the appropriate ID's. </s>
</p>
<p n="p75.75">
<s n="s1.2;p75.75">Finally, you will also notice that the program matches perfectly the program specification and design that was planned. </s>
<s n="s2.2;p75.75">If you compare the final version from the screenshots with the third consideration of the program, trace table and the testing, you will see that they match really well. </s>
</p>
</div1>
</body>
<back/>
</text>
</TEI.2>
