<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6146f" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>DSP in Communications</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: module name; module code; student name. Page footer contains: date; page number. </note>
</notesStmt>
<sourceDesc>
<p n="level">3</p>
<p n="date">2006-04</p>
<p n="module title">DSP in digital communications</p>
<p n="module code">EE3G2</p>
<p n="genre family">Design specification</p>
<p n="discipline">Cybernetics &amp; Electronic Engineering</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">6984</p>
<p n="number of s-units">353</p>
<p n="number of p">148</p>
<p n="number of tables">3</p>
<p n="number of figures">23</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">4</p>
<p n="number of lists">5</p>
<p n="number of paragraphs formatted like lists">19</p>
<p n="abstract present">abstract present</p>
<p n="average words per s-unit">19.8</p>
<p n="average s-units per p">2.4</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1985</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">Electronic Engineering</p>
<p n="student ID">6146</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart rend="bold">DSP in Communications</titlePart>
</docTitle>
<titlePart>
<name type="student name"/>
<name type="other"/> EE3G2 Electronic Engineering MEng April 2006 School of Systems Engineering<name type="university"/> UK</titlePart>
</titlePage>
<div1 type="toc" n="3">
<head rend="bold">Table of Contents</head>
<p/>
</div1>
<div1 type="toc" n="1">
<head rend="bold">Index of Figures</head>
<p/>
</div1>
<div1 type="toc" n="1">
<head rend="bold">Index of Tables</head>
<p/>
</div1>
<div1 type="front text">
<head rend="bold">Glossary</head>
<list type="simple">
<item>Pseudo-random appearing to be random, but over a long period of time a pattern will emerge. If the generation technique and the starting point of a pseudo-random sequence are known, then the exact sequence can be recreated.</item>
<item>SNR Signal to noise ratio. Usually stated in decibels.</item>
<item>DVB Digital Video Broadcasting. Standardised coding and modulation schemes for digital television in Europe.</item>
<item>DAB Digital Audio Broadcasting. The (almost) international standard for digital radio. The notable exception is the US, which has adopted a different scheme.</item>
</list>
<p/>
</div1>
</front>
<body>
<div1 type="abstract">
<head rend="bold">Summary</head>
<p n="p1.148">
<s n="s1.1;p1.148">When designing a communications system or defining a communications standard, a model </s>
</p>
<p n="p2.148">
<s n="s1.2;p2.148">would be used to see test how different variations would perform in certain scenarios. </s>
<s n="s2.2;p2.148">This </s>
</p>
<p n="p3.148">
<s n="s1.1;p3.148">project built up such a model to compare a range of modulation schemes and error protection </s>
</p>
<p n="p4.148">
<s n="s1.2;p4.148">methods. </s>
<s n="s2.2;p4.148">The knowledge gained from this process enabled the full analysis of a complete </s>
</p>
<p n="p5.148">
<s n="s1.1;p5.148">802.11a model at the end of the project. </s>
</p>
<p n="p6.148">
<s n="s1.1;p6.148">The main performance gauge used in this project was a systems ability to cope with channel </s>
</p>
<p n="p7.148">
<s n="s1.2;p7.148">noise. </s>
<s n="s2.2;p7.148">3 types of channel noise were studied, additive white Gaussian noise, flat fading and </s>
</p>
<p n="p8.148">
<s n="s1.1;p8.148">dispersive fading. </s>
</p>
<p n="p9.148">
<s n="s1.1;p9.148">BPSK, QPSK, 16-PSK, 16-QAM and 64-QAM modulation schemes were compared, using </s>
</p>
<p n="p10.148">
<s n="s1.2;p10.148">bit error rate curves and packet error rate curves. </s>
<s n="s2.2;p10.148">Bit error rates were calculated by comparing </s>
</p>
<p n="p11.148">
<s n="s1.2;p11.148">the demodulated message with the original source message. </s>
<s n="s2.2;p11.148">Packet error rates were calculated </s>
</p>
<p n="p12.148">
<s n="s1.1;p12.148">at the receiver using a 16-bit CRC added to the end of each packet. </s>
</p>
<p n="p13.148">
<s n="s1.2;p13.148">The system model also includes convolutional coding, a type of forward error correction. </s>
<s n="s2.2;p13.148">Two </s>
</p>
<p n="p14.148">
<s n="s1.2;p14.148">types of codes were analysed. </s>
<s n="s2.2;p14.148">A simple 3,[7,5] code was used to explain the principles of </s>
</p>
<p n="p15.148">
<s n="s1.1;p15.148">convolutional coding, but the main focus of the project was on 7,[171,133] NASA coding, </s>
</p>
<p n="p16.148">
<s n="s1.2;p16.148">which is very common. </s>
<s n="s2.2;p16.148">Messages were decoded using a Viterbi decoder. </s>
</p>
<p n="p17.148">
<s n="s1.1;p17.148">The 802.11a model, supplied as a demo with MatLab, brings together all the system </s>
</p>
<p n="p18.148">
<s n="s1.1;p18.148">components discussed in this project, along with a multi-carrier multiplexing technique </s>
</p>
<p n="p19.148">
<s n="s1.1;p19.148">known as orthogonal frequency division multiplexing (OFDM). </s>
</p>
<p n="p20.148">
<s n="s1.2;p20.148">The model was implemented in Simulink. </s>
<s n="s2.2;p20.148">Explanations and justifications for each component </s>
</p>
<p n="p21.148">
<s n="s1.1;p21.148">of the model are given. </s>
</p>
<p n="p22.148">
<s n="s1.1;p22.148">The conclusions section of this report covers common issues and decisions that are faced </s>
</p>
<p n="p23.148">
<s n="s1.1;p23.148">when designing a communications system, and some recommendations for further modelling </s>
</p>
<p n="p24.148">
<s n="s1.1;p24.148">work are given at the end. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Introduction</head>
<p n="p25.148">
<s n="s1.3;p25.148">As the majority of communications head into digital territory, digital signal processing is playing an ever larger role. </s>
<s n="s2.3;p25.148">Radio frequencies are becoming more crowded and services are requiring greater data rates, resulting in the realization of more complex modulation and coding schemes. </s>
<s n="s3.3;p25.148">Several stages of modulation and coding are often combined to maximise performance, and all this must be done inside a digital signal processor. </s>
</p>
<p n="p26.148">
<s n="s1.1;p26.148">During the development of a communications system the manufacturer hopes to achieve: </s>
</p>
<list type="bulleted">
<item>resilience to noise and signal echoes</item>
<item>fast data rates</item>
<item>reliable data delivery</item>
<item>lower costs</item>
</list>
<p n="p27.148">
<s n="s1.2;p27.148">Clearly the above requirements conflict, and there must be a trade-off. </s>
<s n="s2.2;p27.148">A manufacturer will use a system model to examine what modulation and coding schemes are available to give the best balance of the requirements. </s>
</p>
<p n="p28.148">
<s n="s1.1;p28.148">This project will build a complete model of the physical layer of a communications system, from a serial binary source to a serial binary output at a receiver, and analyse the complete 802.11a wireless LAN model. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Design Philosophy</head>
<div2>
<head rend="bold italic">Noise</head>
<p n="p29.148">
<s n="s1.5;p29.148">Every signal which is transmitted through the atmosphere is subjected to atmospheric noise, the single most detrimental factor in most communications systems. </s>
<s n="s2.5;p29.148">However, there is also noise generated inside the electronic equipment itself, such as shot noise (which is caused by the movements of discrete charge carriers instead of an ideal smooth current). </s>
<s n="s3.5;p29.148">The various types of noise all roughly follow a Gaussian distribution, which means they can be combined and included as one element in the system model. </s>
<s n="s4.5;p29.148">In practice, the noise power would stay roughly constant, and the signal power would vary depending upon quality of reception. </s>
<s n="s5.5;p29.148">However, it is simpler to model by maintaining constant signal power and varying the level of Gaussian white noise added to it, the approach used in this project. </s>
</p>
<p n="p30.148">
<s n="s1.1;p30.148">Fortunately digital signals are inherently more resistant to noise than their analog counterparts, and the rest of this report will demonstrate the methods used to counteract the problem of noise. </s>
</p>
</div2>
<div2>
<head rend="bold italic">Digital modulation</head>
<p n="p31.148">
<s n="s1.1;p31.148">For several reasons, in order to transmit a digital signal over an analog wave guide, such as a radio wave, it must be modulated: </s>
</p>
<p rend="bulleted" n="p32.148">
<s n="s1.1;p32.148">A binary signal will contain a DC offset, which should be removed before transmission. </s>
</p>
<p rend="bulleted" n="p33.148">
<s n="s1.1;p33.148">Without modulation the natural analog representation of a binary zero appears no different to if there were no signal received at all. </s>
</p>
<p rend="bulleted" n="p34.148">
<s n="s1.1;p34.148">The bandwidth of a digital waveform is theoretically infinite, and must be reduced to make its transmission practical. </s>
</p>
<p rend="bulleted" n="p35.148">
<s n="s1.1;p35.148">Transmissions must be modulated to the frequency band which has been licensed by the appropriate governing body. </s>
</p>
<p n="p36.148">
<s n="s1.1;p36.148">The system model was designed to use five common types of digital modulation: </s>
</p>
<list type="bulleted">
<item>BPSK (Bi-Phase Shift Keying)</item>
<item>QPSK (Quadrature Phase Shift Keying )</item>
<item>16-PSK</item>
<item>16-QAM (Quadrature Amplitude Modulation )</item>
<item>64-QAM</item>
</list>
<p n="p37.148">
<s n="s1.4;p37.148">All of these modulation schemes have been implemented in many communications standards, such as the 802.11a wireless networking standard. </s>
<s n="s2.4;p37.148">They all involve converting the binary signal into complex symbols (i.e. numbers with a real and imaginary part). </s>
<s n="s3.4;p37.148">Complex numbers can be represented by a magnitude and a phase, which makes them perfect for modulating an analog carrier frequency. </s>
<s n="s4.4;p37.148">There are other modulation schemes that do not work in this way, but they will not be discussed here as they are far less common. </s>
</p>
<div3>
<head rend="underlined">BPSK (1 bit per symbol)</head>
<p n="p38.148">
<s n="s1.2;p38.148">The binary data is modulated to a carrier at constant amplitude. </s>
<s n="s2.2;p38.148">The phase will be ordinary to represent a binary zero, or inverted 180 degrees for a binary 1. </s>
</p>
</div3>
<div3>
<head rend="underlined">QPSK (2 bits per symbol)</head>
<p n="p39.148">
<s n="s1.5;p39.148">The binary values are taken in pairs, so that each pair can represent 1 of 4 combinations. </s>
<s n="s2.5;p39.148">The 4 symbols have the same amplitude, but are phase shifted to be 90 degrees apart from each other. </s>
<s n="s3.5;p39.148">This is the meaning of quadrature. </s>
<s n="s4.5;p39.148">The complex values are chosen so that they all have a real component, as shown on the argand diagram Figure 2.1. </s>
<s n="s5.5;p39.148">Otherwise, a complex symbol with no real part would in practice have zero power, and could not be transmitted. </s>
</p>
<p n="p40.148">
<s n="s1.1;p40.148">Since the binary values are modulated in pairs, the baud rate of this scheme is double that of BPSK. To compensate, the resilience to noise is lower. </s>
</p>
<figure id="BAWE_6146f-fig.001">
<head rend="italic">Figure 2.1: QPSK Argand diagram</head>
</figure>
</div3>
<div3>
<head rend="underlined">16-PSK (4 bits per symbol)</head>
<p n="p41.148">
<s n="s1.4;p41.148">The expansion of BPSK to QPSK is taken a step further. </s>
<s n="s2.4;p41.148">The binary bits are grouped into sets of 4, each representing 1 of 16 combinations. </s>
<s n="s3.4;p41.148">This modulation scheme is mathematically sound, but the phase difference between adjacent symbols is fairly small, as can be seen in Figure 2.2. </s>
<s n="s4.4;p41.148">This can yield a bad SNR at the receiver, and so this scheme would often be replaced by 16-QAM. </s>
</p>
<figure id="BAWE_6146f-fig.002">
<head rend="italic">Figure 2.2: 16-PSK Argand diagram</head>
</figure>
</div3>
<div3>
<head rend="underlined">16-QAM (4 bits per symbol)</head>
<p n="p42.148">
<s n="s1.4;p42.148">Increasing the number of bits per symbol any further with a PSK system would result in a modulation scheme that is not much use in any type of noisy environment. </s>
<s n="s2.4;p42.148">Instead the power level of each symbol is adjusted to distinguish more clearly between adjacent symbols, see Figure 2.3. </s>
<s n="s3.4;p42.148">When setting a power level to use for a QAM scheme, the average power is used. </s>
<s n="s4.4;p42.148">16-QAM performs favourably compared with 16-PSK. </s>
</p>
<figure id="BAWE_6146f-fig.003">
<head rend="italic">Figure 2.3: 16-QAM Argand diagram</head>
</figure>
</div3>
<div3>
<head rend="underlined">64-QAM (6 bits per symbol)</head>
<p n="p43.148">
<s n="s1.1;p43.148">In optimal noise conditions this scheme can provide a data rate 6 times faster than BPSK. </s>
</p>
</div3>
</div2>
<div2>
<head rend="bold italic">Convolutional coding</head>
<p n="p44.148">
<s n="s1.1;p44.148">Convolutional coding is one of many coding methods that add redundancy to a signal in order to make its transmission more reliable. </s>
</p>
<div3>
<head rend="bold">Encoding</head>
<p n="p45.148">
<s n="s1.3;p45.148">The encoding process is often implemented as, and best visualised as, a shift register with taps taken off at some of the flip-flops. </s>
<s n="s2.3;p45.148">The bits from these taps are modulo-2 added to produce two encoded bit streams, grouped together as one symbol. </s>
<s n="s3.3;p45.148">The system model was tested with two convolutional codes: </s>
</p>
<p n="p46.148">
<s n="s1.1;p46.148">
<formula notation="" id="BAWE_6146f-form.001"/> </s>
</p>
<p n="p47.148">
<s n="s1.1;p47.148">
<formula notation="" id="BAWE_6146f-form.002"/> </s>
</p>
<p n="p48.148">
<s n="s1.7;p48.148">The latter is known as NASA convolutional code. </s>
<s n="s2.7;p48.148">The former is an arbitrary, simple code designed for this project. </s>
<s n="s3.7;p48.148">In each notation, the first number is the number of flip-flops that are in the shift register. </s>
<s n="s4.7;p48.148">The numbers in square brackets are octal representations of where the taps are placed along the shift register in order to produce the two output symbols. </s>
<s n="s5.7;p48.148">Taking the example 3, [7,5] gives the encoder shown in Figure 2.4. </s>
<s n="s6.7;p48.148">Note the octal number 7 is 111b in binary, and each tap is used to create the first symbol, C <hi rend="sub">0</hi>. </s>
<s n="s7.7;p48.148">The octal number 5 is 101b, thus only the first and last taps are used to create the second symbol, C <hi rend="sub">1</hi>. </s>
</p>
<figure id="BAWE_6146f-fig.004">
<head rend="italic">Figure 2.4: 3,[7,5] convolutional encoder</head>
</figure>
<p n="p49.148">
<s n="s1.3;p49.148">Both of the convolutional codes mentioned in the previous paragraph are called half-rate coding schemes. </s>
<s n="s2.3;p49.148">This describes the way that the encoder will take 1 input bit and create 2 output bits, as in Figure 2.4. </s>
<s n="s3.3;p49.148">There are other fraction-rate schemes, but half-rate is the most common. </s>
</p>
</div3>
<div3>
<head rend="bold">Decoding</head>
<p n="p50.148">
<s n="s1.2;p50.148">The Viterbi algorithm is most commonly used to decode signals that have undergone convolutional coding. </s>
<s n="s2.2;p50.148">The algorithm is complicated, but an outline of the process should suffice for comprehension of this report: </s>
</p>
<p rend="bulleted" n="p51.148">
<s n="s1.1;p51.148">The decoder waits for a predetermined number of symbols. </s>
</p>
<p rend="bulleted" n="p52.148">
<s n="s1.1;p52.148">Starting with the last received symbol, it employs a statistic process of estimating the previous symbols, known as a traceback. </s>
</p>
<p rend="bulleted" n="p53.148">
<s n="s1.1;p53.148">The process can be visualised most easily as a trellis, and is sometimes called a trellis decoder. </s>
</p>
<p rend="bulleted" n="p54.148">
<s n="s1.1;p54.148">Symbol errors can be overcome, because the decoder will decide that a different symbol was more likely. </s>
</p>
<p n="p55.148">
<s n="s1.2;p55.148">The Viterbi decoder will be the same for any convolutional code, it just needs the parameters of the code in use. </s>
<s n="s2.2;p55.148">The decoding process introduces a delay because the traceback outputs symbols in reverse order. </s>
</p>
</div3>
<div3>
<head rend="bold">Puncturing</head>
<p n="p56.148">
<s n="s1.2;p56.148">Puncturing is a technique used to increase data rate at the expense of noise immunity, by removing a regular pattern of symbols just after convolutional coding is carried out. </s>
<s n="s2.2;p56.148">It is a method of fine tuning the data rate, to obtain maximum throughput from a given coding and modulation scheme, which might otherwise exhibit an unnecessary level of redundancy. </s>
</p>
<p n="p57.148">
<s n="s1.3;p57.148">Recalling that coding schemes can be desribed by a rate. </s>
<s n="s2.3;p57.148">The convolutional codes in this project are half-rate. </s>
<s n="s3.3;p57.148">Puncturing will alter the coding rate of the scheme as shown in equation 1. </s>
</p>
<p n="p58.148">
<s n="s1.1;p58.148">
<formula notation="" id="BAWE_6146f-form.003"/> </s>
</p>
<p n="p59.148">
<s n="s1.1;p59.148">(1) </s>
</p>
<p n="p60.148">
<s n="s1.2;p60.148">For example, a 2/3 rate coding scheme (i.e. </s>
<s n="s2.2;p60.148">2 uncoded bits in, 3 coded bits out) could be created using a half-rate encoder (1 bit in, 2 bits out) and a 4/3 puncturing rate (4 bits in, 3 bits out) as shown in equation 2. </s>
</p>
<p n="p61.148">
<s n="s1.1;p61.148">
<formula notation="" id="BAWE_6146f-form.004"/> </s>
</p>
<p n="p62.148">
<s n="s1.1;p62.148">(2) </s>
</p>
</div3>
</div2>
<div2>
<head rend="bold italic">Packetisation</head>
<p n="p63.148">
<s n="s1.2;p63.148">Like the majority of digital communications systems, the model produced in this project groups bits into packets. </s>
<s n="s2.2;p63.148">There are a several of reasons to do this: </s>
</p>
<p rend="bulleted" n="p64.148">
<s n="s1.3;p64.148">The last few bits in each packet can be set to zero, so that the Viterbi traceback can be guaranteed to start at the right value. </s>
<s n="s2.3;p64.148">Now the Viterbi decoding process can be reset at the start of each packet, which has an enormous improvement on the delay that is introduced and only uses a fraction of the processing power. </s>
<s n="s3.3;p64.148">Setting the end of each packet to zero is known as state pinning. </s>
</p>
<p rend="bulleted" n="p65.148">
<s n="s1.3;p65.148">Extra stages of error protection can be added to packets (often called outer coding). </s>
<s n="s2.3;p65.148">These techniques are used to protect against different types of errors than the convolutional coding discussed previously. </s>
<s n="s3.3;p65.148">Typically, outer coding will be used along with interleaving to protect against a sudden burst of noise. </s>
</p>
<p rend="bulleted" n="p66.148">
<s n="s1.1;p66.148">A cyclic redundancy check can be added to each packet, so the receiver can determine the quality of data it is obtaining. </s>
</p>
<p n="p67.148">
<s n="s1.1;p67.148">Packets of 128 bits were used in this model, with 120 data bits and 8 padding zeroes. </s>
</p>
</div2>
<div2>
<head rend="bold italic">Cyclic Redundancy Check (CRC)</head>
<p n="p68.148">
<s n="s1.5;p68.148">A cyclic redundancy check involves adding more redundancy to a data signal. </s>
<s n="s2.5;p68.148">This redundancy cannot be used to correct errors, but is used to tell the receiver whether a packet has been received with guaranteed 100% accuracy. </s>
<s n="s3.5;p68.148">A CRC is often used for systems in which retransmission of data can be requested. </s>
<s n="s4.5;p68.148">If retransmission cannot be requested, such as with a broadcast, then the data must be accepted regardless of its quality and so the result of a CRC would be of little consequence. </s>
<s n="s5.5;p68.148">However, it is not always so simple, and a CRC is included in DVB broadcasts, which have several layers of error protection, some of which are too complex to discuss in this report. </s>
</p>
<p n="p69.148">
<s n="s1.3;p69.148">A CRC is included in the 802.11a standard, but it is not carried out in the physical layer, therefore it does not appear in the 802.11a model studied in this project. </s>
<s n="s2.3;p69.148">However, the single carrier modulation model does include a CRC, whereby the result is added at the end of a data packet. </s>
<s n="s3.3;p69.148">This model is perfectly adequate to demonstrate the use of a CRC. </s>
</p>
<p n="p70.148">
<s n="s1.2;p70.148">When the CRC was introduced into the model, the amount of data in a packet was reduced to 104 bits, to allow for a 16-bit CRC to be added to the end of each packet, bearing in mind that 8 bits are zeros for state-pinning. </s>
<s n="s2.2;p70.148">Only 104 bits of data are now being sent per packet, with an 18.75% overhead, thus a CRC should only be included in a system if it is necessary. </s>
</p>
<p n="p71.148">
<s n="s1.3;p71.148">In the majority of cases in this project, the quality of the system has been tested using the bit error rate (BER - i.e. how many bits are in error at the receiver). </s>
<s n="s2.3;p71.148">This requires a direct comparison between the source and destination, which is clearly not possible in most systems. </s>
<s n="s3.3;p71.148">A CRC can be used to calculate the packet error rate (PER), thus the inclusion of a CRC allows the receiver to determine the quality of its data without having access to the original message. </s>
</p>
</div2>
<div2>
<head rend="bold italic">Multi-carrier modulation</head>
<p n="p72.148">
<s n="s1.6;p72.148">Communications standards have several methods of increasing throughput over a given channel bandwidth. </s>
<s n="s2.6;p72.148">Older methods like TDMA (time division multiple access) and now CDMA (code division multiple access) are being replaced by OFDM, particularly in Europe. </s>
<s n="s3.6;p72.148">OFDM is Orthogonal Frequency Division Multiplexing. </s>
<s n="s4.6;p72.148">It is a multiplexing technique, rather than a modulation technique, since a signal will have already been modulated using one of the single carrier methods before OFDM is carried out on it. </s>
<s n="s5.6;p72.148">However, when the system is considered as a whole, OFDM provides a method of multi-carrier modulation where a number of symbols can be transmitted at the same time, each on a different frequency carrier wave. </s>
<s n="s6.6;p72.148">This serial to parallel type conversion means that each symbol is allowed to exist in the signal for a much greater length of time, giving it resilience to echoes that might be caused by multipath reception of a signal. </s>
</p>
<p n="p73.148">
<s n="s1.1;p73.148">The 802.11a wireless LAN standard is an ideal multi-carrier system to analyse. </s>
</p>
</div2>
<div2>
<head rend="bold italic">Overview</head>
<p n="p74.148">
<s n="s1.1;p74.148">Figure 2.5 shows the general overview of the system model. </s>
</p>
<figure id="BAWE_6146f-fig.005">
<head rend="italic">Figure 2.5: Block diagram overview of system</head>
</figure>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Implementation</head>
<p n="p75.148">
<s n="s1.3;p75.148">This section of the report details the implementation of the system model. </s>
<s n="s2.3;p75.148">Simulink was the obvious choice of implementation tool, since many of the complex coding tasks are provided in ready-to-use blocks. </s>
<s n="s3.3;p75.148">The model was built up in stages so that each part could be checked separately. </s>
</p>
<div2>
<head rend="bold italic">Single carrier modulation schemes</head>
<p n="p76.148">
<s n="s1.2;p76.148">Figure 3.1 shows the first stage of the model. </s>
<s n="s2.2;p76.148">Before continuing to implement features of the communications system, this part of the model was used to compare the 5 single carrier modulation schemes used in the project, described in section 2.2. </s>
</p>
<figure id="BAWE_6146f-fig.006">
<head rend="italic">Figure 3.1: Single carrier modulation model (for PSK modulation schemes)</head>
</figure>
<div3>
<head rend="underlined">Bernoulli Binary Generator</head>
<p n="p77.148">
<s n="s1.4;p77.148">This block is a pseudo-random binary generator. </s>
<s n="s2.4;p77.148">It can be run for any required length of time thus it is ideal for as the signal source for the model. </s>
<s n="s3.4;p77.148">The generator requests a parameter called 'samples per frame'. </s>
<s n="s4.4;p77.148">While analysing modulation alone, this parameter was set the same as the number of bits per symbol of the modulation scheme in use. </s>
</p>
</div3>
<div3>
<head rend="underlined">To workspace</head>
<p n="p78.148">
<s n="s1.2;p78.148">There are blocks included that take an stream of data and record it into an array, one is labelled 'source', the other 'demod'. </s>
<s n="s2.2;p78.148">These are useful for manually inspecting the data in the MatLab command window, where data can be used for other purposes, or to see how the demodulated output differs from the input signal. </s>
</p>
</div3>
<div3>
<head rend="underlined">Bit to integer converter</head>
<p n="p79.148">
<s n="s1.3;p79.148">This block forms the first part of the modulation process. </s>
<s n="s2.3;p79.148">The binary bits at the input are grouped into symbols (the number of bits per symbol varies with the modulation scheme used at the time). </s>
<s n="s3.3;p79.148">At this point, the symbols are in the form of positive integers. </s>
</p>
<p n="p80.148">
<s n="s1.1;p80.148">The 'integer to bit converter' performs the opposite transformation further along the system chain, and outputs demodulated binary bits. </s>
</p>
</div3>
<div3>
<head rend="underlined">M-PSK modulator</head>
<p n="p81.148">
<s n="s1.5;p81.148">This is the second part of the modulation process. </s>
<s n="s2.5;p81.148">Inside the block parameters, variable 'M' is set according the desired modulation scheme. </s>
<s n="s3.5;p81.148">'M' will be equal to the square of the number of bits per symbol in the 'bit to integer converter' block, since there are n-squared possible combinations of an n-bit number. </s>
<s n="s4.5;p81.148">This block accepts the positive integers from the previous block, and turns them into complex numbers with the correct magnitude and phase, as discussed in section 2.2. </s>
<s n="s5.5;p81.148">The 'M-PSK demodulator' reverses the modulation and sends positive integers to the integer to bit converter. </s>
</p>
</div3>
<div3>
<head rend="underlined">Rectangular QAM Modulator</head>
<p n="p82.148">
<s n="s1.5;p82.148">If the desired modulation scheme was a variant of QAM rather than of PSK (i.e. </s>
<s n="s2.5;p82.148">16-QAM and 64-QAM), then the 'M-PSK modulator' was replaced by a 'Rectangular QAM Modulator' as shown in Figure 3.2 (and the corresponding demodulator was replaced by 'Rectangular QAM Deodulator'). </s>
<s n="s3.5;p82.148">This block has a few more parameters that can be adjusted. </s>
<s n="s4.5;p82.148">'M' was set in the same way as for PSK schemes. </s>
<s n="s5.5;p82.148">Average power was used for normalization, as is the case in the international 802.11a standard. </s>
</p>
</div3>
<div3>
<head rend="underlined">AWGN channel</head>
<p n="p83.148">
<s n="s1.2;p83.148">AWGN is 'Additive White Gaussian Noise'. </s>
<s n="s2.2;p83.148">The input signal is passed through with Gaussian noise added to it to create a user-specified SNR. </s>
</p>
</div3>
<div3>
<head rend="underlined">Discrete time scatter plot scope</head>
<p n="p84.148">
<s n="s1.4;p84.148">A visual output is given, in the form of an Argand diagram. </s>
<s n="s2.4;p84.148">The plot can be told to hold a specified number of previous plot points, so that a scatter plot can be created. </s>
<s n="s3.4;p84.148">The plots given on this scope can be used to verify that the modulation process is performing as explained in section 2.2. </s>
<s n="s4.4;p84.148">However, the scope output will vary slightly to the argand diagrams shown in Figure 2.1-2.5 as it will exhibit a certain amount of noise depending on the SNR specified in the AWGN block. </s>
</p>
</div3>
<div3>
<head rend="underlined">Error rate calculation</head>
<p n="p85.148">
<s n="s1.2;p85.148">The output of the modulation/demodulation process is compared directly to the input signal from the binary generator. </s>
<s n="s2.2;p85.148">A display block is used to show the results of this comparison, which are: </s>
</p>
<list type="ordered">
<item>total bits transmitted</item>
<item>number of erroneous bits received</item>
<item>Bit Error Rate (BER), equal to erroneous bits / total bits.</item>
</list>
<p n="p86.148">
<s n="s1.1;p86.148">The BER will vary upon the SNR specified, and provides a good indicator of the resilience to noise of a particular modulation scheme. </s>
</p>
</div3>
</div2>
<div2>
<head rend="bold italic">Convolutional Coding</head>
<p n="p87.148">
<s n="s1.2;p87.148">At this stage the model was split into hierarchical blocks, keeping the modulation and coding parts separate as shown in Figure 3.3. </s>
<s n="s2.2;p87.148">The contents of the newly added 'baseband coding' and 'baseband decoding' blocks are shown in Figure 3.4 and Figure 3.5. </s>
</p>
<div3>
<head rend="underlined">Bernoulli Binary Generator</head>
<p n="p88.148">
<s n="s1.2;p88.148">The samples per frame parameter was increased in order to set the packet size. </s>
<s n="s2.2;p88.148">A value of 120 samples per frame was used to create a packet size of 128 once the zeros had been added for state-pinning (see section 2.4). </s>
</p>
<figure id="BAWE_6146f-fig.007">
<head rend="italic">Figure 3.4: inside Baseband Coding block</head>
</figure>
<figure id="BAWE_6146f-fig.008">
<head rend="italic">Figure 3.3: hierarchical block model</head>
</figure>
<figure id="BAWE_6146f-fig.009">
<head rend="italic">Figure 3.5: inside Baseband Decoding block</head>
</figure>
</div3>
<div3>
<head rend="underlined">Constant &amp; Matrix Concatenation</head>
<p n="p89.148">
<s n="s1.2;p89.148">The constant block provides eight zeros which are padded onto the end of each packet of bits. </s>
<s n="s2.2;p89.148">These zeros ultimately increase the accuracy of the Viterbi decoding because the start of the traceback is known to be zero (see packets and state pinning, section 2.4). </s>
</p>
</div3>
<div3>
<head rend="underlined">Convolutional Encoder</head>
<p n="p90.148">
<s n="s1.2;p90.148">The Simulink block performs the convolutional encoding in one step. </s>
<s n="s2.2;p90.148">It was only necessary to fill in the 'trellis structure' parameter, which defines the type of convolutional code. </s>
</p>
</div3>
<div3>
<head rend="underlined">Puncture</head>
<p n="p91.148">
<s n="s1.2;p91.148">Recalling that a 4/3 puncturing method should be used in order to obtain an overall 2/3 puncturing rate, a parameter of [1 1 1 0]' was supplied to the puncture block. </s>
<s n="s2.2;p91.148">The result is that every fourth bit is completely discarded. </s>
</p>
</div3>
<div3>
<head rend="underlined">Unipolar to Bipolar</head>
<p n="p92.148">
<s n="s1.4;p92.148">The previous system block is the integer to bit converter at the end of the demodulation process. </s>
<s n="s2.4;p92.148">As one would expect, this outputs 1s and zeros (unipolar form). </s>
<s n="s3.4;p92.148">However, the Simulink Viterbi Decoder interprets zeros as bits that have been corrupted or punctured. </s>
<s n="s4.4;p92.148">The output of the demodulator must first be converted into bipolar form, which uses +1 and -1, for the Viterbi decoder to correctly understand the data. </s>
</p>
</div3>
<div3>
<head rend="underlined">Insert Zero</head>
<p n="p93.148">
<s n="s1.2;p93.148">After every third bit, a zero was inserted to replace the bits stripped out during puncturing. </s>
<s n="s2.2;p93.148">The [1 1 1 0]' parameter was once again used. </s>
</p>
</div3>
<div3>
<head rend="underlined">Viterbi Decoder</head>
<p n="p94.148">
<s n="s1.2;p94.148">The Viterbi decoder must have an identical trellis structure to the encoder. </s>
<s n="s2.2;p94.148">Also, the traceback length was set equal to the packet size, which is 128 including the state-pinning zeros. </s>
</p>
</div3>
<div3>
<head rend="underlined">Selector</head>
<p n="p95.148">
<s n="s1.1;p95.148">Removes the 8 zeros previously added to the end of each packet for state-pinning. </s>
</p>
</div3>
</div2>
<div2>
<head rend="bold italic">CRC</head>
<p n="p96.148">
<s n="s1.3;p96.148">Figure 3.6 shows how the Baseband Coding block was altered to include a CRC in each packet. </s>
<s n="s2.3;p96.148">Simulink only requires to know that a 16-bit CRC should be carried out, it is automatically concatenated with the input stream. </s>
<s n="s3.3;p96.148">Puncturing was removed at this stage, as there was no requirement to demonstrate the effect of puncturing and a CRC simultaneously. </s>
</p>
<p n="p97.148">
<s n="s1.3;p97.148">Figure 3.7 shows the corresponding CRC detector added into the Baseband Decoding block. </s>
<s n="s2.3;p97.148">It has two outputs. </s>
<s n="s3.3;p97.148">The decoding out is unaffected by the CRC. The pass_fail was used along with another 'Error Rate Calculation' block, which can be seen in Figure 3.3, to calculate the PER. </s>
</p>
<figure id="BAWE_6146f-fig.010">
<head rend="italic">Figure 3.6: adding CRC to Baseband Coding block</head>
</figure>
<figure id="BAWE_6146f-fig.011">
<head rend="italic">Figure 3.7: CRC detector inside Baseband Decoding block</head>
</figure>
</div2>
<div2>
<head rend="bold italic">Multi-carrier modulation</head>
<p n="p98.148">
<s n="s1.4;p98.148">The OFDM process is complicated and to implement it all would take more time than would be available. </s>
<s n="s2.4;p98.148">A complete 802.11a system model is available in a Simulink demo, and this was used as the working OFDM model for this project. </s>
<s n="s3.4;p98.148">It is shown in Figure 3.8. </s>
<s n="s4.4;p98.148">There are some key points to note about the system. </s>
</p>
<p n="p99.148">
<s n="s1.5;p99.148">The system has feedback. </s>
<s n="s2.5;p99.148">Both ends of a wireless communication can act as a receiver and transmitter. </s>
<s n="s3.5;p99.148">This enables two features, retransmission requests, and automatic selection of a modulation scheme. </s>
<s n="s4.5;p99.148">The exact operation of these features is governed by the data link layer, not the physical layer that is being studied in this project. </s>
<s n="s5.5;p99.148">To enable this automatic selection of modulation schemes, there are 8 different modulator types inside the 'Modulator Bank' block: </s>
</p>
<list type="bulleted">
<item>BPSK 1/2</item>
<item>BPSK 3/4</item>
<item>QPSK 1/2</item>
<item>QPSK 3/4</item>
<item>16-QAM 1/2</item>
<item>16-QAM 3/4</item>
<item>64-QAM 2/3</item>
<item>64-QAM 3/4</item>
</list>
<p n="p100.148">
<s n="s1.2;p100.148">The fraction represents the overall coding rate of the scheme. </s>
<s n="s2.2;p100.148">The convolutional code is identical in all 8 schemes, only the 2/3 and 3/4 rates include some puncturing. </s>
</p>
<p n="p101.148">
<s n="s1.3;p101.148">After data has been modulated it is made into frames for OFDM to be carried out on. </s>
<s n="s2.3;p101.148">Each frame is also given 'pilot' and 'training' signals, which are known at the receiver. </s>
<s n="s3.3;p101.148">Any difference between the expected and the received can be used at the receiver to correct for phase shifts caused in the channel, known as equalization. </s>
</p>
<p n="p102.148">
<s n="s1.3;p102.148">The process of modulating data onto several different carriers is done by an IFFT, which can only be performed on data in blocks of size 2 <hi rend="sup">n</hi>. </s>
<s n="s2.3;p102.148">Therefore each frame of 53x24 bits is padded to 64x24 with zeros. </s>
<s n="s3.3;p102.148">These zeros are later discarded at the receiver, after the corresponding FFT has been carried out. </s>
</p>
<p n="p103.148">
<s n="s1.2;p103.148">A cyclic prefix is added to each frame. </s>
<s n="s2.2;p103.148">This provides what is known as a guard interval between symbols so that delayed and echoed symbols do not interfere with their successors. </s>
</p>
<p n="p104.148">
<s n="s1.8;p104.148">The PER produced in the model is for analysis purposes only. </s>
<s n="s2.8;p104.148">In practice, the system would not have direct access to the received message and the original uncoded message, so the PER could not be obtained. </s>
<s n="s3.8;p104.148">The method shown earlier of calculating a PER using a CRC is also not possible, since there is no CRC included in the physical layer of 802.11a. </s>
<s n="s4.8;p104.148">Instead, the system uses an alternative method of judging transmission quality. </s>
<s n="s5.8;p104.148">The demodulated message at the receiver is remodulated. </s>
<s n="s6.8;p104.148">Then the two are compared. </s>
<s n="s7.8;p104.148">The difference in the magnitude and phase of the symbols provides a fairly accurate figure of the noise that was injected by the channel. </s>
<s n="s8.8;p104.148">An estimate of the SNR is calculated, and this is used to select the modulation scheme to be used. </s>
</p>
<p n="p105.148">
<s n="s1.1;p105.148">There are three types of channel noise which can be modelled using the 'Multipath Channel' block, each includes AWGN: </s>
</p>
<p rend="bulleted" n="p106.148">
<s n="s1.1;p106.148">no fading - the SNR will remain constant during simulation </s>
</p>
<p rend="bulleted" n="p107.148">
<s n="s1.1;p107.148">flat fading - the amplitude and phase shift of the signal will vary over time. </s>
</p>
<p rend="bulleted" n="p108.148">
<s n="s1.1;p108.148">dispersive fading - the amplitude and phase of the signal will change and a varying amount of echo is also applied to the signal. </s>
</p>
<p n="p109.148">
<s n="s1.1;p109.148">The latter can be used to realistically analyse the 802.11a systems immunity to noise caused by multipath reception. </s>
</p>
<figure id="BAWE_6146f-fig.012">
<head>Figure 3.8: 802.11a system model</head>
</figure>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Performance Analysis</head>
<div2>
<head rend="bold italic">Single-carrier modulation</head>
<p n="p110.148">
<s n="s1.1;p110.148">This section provides a detailed comparison of the coding and modulation schemes used throughout the project. </s>
</p>
<p n="p111.148">
<s n="s1.4;p111.148">For the majority of comparisons, the BER curves will be used. </s>
<s n="s2.4;p111.148">A BER curve is a plot of Bit Error Rate vs. </s>
<s n="s3.4;p111.148">Signal to Noise Ratio, and shows how effective a modulation scheme is at providing immunity to noise. </s>
<s n="s4.4;p111.148">Before comparing real results, it is useful to note what the curves mean. </s>
</p>
<p n="p112.148">
<s n="s1.1;p112.148">Figure 4.1 shows four possible different shapes of BER curve. </s>
</p>
<p rend="bulleted" n="p113.148">
<s n="s1.1;p113.148">A system that performs like (a) would be preferable to the system that produced curve (b), since the BER drops much faster, at a lower SNR. For any given SNR, system (a) will perform the same or better than (b). </s>
</p>
<p rend="bulleted" n="p114.148">
<s n="s1.2;p114.148">System (c) could be better or worse than (a) depending on the SNR at which the system is likely to operate. </s>
<s n="s2.2;p114.148">It can be seen that at a low SNR (high noise environment), (c) would give fewer bit errors, but at a high SNR (a) would be best. </s>
</p>
<p rend="bulleted" n="p115.148">
<s n="s1.2;p115.148">Curve (d) tails off slowly and does not reach zero. </s>
<s n="s2.2;p115.148">This type should be avoided in most cases, since it will produce bit errors even at very low SNR. </s>
</p>
<p n="p116.148">
<s n="s1.1;p116.148">Armed with this knowledge, the results in Figure 4.2-4.6 can be correctly interpreted. </s>
</p>
<figure id="BAWE_6146f-fig.013">
<head rend="italic">Figure 4.1: Possible BER curve shapes</head>
</figure>
<p n="p117.148">
<s n="s1.5;p117.148">Figure 4.2 compares the different modulation schemes when no coding is used. </s>
<s n="s2.5;p117.148">These curves were produced with the model in Figure 3.1. </s>
<s n="s3.5;p117.148">It can be clearly seen that as the complexity of the modulation scheme increases (along with the number of bits per symbol) the curves roll off more slowly, marking a deterioration in performance. </s>
<s n="s4.5;p117.148">This can be explained by remembering that having a large number of bits per symbol increases the data rate, creating a compromise where a modulation scheme with a slower baud rate will have better noise immunity. </s>
<s n="s5.5;p117.148">It may be useful to note at this point that 16-QAM outperforms 16-PSK at any SNR, as expected. </s>
</p>
<p n="p118.148">
<s n="s1.3;p118.148">Figure 4.3 compares two different convolutional codes. </s>
<s n="s2.3;p118.148">As the employed coding becomes more complex, the BER curve has a steeper roll off, but starts higher, creating overlapping curves. </s>
<s n="s3.3;p118.148">A situation arises similar to curves (a) and (c) in Figure 4.1, meaning that different convolutional codes could be more effective depending on the SNR at which they are expected to operate. </s>
</p>
<p n="p119.148">
<s n="s1.2;p119.148">It will suffice to state that packetisation and state pinning offer very little gain in terms of BER, hence there is no comparison between the schemes with and without state pinning. </s>
<s n="s2.2;p119.148">Its benefits lie in the complexity of the decoding and improving the time delay associated with the Viterbi traceback algorithm, as explained in section 2.4. </s>
</p>
<p n="p120.148">
<s n="s1.2;p120.148">Figure 4.4 compares 4 modulation schemes in their NASA coded and uncoded forms. </s>
<s n="s2.2;p120.148">This graph can be used to explain the choices of modulation and coding that are found in the 802.11a standard: </s>
</p>
<list type="bulleted">
<item>BPSK, NASA coding</item>
<item>QPSK, NASA coding</item>
<item>16-QAM, NASA coding</item>
</list>
<p n="p121.148">
<s n="s1.5;p121.148">Between the three schemes it is possible to have transmission at any SNR with a BER of below 0.1, without changing the convolution code or resorting to an uncoded scheme. </s>
<s n="s2.5;p121.148">This result means that the convolutional code is fixed, and coding and decoding can be performed by dedicated hardware. </s>
<s n="s3.5;p121.148">This is particularly important for increasing speed in the Viterbi decoder, which is one of the main causes of delay in a digital communications system. </s>
<s n="s4.5;p121.148">The 802.11a standard also includes 64-QAM to further increase the data rate. </s>
<s n="s5.5;p121.148">This comparison does not include 64-QAM only because the scheme is not compatible with the packet size used in the test. </s>
</p>
<p n="p122.148">
<s n="s1.2;p122.148">Even with convolutional coding, 16-PSK is outperformed by 16-QAM even though the two would give the same data rate. </s>
<s n="s2.2;p122.148">For this reason 16-PSK is not included in the 802.11a standard, and would be an unlikely choice for any future system, unless transmission power was not a constraint. </s>
</p>
<p n="p123.148">
<s n="s1.2;p123.148">This figure also gives an opportunity to compare several modulation schemes at the same BER, say, 0.02 (2 in 100 bits received incorrectly). </s>
<s n="s2.2;p123.148">It may be worth noting that if some outer coding been added to each packet before convolutional coding was used, then undamaged data could easily be restored from a received signal with BER of 0.02 (See section 6: Recommendations). </s>
</p>
<p rend="bulleted" n="p124.148">
<s n="s1.3;p124.148">BPSK, both in its raw form or with NASA coding, performs favourably. </s>
<s n="s2.3;p124.148">Without convolutional coding, the signal only just incurs a BER rate as high as 0.02 at a SNR of 0dB (i.e. equal signal and noise amplitude). </s>
<s n="s3.3;p124.148">The coded scheme can provide BER 0.02 at a SNR of around 3dB. </s>
</p>
<p rend="bulleted" n="p125.148">
<s n="s1.1;p125.148">For all other schemes, it can clearly be seen that at 0.02 BER the coded schemes outperform the uncoded schemes, with QPSK seeing the best results. </s>
</p>
<p n="p126.148">
<s n="s1.8;p126.148">The former of these 2 points raises the interest question of why the coded schemes should ever cause more bit errors than their uncoded counterparts. </s>
<s n="s2.8;p126.148">This would be the case for any modulation scheme if it is used it in a situation with very high noise. </s>
<s n="s3.8;p126.148">The answer relates to the Viterbi decoding algorithm, which estimates the symbols that are most likely to have been sent, based on a traceback route (see section 2.3.2). </s>
<s n="s4.8;p126.148">If the coded bit stream arriving at the Viterbi decoder has more errors than the decoder can account for, then the decoder will form an incorrect traceback path, and bit errors will propagate all the way along the path. </s>
<s n="s5.8;p126.148">Such errors will not be rectified until a new packet is received and the decoder is reset. </s>
<s n="s6.8;p126.148">In this way, it is easy to imagine an entire packet being corrupted by propagating errors. </s>
<s n="s7.8;p126.148">Unfortunately, this is inherent in convolutional coding, because the process transforms symbols based on their predecessors and successors. </s>
<s n="s8.8;p126.148">A look back at Figure 4.3 shows that more complex codes are more susceptible to this problem. </s>
</p>
<p n="p127.148">
<s n="s1.5;p127.148">Figure 4.5 moves the analysis further forward, comparing NASA coding with state pinning and NASA coding with puncturing to the original uncoded system. </s>
<s n="s2.5;p127.148">It can be seen that puncturing simply shifts the curve to the right, having a roll off which occurs at a higher SNR than a scheme without puncturing. </s>
<s n="s3.5;p127.148">One can imagine that if puncturing is taken beyond a certain level, the curve would become sufficiently shifted that the coding scheme performs worse than the uncoded scheme. </s>
<s n="s4.5;p127.148">In practice this would not happen, as the puncturing rate is rarely fixed. </s>
<s n="s5.5;p127.148">As is the case in 802.11a, the puncturing rate will be altered in order to provide optimal data rates in between the jumps provided by different modulation schemes. </s>
</p>
<p n="p128.148">
<s n="s1.3;p128.148">Figure 4.6 shows a slightly different comparison using packet error rates. </s>
<s n="s2.3;p128.148">It can be seen that the curves do not always roll off, but can have slight twists. </s>
<s n="s3.3;p128.148">These are the result of the random appearance of bit errors, meaning that PER will not always be proportional to BER. In many systems the PER is used to determine signal quality, because the PER can be determined at the receiver by way of a CRC (see section 2.5) without having access to the original signal. </s>
</p>
<p n="p129.148">
<s n="s1.5;p129.148">Figure 4.7 plainly demonstrates that the PER and BER are different. </s>
<s n="s2.5;p129.148">The scatter diagram shows the model running in 16-QAM mode, with NASA coding and a CRC. The data points are just straying outside their correct detection zones, creating a BER of 0.004606. </s>
<s n="s3.5;p129.148">This is enough to give a PER of 0.1091, since only one incorrect bit is needed for a packet to become corrupt. </s>
<s n="s4.5;p129.148">If every corrupt packet were discarded, this could be extremely wasteful, and so the PER is often passed to higher layers in the system, along with the data. </s>
<s n="s5.5;p129.148">The application that runs on top of this communications layer can then decide for itself whether to request data retransmission. </s>
</p>
<figure id="BAWE_6146f-fig.014">
<head rend="italic">Figure 4.2: Graph comparing the BER curves for the five modulation schemes (without any error protection coding)</head>
</figure>
<figure id="BAWE_6146f-fig.015">
<head>Figure 4.3: Graph comparing BER curves for 16-QAM scheme with different variants of convolutional coding</head>
</figure>
<figure id="BAWE_6146f-fig.016">
<head>Figure 4.4: Comparison of coded and uncoded modulation schemes</head>
</figure>
<figure id="BAWE_6146f-fig.017">
<head>Figure 4.5: Graph displaying the effects of puncturing on BER performance for 16-QAM</head>
</figure>
<figure id="BAWE_6146f-fig.018">
<head rend="italic">Figure 4.6: Graph comparing PER curves for NASA coded modulation schemes with CRC packet check</head>
</figure>
<figure id="BAWE_6146f-fig.019">
<head rend="italic">Figure 4.7: example scatter diagram with BER and PER for 16-QAM</head>
</figure>
</div2>
<div2>
<head rend="bold italic">Multi-carrier modulation</head>
<p n="p130.148">
<s n="s1.3;p130.148">The first test was to vary the SNR in the Multipath Channel block, and observe how the modulation scheme and data rate change according to the models automatic adaptive control. </s>
<s n="s2.3;p130.148">The results, shown in Table 1, do not exactly match the parameters set up in the model, but are relatively close. </s>
<s n="s3.3;p130.148">Any differences can be put down to the fact that the receiver only <hi rend="italic">estimates</hi> the SNR based on the data it receives, and it is this estimation that is used to select a modulation scheme. </s>
</p>
<table id="BAWE_6146f-tab.001">
<head rend="italic">Table 1: automatic changes to modulation scheme in 802.11a model</head>
<row>
<cell/>
</row>
</table>
<p n="p131.148">
<s n="s1.2;p131.148">Another point to note in Table 1 is the way that each modulation scheme can work at 2 data rates. </s>
<s n="s2.2;p131.148">This is because the model can automatically adjust its puncturing rate to achieve maximum data rate. </s>
</p>
<p n="p132.148">
<s n="s1.2;p132.148">When designing a communications system similar to 802.11a, which can automatically switch between modulation schemes depending on the level of noise in the channel, a graph similar to that shown back in Figure 4.6 may have been used to select the SNR thresholds. </s>
<s n="s2.2;p132.148">For example, for a notionally acceptable PER of 10%, the SNR ranges extracted from Figure 4.6 would be as in Table 2. </s>
</p>
<table id="BAWE_6146f-tab.002">
<head rend="italic">Table 2: Theoretical SNR thresholds for a 10% PER</head>
<row>
<cell/>
</row>
</table>
<p n="p133.148">
<s n="s1.5;p133.148">Table 3 gives the full results obtained from the 802.11a system. </s>
<s n="s2.5;p133.148">It shows the PER and bit rate achieved at different SNRs for each type of channel noise. </s>
<s n="s3.5;p133.148">Figure 4.8 Shows these results in a graph. </s>
<s n="s4.5;p133.148">It can be seen that when fading is occuring in the channel, the PER will never reach zero. </s>
<s n="s5.5;p133.148">It must have been decided in the 802.11a standard that it is more beneficial to increase the data rate whenever possible, rather than to aim for 100% data accuracy. </s>
</p>
<p n="p134.148">
<s n="s1.2;p134.148">Figure 4.9 shows the model operating with no fading in the channel. </s>
<s n="s2.2;p134.148">From the scatter diagram it can be seen that the system is using 64-QAM. The bit rate has gradually stepped upward to reach its maximum of 48Mb/s, roughly proportional the SNR. </s>
</p>
<p n="p135.148">
<s n="s1.5;p135.148">Figure 4.10 shows the model running with flat fading. </s>
<s n="s2.5;p135.148">The system is still using 64-QAM, but the scatter graph for the unequalised signal shows some interesting features. </s>
<s n="s3.5;p135.148">The square shape of received symbols has been twisted by approximately 45 degrees due to phase shifting in the channel. </s>
<s n="s4.5;p135.148">Also, the points on the scatter have been compressed much closer together because of amplitude fading in the channel. </s>
<s n="s5.5;p135.148">However, the equalization process has eliminated these errors, and the high data rate of 48Mb/s has been maintained. </s>
</p>
<p n="p136.148">
<s n="s1.3;p136.148">Figure 4.11 show the model operating with dispersive fading. </s>
<s n="s2.3;p136.148">Echoing in the channel has caused these ring effects which are visible in the unequalised signal scatter diagram. </s>
<s n="s3.3;p136.148">It can also been seen how the poor SNR has caused the modulation scheme to change to QPSK and the bit rate has stepped down accordingly. </s>
</p>
<table id="BAWE_6146f-tab.003">
<head rend="italic">Table 3: PER results for varying SNR in 802.11a model. PER values are average over 50ms. </head>
<row>
<cell/>
</row>
</table>
<figure id="BAWE_6146f-fig.020">
<head rend="italic">Figure 4.8: PER changes in the 802.11a model according to SNR and type of noise</head>
</figure>
<figure id="BAWE_6146f-fig.021">
<head rend="italic">Figure 4.9: 802.11a model operating in 64-QAM mode with no fading</head>
</figure>
<figure id="BAWE_6146f-fig.022">
<head rend="italic">Figure 4.10: 802.11a model operating in 64-QAM mode with flat fading</head>
</figure>
<figure id="BAWE_6146f-fig.023">
<head rend="italic">Figure 4.11: 802.11a model operating in QPSK mode with dispersive fading</head>
</figure>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Conclusions</head>
<p n="p137.148">
<s n="s1.3;p137.148">It has been seen that the encoding and modulation schemes chosen can have serious implications on the performance of a communications system. </s>
<s n="s2.3;p137.148">There are many more options than the various ones explored in this project, but these ones are currently used in wireless netorking (IEEE802.11), and digital radio/television broadcasting, which makes them obvious choices to describe. </s>
<s n="s3.3;p137.148">Each scheme has its merits and disadvantages, it is not so clear cut that the scheme that allows the fastest data rate can be regarded as the best. </s>
</p>
<p n="p138.148">
<s n="s1.3;p138.148">If reliable transmission is required at a low SNR (e.g. less than 5dB), there would be little choice available and, out of the modulation schemes used here, BPSK would be used. </s>
<s n="s2.3;p138.148">This will give the slowest data rate, but it would be unrealistic to expect a fast data rate with such poor signal quality. </s>
<s n="s3.3;p138.148">The users of an 802.11a LAN system will often experience far lower data rates than promised by the equipment manufacturers, due to these occasions when the system must switch to its last resort BPSK modulation in order to guarantee error free transmission. </s>
</p>
<p n="p139.148">
<s n="s1.3;p139.148">Newer wireless standards 802.11b and 802.11g have provision for even worse noise conditions, by employing DBPSK (Differential BPSK) and DQPSK, which offers a reduction in complexity with only a slight loss in performance. </s>
<s n="s2.3;p139.148">DQPSK is also used in DAB (Digital Audio Broadcasting). </s>
<s n="s3.3;p139.148">Further work could perhaps examine these differential modulation techniques in more detail. </s>
</p>
<p n="p140.148">
<s n="s1.4;p140.148">At the opposite end of the spectrum, some communications require high data rates but can tolerate a lot of errors. </s>
<s n="s2.4;p140.148">The DVB standard defines the modulation and coding schemes that can be used, and offers a lot of flexibility. </s>
<s n="s3.4;p140.148">Some commercial digital television channels will use 64-QAM and puncturing to reduce the amount of bandwidth required by their signal (reducing the licensing costs). </s>
<s n="s4.4;p140.148">Unfortunately, the MPEG2 compression used in DVB does not have the ability to degrade gracefully and so in bad weather these channels can be virtually unwatchable. </s>
</p>
<p n="p141.148">
<s n="s1.6;p141.148">Another factor which affects the choice of modulation is whether the system will have the ability to request retransmissions. </s>
<s n="s2.6;p141.148">In the performance analysis section, Table 3 and Figure 4.8 showed that the 802.11a standard favours higher data rates over 100% accurate data reception. </s>
<s n="s3.6;p141.148">This is tolerable due to its ability to request retransmission of failed data, meaning that no information can be lost. </s>
<s n="s4.6;p141.148">This approach can only be used where delivery time does not need to be guaranteed. </s>
<s n="s5.6;p141.148">In a time critical system, delivery time is essential and it would be unacceptable to need to retransmit data. </s>
<s n="s6.6;p141.148">These situations warrant the use of more complex codes and modulation schemes to try and salvage as much data from a signal as possible. </s>
</p>
<p n="p142.148">
<s n="s1.5;p142.148">In the past, when decided which coding and modulation schemes to use for a project, the complexity would have been an important factor. </s>
<s n="s2.5;p142.148">More complex algorithms are more expensive to implement, and slower to execute. </s>
<s n="s3.5;p142.148">Slow execution may not be such an issue in broadcast, where a delay would not be noticed, but any delay in mobile telephone conversation would be a problem. </s>
<s n="s4.5;p142.148">Fortunately, the decreasing cost of hardware decoders and the abundance of available software decoders has resulted in a wave of solutions that can implement complex schemes at low cost. </s>
<s n="s5.5;p142.148">Digital TV set-top boxes and mobile telephones are two obvious examples. </s>
</p>
<p n="p143.148">
<s n="s1.2;p143.148">Power considerations are also now being overcome, with mobile communications companies working hard to reduce the power consumption for these modulation and coding schemes. </s>
<s n="s2.2;p143.148">The fact that OFDM is a likely candidate for 4G mobile communications demonstrates this well. </s>
</p>
<p n="p144.148">
<s n="s1.1;p144.148">The debate over which modulation schemes are best is ongoing. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Recommendations</head>
<p n="p145.148">
<s n="s1.3;p145.148">This project offered a look at 5 of the most common modulation techniques, and only 2 convolutional codes. </s>
<s n="s2.3;p145.148">There are many others of equal merit, and further work could include these. </s>
<s n="s3.3;p145.148">Two examples raised in the Conclusion are DBPSK and DQPSK. </s>
</p>
<p n="p146.148">
<s n="s1.4;p146.148">Wireless LAN only uses convolutional coding, but other wireless communications models include other types of error protection (outer coding) to protect against different types of errors, e.g. sudden bursts of noise. </s>
<s n="s2.4;p146.148">There are also methods of interleaving, whereby bits from different packets are shuffled before modulation. </s>
<s n="s3.4;p146.148">Outer coding and interleaving can, in extreme circumstances, help to restore a packet of data from an extremely violent burst of noise. </s>
<s n="s4.4;p146.148">Further work could perhaps look at the DVB model, which includes both outer coding and interleaving. </s>
</p>
<p n="p147.148">
<s n="s1.3;p147.148">802.11 is well known to not perform at the data rates that should be possible. </s>
<s n="s2.3;p147.148">Aside the reasons already discussed, the other layers of the 802.11 standard play a big part. </s>
<s n="s3.3;p147.148">A true 802.11 model would need to take into account the interaction between devices using the correct protocol. </s>
</p>
<p n="p148.148">
<s n="s1.6;p148.148">One final factor that would be taken into account while defining a system, is user perception of corrupt data. </s>
<s n="s2.6;p148.148">How many errors are acceptable to the human ear/eye. </s>
<s n="s3.6;p148.148">As previously stated, data compressed by an MPEG2 algorithm will suffer badly, as errors will be propagated for a period of time. </s>
<s n="s4.6;p148.148">However, the compression could be increased if this was likely to happen frequently. </s>
<s n="s5.6;p148.148">Uncompressed data may have the ability to degrade gracefully, giving the impression that it has been received correctly. </s>
<s n="s6.6;p148.148">However, human perception is difficult to model. </s>
</p>
</div1>
</body>
<back>
<div1 type="bibliography">
<head rend="bold">Bibliography</head>
<p>T1 Glossary 2000: Glossary of Telecommunications Terms - <seg type="URL" n="http://www.atis.org/tg2k/"/>
</p>
<p>Pablo Brenner - A technical tutorial on the IEEE 802.11 protocol - <seg type="URL" n="http://www.sss-mag.com/pdf/802_11tut.pdf"/>
</p>
<p>Dr Mike Fetton - A Guide To Digital Modulation - <seg type="URL" n="http://www.ictp.trieste.it/~radionet/2001_school/lectures/fitton/digital_mod.pdf"/>
</p>
<p>wikipedia.org</p>
</div1>
</back>
</text>
</TEI.2>
