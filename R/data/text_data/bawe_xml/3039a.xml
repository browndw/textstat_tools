<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_3039a" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>
</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">Language used in quote: <foreign id="English">English</foreign>
</note>
<note resp="British Academic Written English (BAWE) corpus project">Originally a pdf file. Student name and number, module name and number and date in header. Title of assignemnt in footer. Appendices (4) contain lists (of definitions).</note>
</notesStmt>
<sourceDesc>
<p n="level">3</p>
<p n="date">2005-12</p>
<p n="module title">Safety Critical Systems</p>
<p n="module code">U08183</p>
<p n="genre family">Explanation</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">M</p>
<p n="number of authors">1</p>
<p n="number of words">2500</p>
<p n="number of s-units">96</p>
<p n="number of p">47</p>
<p n="number of tables">0</p>
<p n="number of figures">0</p>
<p n="number of block quotes">3</p>
<p n="number of formulae">0</p>
<p n="number of lists">7</p>
<p n="number of paragraphs formatted like lists">0</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">26.0</p>
<p n="average s-units per p">2.0</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1980</p>
<p n="first language">Chinese Cantonese</p>
<p n="education">OSa</p>
<p n="course">Computing and Information Systems</p>
<p n="student ID">3039</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<div1 type="toc" n="2">
<head rend="bold">Table of Contents</head>
<p/>
</div1>
</front>
<body>
<div1 type="section">
<head rend="bold">Choice of Programming Language</head>
<p n="p1.47">
<s n="s1.1;p1.47">In any software involved safety-critical project development, chose a suitable programming language is very importance, using an unsuitable programming language would lead to extra cost or even a project failure. </s>
</p>
<p n="p2.47">
<s n="s1.1;p2.47">The considerations to determine the suitability of a programming languages includes the characteristics and the common problems of the programming languages, the comparison of computer languages, the supporting tools and the expertise on the programming languages. </s>
</p>
<div2>
<head rend="bold">Characteristics of the Programming Languages</head>
<p n="p3.47">
<s n="s1.2;p3.47">Carr é<hi rend="italic">(Carré et al.,</hi> 1990) has listed six factors to help in comparison of the suitability of a programming language for use in a high integrity system. </s>
<s n="s2.2;p3.47">This includes: </s>
</p>
<list type="bulleted">
<item rend="bold italic">Logical soundness</item>
<item rend="bold italic">Complexity of definition</item>
<item rend="bold italic">Expressive power</item>
<item rend="bold italic">Security</item>
<item rend="bold italic">Verifiability</item>
<item rend="bold italic">Bounded space and time requirements</item>
</list>
<p n="p4.47">
<s rend="underlined italic" n="s1.1;p4.47">[The detailed descriptions for each of them in my understanding are attached in the appendix 1 Page 15.] </s>
</p>
<p n="p5.47">
<s n="s1.1;p5.47">In some researches found that no standard programming languages performs well in all of these areas, it is clear that no standard programming languages is suitable to develop a high integrity system and some special purpose programming languages should be introduced for use in high integrity system development. </s>
</p>
</div2>
<div2>
<head rend="bold">Common Problems of the Programming Languages</head>
<p n="p6.47">
<s n="s1.1;p6.47">There are four common problems identified by Clutterbuck (Clutterbuck, 1992) that commonly occurs in programs that written in a number of languages. </s>
</p>
<list type="bulleted">
<item rend="bold italic">Subprogram side-efects</item>
<item rend="bold italic">Aliasing</item>
<item rend="bold italic">Failure to initialize</item>
<item rend="bold italic">Expression evaluation errors</item>
</list>
<p n="p7.47">
<s rend="underlined italic" n="s1.1;p7.47">[The detailed descriptions for each of them in my understanding are attached in the appendix 2 Page 16.] </s>
</p>
<p n="p8.47">
<s n="s1.2;p8.47">From these problems, it is clear that why the assembly language has forbidden in early draft of the UK Defence Standard 00-55 <hi rend="italic">(MOD,</hi> 1991). </s>
<s n="s2.2;p8.47">Because such low level language provide no checking that only rely on programmer to avoid making these error. </s>
</p>
</div2>
<div2>
<head rend="bold">Comparison of Computer Languages</head>
<p n="p9.47">
<s n="s1.2;p9.47">Cullyer et al [Cullyer, 1991] define a checklist of factors to help establish if a language has appropriate characteristics. </s>
<s n="s2.2;p9.47">The factors or questions to ask are: </s>
</p>
<list type="bulleted">
<item rend="bold italic">Wild jumps</item>
<item rend="bold italic">Overwrites</item>
<item rend="bold italic">Semantics</item>
<item rend="bold italic">Model of maths</item>
<item rend="bold italic">Operational arithmetic </item>
<item rend="bold italic">Data typing</item>
<item rend="bold italic">Exception handling</item>
<item rend="bold italic">Safe subsets</item>
<item rend="bold italic">Exhaustion of memory </item>
<item rend="bold italic">Separate compilation </item>
<item rend="bold italic">Well understood</item>
</list>
<p n="p10.47">
<s rend="underlined italic" n="s1.1;p10.47">[The detailed descriptions for each of them are attached in the appendix 3 Page 17.] </s>
</p>
<p n="p11.47">
<s n="s1.2;p11.47">Cullyer compared C; CORAL-66, Pascal; Modula-2; Ada and Assembler by these characteristics and none of these programming languages provides all the features for developing safety critical software. </s>
<s n="s2.2;p11.47">From the comparison, Modula-2 seems provides the best suitability and Ada is the next, C is the least suitable one. </s>
</p>
<p n="p12.47">
<s n="s1.3;p12.47">To improve the suitability by reducing the weaknesses, use a subset of the programming languages, like SPADE-Pascal, Ada Subset ... etc, can give a great improved result on the previous comparison. </s>
<s n="s2.3;p12.47">The subset of a programming language can make the language simpler and reduce some features to be implemented by removing the features that cannot be verified, so that it may reduce the risk of error contains in the product. </s>
<s n="s3.3;p12.47">In the verification process, by using annotation which adding formal comments to a program to define the functions and operations of the module, would used to be an input of verification tools associated with the programming languages. </s>
</p>
<p n="p13.47">
<s n="s1.3;p13.47">(USDoD, 1990) also gave a set of new and revised requirements for Ada9X, based on long industrial experiences with the original Ada83. </s>
<s n="s2.3;p13.47">It incorporates new language features and support for real-time, safety-critical, distributed systems by means of additional annexes. </s>
<s n="s3.3;p13.47">Major areas cover: </s>
</p>
<list type="bulleted">
<item>Issues on standardization, understandability, efficiency in execution and storage management</item>
<item>New language paradigms including object orientation (via type extension)</item>
<item>Real-time requirements including alternative scheduling policies, asynchronous transfer of control, and asynchronous communication</item>
<item>Parallel and distributed processing</item>
<item>Safety-critical and trusted applications.</item>
</list>
<p n="p14.47">
<s n="s1.1;p14.47">Some of the requirements above are specific to Ada, and may not be applicable to other languages. </s>
</p>
</div2>
<div2>
<head rend="bold">The Supporting Tools</head>
<p n="p15.47">
<s n="s1.3;p15.47">When considering the suitability of a programming language, the supporting tool is a factor that involved the enhancements established on the programming languages to deliver a higher suitability to the critical-safety software development. </s>
<s n="s2.3;p15.47">SPARK-Ada subset and SPADE-Pascal enable programmer to use part of features of the original programming language so that giving a higher suitability on safety-critical software development. </s>
<s n="s3.3;p15.47">Using the tools would also lead to another issue which will not be discussed in this release, such as the tool reliability. </s>
</p>
</div2>
<div2>
<head rend="bold">Availability of Expertise</head>
<p n="p16.47">
<s n="s1.1;p16.47">The popularity of a programming language is also a factor to be considered, the programming language with a higher popularity implies the errors of the complier is more likely to be found, it is not only apply to safety-critical programming languages but also apply to standard programming languages. </s>
</p>
<p n="p17.47">
<s n="s1.6;p17.47">It is a very natural that the availability of expertise is a very important factor of the determination of programming languages. </s>
<s n="s2.6;p17.47">Here is an example. </s>
<s n="s3.6;p17.47">Firstly, it is easy to understand that to find an experienced programmer of a high popularity programming language is easier than which lower one, so this also indirectly have an influence on the availability of expertise. </s>
<s n="s4.6;p17.47">An experienced programmer is likely to make fewer mistakes to the program as well as the productivity is likely higher. </s>
<s n="s5.6;p17.47">Therefore, more available expertise would able to reduce the difficulty of the software development. </s>
<s n="s6.6;p17.47">Although it is much easier to find an experienced programmer in normal commercial programming language, it is still no point to select a standard programming language for safety-critical system software since it is not adequate reason for not using a higher reliability programming language. </s>
</p>
</div2>
<div2>
<head rend="bold">Conclusion</head>
<p n="p18.47">
<s n="s1.6;p18.47">It is impossible to surely say which programming language is best for developing safety-critical software, since different environment and situation have their unique reasons on choosing a certain language. </s>
<s n="s2.6;p18.47">That's why some aircraft manufacturer using many languages for a single type of aircraft, and even Boeing build their B777 by nearly all using Ada, but not achieve 100%. </s>
<s n="s3.6;p18.47">Using only one programming language for safety-critical system may also block the whole development of safety-critical programming languages as no enhancement, no expertise to other language and lead to no choice to developer in the future. </s>
<s n="s4.6;p18.47">Although there is no exact right choice to developer to skip thinking on which programming language they should adopt, Neil <hi rend="italic">(Neil Storey, 1996)</hi> gave a very good suggestion to some companies. </s>
<s rend="italic" n="s5.6;p18.47">"Companies not yet committed to a programming language would be well advised to strongly consider adopting Ada for all projects requiring a high integrity ". </s>
<s n="s6.6;p18.47">Since Ada can fit with most of safety-critical applications, the companies not yet have experience and confidence to select a programming language would strongly recommended to start from Ada. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Design Methodologies</head>
<div2>
<head rend="bold">Top-Level Design</head>
<p n="p19.47">
<s n="s1.1;p19.47">The top level design is aimed to divide the whole solution into a number of components. </s>
</p>
</div2>
<div2>
<head rend="bold">Architectural Design</head>
<p n="p20.47">
<s n="s1.2;p20.47">After a number of components have been properly defined, the architectural design will then used to define the specifications of the software architecture and the interfaces between components as well as the data structure of the components. </s>
<s n="s2.2;p20.47">Since the components will connect up each other, the component interface designs must always compatible. </s>
</p>
</div2>
<div2>
<head rend="bold">Software Partitioning</head>
<p n="p21.47">
<s n="s1.4;p21.47">Before advance to detail design, the software partitioning technique will be used to further divide the design into layers. </s>
<s n="s2.4;p21.47">The top layer of the software layered structure is the overall control and high level command functions. </s>
<s n="s3.4;p21.47">The middle layer is the various features of the software. </s>
<s n="s4.4;p21.47">The lowest layer will be the input output controls </s>
</p>
<p n="p22.47">
<s n="s1.3;p22.47">A good designed structure system would have a better resistance to error as the error occurs in certain layer would not easy to affect another layer's operation, the complexity of each components are also likely simpler. </s>
<s n="s2.3;p22.47">Hence, the verification process would easier to be performed and the safety-critical routines are also minimized. </s>
<s n="s3.3;p22.47">For a poor structured system, since the triggering mechanism would throughout from lowest level to highest level and from highest to lowest level, any layer have fault would cause the whole system be affected, it is less tolerance to error. </s>
</p>
<p n="p23.47">
<s n="s1.1;p23.47">Neil <hi rend="italic">(Neil Storey, 1996, P.231)</hi> has given a good example on using a safety switch to control the actuator with illustration. </s>
</p>
</div2>
<div2>
<head rend="bold">Detailed Design</head>
<p n="p24.47">
<s n="s1.2;p24.47">After the software are partitioned to a certain level, the detailed design can be performed to determinate what the module is to do. </s>
<s n="s2.2;p24.47">It should firstly define the purpose of each function, the data use in the component interfaces, the performance requirement, the failure mode identification, the integrity level and the acceptance test criteria, then further divide it to a manageable procedures, subroutines and data types. </s>
</p>
</div2>
<div2>
<head rend="bold">Software Isolation</head>
<p n="p25.47">
<s n="s1.5;p25.47">The major advantage of software isolation is preventing the problem of "Aliasing" that discussed in the earlier section. </s>
<s n="s2.5;p25.47">It can prevent the unexpected overwrite occur to inappropriate memory location which may lead to delaying the process or even enter an infinite loop. </s>
<s n="s3.5;p25.47">Using non-structured assemblers and C language will have no protection from these problems. </s>
<s n="s4.5;p25.47">In a critical real time system, using operation system to provide protection on memory management is not practical, since to verify an OS already extremely hard to achieve, may even harder than verify the application itself. </s>
<s n="s5.5;p25.47">Secondly, the OS itself may also cause delay to the system. </s>
</p>
</div2>
<div2>
<head rend="bold">Object-Oriented Design</head>
<p n="p26.47">
<s n="s1.2;p26.47">There are many features for the application using Object-Oriented (OO) design, as normal commercial software consideration, OO design giving the advantage of inheritance, components reuse and data hiding ... etc. </s>
<s n="s2.2;p26.47">However, programmer must aware the runtime error which cannot be detected before execute the program, it caused by use of dynamic dispatching. </s>
</p>
</div2>
<div2>
<head rend="bold">Software Reuse</head>
<p n="p27.47">
<s n="s1.3;p27.47">As OO design having the feature of reuse of components which is a very attractive point especially in a high cost safety-critical system development, because it involved saving cost on writing code as well as saving cost on verify the components. </s>
<s n="s2.3;p27.47">However, a light change of the reused code may require in some case, and a certain degree of verification is hence required. </s>
<s n="s3.3;p27.47">Moreover, in order to enable the component to be reuse in the future, a full documentation and verification must be obtained. </s>
</p>
</div2>
<div2>
<head rend="bold">Human-Computer Interface Design</head>
<p n="p28.47">
<s n="s1.1;p28.47">The Human-Computer Interface (HCI) Design would directly related to the ease of use of the system, a good HCI design would help to reduce the chance of making error and giving a wrong input since many safety-critical systems involved direct or indirect controlled by human input. </s>
</p>
</div2>
<div2>
<head rend="bold">Trial Software</head>
<p n="p29.47">
<s n="s1.2;p29.47">To test weather the design will success or otherwise, trial software can be develop to simulate the working environment. </s>
<s n="s2.2;p29.47">However, this technique is not always giving the result as same as the final product since the prototype is far less formal than the final one. </s>
</p>
</div2>
<div2>
<head rend="bold">Conclusion</head>
<p n="p30.47">
<s n="s1.4;p30.47">In the conclusion of last section talked about the Ada is suggested for some companies. </s>
<s n="s2.4;p30.47">After the discussion of design methodology, Ada is likely again being a good choice in most case of developing a safety-critical system. </s>
<s n="s3.4;p30.47">For example, Ada95 have the features from object-oriented design methodology but also have ability to disable the dynamic dispatching which avoid the demerit of object-oriented design. </s>
<s n="s4.4;p30.47">Although trial software / prototyping is a very successful methodology in many studies such as human-computer interface design, it seems not a good choice of design methodology in safety-critical system development, since trial software method is not adequately reliable and also increase the development cost, it is not recommended unless in some special situation. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Quality Assurance and Standards</head>
<div2>
<head rend="bold">Quality Assurance</head>
<p n="p31.47">
<s n="s1.2;p31.47">Quality Assurance is focus whether the manufacturing process is performed correctly. </s>
<s n="s2.2;p31.47">International Standards Organization defined standards and some of them are used for quality assurance in software development, such as ISO9000. </s>
</p>
<p n="p32.47">
<s n="s1.1;p32.47">ISO 9000 defines quality assurance as: </s>
</p>
<quote lang="English" rend="italic">"All those planned and systematic actions necessary to provide adequate confidence that a product or service will satisfy given requirements for quality."</quote>
<p n="p33.47">
<s n="s1.1;p33.47">Neil <hi rend="italic">(Neil Storey, 1996)</hi> defines the quality assurance system are: </s>
</p>
<list type="bulleted">
<item>To increase the quality of the product</item>
<item>To provide a foundation for the safety justification (safety case);</item>
<item>To improve development and production efficiency</item>
</list>
<quote lang="English" rend="italic">"As safety cannot be demonstrated by testing alone, a system's acceptance must be based on confidence gained in other ways"</quote>
<p n="p34.47">
<s n="s1.1;p34.47">The quality assurance process evaluate the quality and determine the acceptance of product, the information will be analyzed for modify process and the result will feed into the product development as an input. </s>
</p>
<p n="p35.47">
<s n="s1.2;p35.47">Quality assurance involved listing the tasks of the project and identifying who to perform them. </s>
<s n="s2.2;p35.47">It also involved using the semiformal technique which includes diagrammatic tools to define activities, to show the human resource allocation as well as ensure adequate manpower of the activities, and reporting structure. </s>
</p>
<p n="p36.47">
<s n="s1.2;p36.47">The auditing process would check whether the quality assurance procedure performed correctly. </s>
<s n="s2.2;p36.47">A quality plan contains the quality assurance activities in a project are formalized, and a good quality plan can lead to a high-quality development and consistent output. </s>
</p>
</div2>
<div2>
<head rend="bold">Quality Control</head>
<p n="p37.47">
<s n="s1.1;p37.47">Indeed, quality assurance is insufficient to guarantee the quality of the final product, a quality control is therefore needed to compensate this problem. </s>
</p>
<p n="p38.47">
<s n="s1.1;p38.47">Quality Control is focusing the correctness of the product or service to conform the requirements of the customer. </s>
</p>
<p n="p39.47">
<s n="s1.1;p39.47">ISO 9000 defines quality control as: </s>
</p>
<quote lang="English" rend="italic">"The operational techniques and activities that are used to fulfill requirements for quality"</quote>
<p n="p40.47">
<s n="s1.2;p40.47">Unlike the quality assurance process, quality control checks the final product and performs measurement and analysis, the result from the analysis will then compare with the specification. </s>
<s n="s2.2;p40.47">The compared result will then used to fine tune the production process, the final result will then have the decreased number of defect units and have an improved tolerance of a component. </s>
</p>
<p n="p41.47">
<s n="s1.3;p41.47">However, to test, for example, the reliability of software is not practical. </s>
<s n="s2.3;p41.47">Quality Control in software industry is often extremely difficult to quantify in measurement, the covering area is also hard to complete. </s>
<s n="s3.3;p41.47">This does not mean the quality control process is not valuable, it cooperate with quality assurance to play an important role in the development lifecycle to greatly improve the quality of deliverables. </s>
</p>
</div2>
<div2>
<head rend="bold">Quality Standards</head>
<div3>
<head rend="bold">ISO 9000</head>
<p n="p42.47">
<s n="s1.2;p42.47">ISO 9000 is the most popular used standard in many industries, it relates to the management of quality. </s>
<s n="s2.2;p42.47">The series of documents with descriptions are attached in the appendix 4 page 18. </s>
</p>
<p n="p43.47">
<s n="s1.2;p43.47">ISO9000 is a generic quality assurance standard that originated in Europe; ISO9000-3 is specialized for software. </s>
<s n="s2.2;p43.47">ISO 9000 TickIT is a certification system to specially design to certify the software industries based on the quality management system. </s>
</p>
</div3>
<div3>
<head rend="bold">ISO/IEC9126</head>
<p n="p44.47">
<s n="s1.1;p44.47">ISO/IEC9 126 is specially designed for software development and focus on the quality control. </s>
</p>
<p n="p45.47">
<s n="s1.3;p45.47">(ISO, 1991) defined a number of criteria to determine how well is the software quality. </s>
<s n="s2.3;p45.47">However, these criteria are not involved of using quantitative method to measure the product. </s>
<s n="s3.3;p45.47">The six criteria are: </s>
</p>
<list type="bulleted">
<item>Functionality</item>
<item>Reliability</item>
<item>Usability</item>
<item>Efficiency</item>
<item>Maintainability</item>
<item>Portability</item>
</list>
</div3>
</div2>
<div2>
<head rend="bold">Other Quality Related Standards for Software</head>
<list type="bulleted">
<item>MoD (1991)</item>
<item>Interim Defence Standard 05-95: Quality System Requirements for the Development, Supply and Maintenance of Software</item>
<item rend="italic">[As mentioned in common problems of previous section]</item>
<item>ANSI/IEEE (1989) Std 730-1989 Software quality assurance plan</item>
<item>ANSI/IEEE (1986) Std 983-1986 Guide for software quality assurance planning</item>
</list>
<p n="p46.47"/>
</div2>
<div2>
<head rend="bold">Conclusion</head>
<p n="p47.47">
<s n="s1.3;p47.47">You may note that there are many standards above to increase the quality of software development. </s>
<s n="s2.3;p47.47">However, intuitively it is insufficient to ensure the safety of safety-critical system, since safety-critical software must have a very low probability of failure - typically 10 <hi rend="sup">-8</hi> to 10 <hi rend="sup">-9</hi>. </s>
<s n="s3.3;p47.47">The leak of not using a metrics or quantitative method in the measurement is the remaining concern of safety-critical system designer and user. </s>
</p>
</div2>
</div1>
</body>
<back>
<div1 type="appendix">
<head rend="bold">Appendices</head>
<p/>
</div1>
<div1 type="bibliography">
<head rend="bold">References</head>
<p>
<hi rend="bold italic">(Carré et al., 1990) </hi>Carré B.A., Jennings T.J., Maclennan F.J., Farrow P.F. and Garnsworthy J.R. (1990). <hi rend="bold">SPARK - The SPADE Ada Kernal,</hi> 3rd Edition. Program Walidation Limited.</p>
<p>
<hi rend="bold italic">(Clutterbuck, 1992) </hi>Drive report: <hi rend="bold">Review of current tools and techniques for the development of safety-critical software.</hi> John Wiley</p>
<p>
<hi rend="bold italic">(MOD, 1991) </hi>Interim Defence Standard 00-5 5. <hi rend="bold">The Procurement of Safety Critical Software in Defence Equipment.</hi> Directorate of Standardization</p>
<p>
<hi rend="bold italic">(Cullyer, 1991) W.J., </hi>Goodenough S.J. and Wichmann B.A. (1991). <hi rend="bold">The choice of computer languages for use in safety-critical system.</hi> Software Eng.</p>
<p>
<hi rend="bold italic">(USDoD, 1990) </hi>U.S. Department of Defence. <hi rend="bold">Ada 9X Requirements.</hi> Office of the Under Secretary for Defence Applications, Washington, D.C., December 1990</p>
<p>
<hi rend="bold italic">(Neil Storey, 1996) </hi>Neil Storey. <hi rend="bold">Safety-Critical Computer Systems.</hi> Addison-Wesley, 1996</p>
<p>
<hi rend="bold italic">(ISO, 1991) </hi>ISO. <hi rend="bold">Information Technology - Software Product Evaluation - Quality Characteristics and Guidelines for their Use.</hi>
</p>
<p rend="bold">Bibliography</p>
<p>Leveson, Nancy <hi rend="bold">Safeware : system safety and computers</hi> / Nancy G. Leveson . - Reading, Mass.; Wokingham : Addison-Wesley, 1995</p>
<p>Sommerville, Ian, 1951- <hi rend="bold">Software engineering</hi> / Ian Sommerville . - 7th ed . - Boston, Mass.; London : Addison-Wesley, 2004. P.313-487</p>
<p>Safety-Critical Systems Symposium (12th :Birmingham, England : 2004) <hi rend="bold">Practical elements of safety : Proceedings of the twelfth Safety-Critical Systems . -</hi> London : Springer, 2004. P.105-136, P.163-170</p>
<p>Storey, Neil <hi rend="bold">Safety-critical computer systems</hi> / Neil Storey . - Harlow : Addison-Wesley, 1996 . The whole book</p>
<p>Alan Dix. <hi rend="bold">Human-computer interaction / 3rd Edition.</hi> Prentice Hall, 2004</p>
<p>Redmond-Pyle, David, 1953- <hi rend="bold">Graphical user interface design and evaluation (GUIDE) : a practical process . -</hi> London : Prentice Hall, 1995.</p>
<p>HP Journal Online. <hi rend="bold">Testing Safety-Critical Software </hi>
<seg type="URL" n="http://www.hpl.hp.com/hpjournal/97jun/jun97a12.htm"/>
</p>
<p>
<hi rend="bold">Insights from Assessments of Safety Software Quality Assurance </hi>
<seg type="URL" n="http://www.eh.doe.gov/sqa/lessons_learned/SQAInsightsatHanfordJune05.pdf"/>
</p>
<p>Draper Laboratory - <hi rend="bold">Space Systems </hi>
<seg type="URL" n="http://www.draper.com/business/space/space.htm"/>
</p>
<p>
<hi rend="bold">IEC 61508 </hi>
<hi rend="underlined">
<seg type="URL" n="http://www.iec.ch/zone/fsafety/fsafety_entry"/>. htm</hi>
</p>
<p>The World Wide Web Virtual Library - <hi rend="bold">Safety-Critical Systems </hi>
<seg type="URL" n="http://vl.fmnet.info/safety/"/>
</p>
<p>
<hi rend="bold">Real-World Projects Powered by the Ada Programming Language </hi>
<seg type="URL" n="http://www.seas.gwu.edu/~mfeldman/ada-project-summary.html"/>
</p>
<p>
<hi rend="bold">Safari Tech Books Online </hi>
<seg type="URL" n="http://proquest.safaribooksonline.com/?uicode=oxfbrookes"/>
</p>
<p>
<hi rend="bold">Google Book Search</hi> Beta Service <seg type="URL" n="http://books.google.com/books?q=safety+critical+system+design+software"/>
</p>
</div1>
</back>
</text>
</TEI.2>
