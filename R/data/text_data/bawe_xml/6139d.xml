<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6139d" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>PseudoCode 4: Graph Data Model</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: student name; student number; assignment title. Page footer contains: page number. </note>
<note resp="British Academic Written English (BAWE) corpus project">Running text contains reference to external or missing appendix.</note>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2006-12</p>
<p n="module title">Computer Science Roadmap</p>
<p n="module code">SE1SC5</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">1058</p>
<p n="number of s-units">38</p>
<p n="number of p">26</p>
<p n="number of tables">1</p>
<p n="number of figures">1</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">4</p>
<p n="number of lists">1</p>
<p n="number of paragraphs formatted like lists">0</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">27.8</p>
<p n="average s-units per p">1.5</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">f</p>
<p n="year of birth">1987</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">Computational maths</p>
<p n="student ID">6139</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front/>
<body>
<div1 type="section">
<head rend="underlined">NP-Complete problems:</head>
<p n="p1.26">
<s n="s1.2;p1.26">When looking at the mentioned travelling sales person's problem, we see there are obviously an infinite amount of possibilities for the journey. </s>
<s n="s2.2;p1.26">As we do not discriminate on the starting point and know that they must always end at their start position (make a circuit) we can figure out the number of possible permutations on the journey. </s>
</p>
<p n="p2.26">
<s n="s1.2;p2.26">Using general logic we can see that there must be n! (n*(n-1)*(n-2)*...*(2)*(1)) number of permutations available. </s>
<s n="s2.2;p2.26">This is because if you have n cities you have n choices for the first city (and subsequent end city), then (n-1) choices for the second city and so on until you only have 1 choice for the second to last city (as we already know the last city must be the same as the first). </s>
</p>
<p n="p3.26">
<s n="s1.1;p3.26">Using this as a guide there must be 120 (5!) possible journeys available to the TSP. </s>
</p>
<p n="p4.26">
<s n="s1.2;p4.26">This is obviously too many to do simply by pen and paper and would probably be a waste of time actually working them all out by hand, as we could probably see the most efficient way of traversing the circuit by drawing a rough diagram (see appendix 1). </s>
<s n="s2.2;p4.26">By just simply using this diagram and by finding the shortest path from one node to another or maybe a slightly longer path but which includes visiting another node on the way, e.g. it is shorter to go straight from London to Cambridge than that via Stansted, however by going via Stansted it means we can then continue straight on from Cambridge, I have found what I believe to be the shortest path without the lengthy use of finding the length of every circuit possible to be: </s>
</p>
<figure id="BAWE_6139d-fig.001"/>
<p n="p5.26">
<s n="s1.1;p5.26">This circuit works out to be 237 miles. </s>
</p>
<p n="p6.26">
<s n="s1.1;p6.26">We can obviously not guarantee that this is definitely the shortest path as I have not worked out every possible circuit however within the limits I have this would be my most accurate idea of what the shortest circuit could be. </s>
</p>
<p n="p7.26">
<s n="s1.1;p7.26">When we talk about a NP Problem where n=30 the number of permutations would be 2.65*10 <hi rend="sup">32</hi> (265000000000000000000000000000000), as using the example given that it takes 1 nanosecond (1*10 <hi rend="sup">-9</hi> seconds) to find each circuit on a Dell Pentium PC it would take 4.42*10 <hi rend="sup">21</hi> seconds or 8.41*10 <hi rend="sup">15</hi> years. </s>
</p>
<p n="p8.26">
<s n="s1.1;p8.26">To verify this very loge number I found out how many processes would happen every year, by doing the following: </s>
</p>
<p n="p9.26">
<s n="s1.1;p9.26">First finding out how many nanoseconds there are in a year: </s>
</p>
<p n="p10.26">
<s n="s1.1;p10.26">
<formula notation="" id="BAWE_6139d-form.001"/> </s>
</p>
<p n="p11.26">
<s n="s1.1;p11.26">Then we know there are 3600 seconds in an hour and 24 hours in a day. </s>
</p>
<p n="p12.26">
<s n="s1.1;p12.26">Therefore there are 8.64*10 <hi rend="sup">12</hi> nanoseconds per day. </s>
</p>
<p n="p13.26">
<s n="s1.1;p13.26">Using 365 days a year there is 3.15*10 <hi rend="sup">16</hi> nanoseconds in a year, and this would be the same amount of processes a year. </s>
</p>
<p n="p14.26">
<s n="s1.1;p14.26">30! (number of processes needed)/ 3.15*10 <hi rend="sup">16</hi> (processes per year) would give the number of years needed to complete these processes. </s>
</p>
<p n="p15.26">
<s n="s1.3;p15.26">This gives an amazing 8.41*10 <hi rend="sup">15</hi> years to compute just the array of permutations of the above problem. </s>
<s n="s2.3;p15.26">This is obviously at present an unreachable goal. </s>
<s n="s3.3;p15.26">Something that seems so simple increases so rapidly as the n is increased. </s>
</p>
<p n="p16.26">
<s n="s1.2;p16.26">From my understanding an NP Complete problem is loosely speaking, a class of problems that are believed unsolvable within a reasonable amount of time in the worst case. </s>
<s n="s2.2;p16.26">Thus, approximation algorithms are very important for solving real-world problems such as the payphone coin collector problem?? </s>
</p>
<p n="p17.26">
<s n="s1.4;p17.26">There are other methods of finding the shortest possible circuits that would cut the amount of time, such as algorithms which rearrange the nodes and distances to find a path which is the shortest without computing every possible circuit. </s>
<s n="s2.4;p17.26">These algorithm works in a similar way to how a human works out their best guess of the shortest circuit. </s>
<s n="s3.4;p17.26">They are designed to notice which distances are very large and work out a way to go around them or avoid them. </s>
<s n="s4.4;p17.26">They also work out how to get from one place to another whether it is sometime more beneficial to go a little further but to go via another node. </s>
</p>
<p n="p18.26">
<s n="s1.1;p18.26">From Wikipedia.org the following are given as shortest path algorithms: </s>
</p>
<p n="p19.26">
<s n="s1.1;p19.26">The most important algorithms for solving this problem are: </s>
</p>
<list type="bulleted">
<item>
<hi rend="underlined">Dijkstra's algorithm</hi> - solves single source problem if all edge weights are greater than or equal to zero. Without worsening the run time, this algorithm can in fact compute the shortest paths from a given start point <hi rend="italic">s</hi> to <hi rend="italic">all other</hi> nodes. </item>
<item>
<hi rend="underlined">Bellman-Ford algorithm</hi> - solves single source problem if edge weights may be negative. </item>
<item>
<hi rend="underlined">A* search algorithm</hi> solves for single source shortest paths using heuristics to try to speed up the search </item>
<item>
<hi rend="underlined">Floyd-Warshall algorithm</hi> - solves all pairs shortest paths. </item>
<item>
<hi rend="underlined">Johnson's algorithm</hi> - solves all pairs shortest paths, may be faster than Floyd-Warshall on <hi rend="underlined">sparse graphs</hi>. </item>
<item>
<hi rend="underlined">Perturbation theory</hi>; finds (at worst) the locally shortest path</item>
</list>
</div1>
<div1 type="section">
<head rend="underlined">Halting Problem:</head>
<div2>
<head>Pseudo Code given as a general overview of what our program had to do:</head>
<p n="p20.26">
<s n="s1.1;p20.26">
<formula notation="" id="BAWE_6139d-form.002"/> </s>
</p>
<p n="p21.26">
<s n="s1.1;p21.26">My code of the above translated into a 'C' program: </s>
</p>
<p n="p22.26">
<s n="s1.1;p22.26">
<formula notation="" id="BAWE_6139d-form.003"/> </s>
</p>
<p n="p23.26">
<s n="s1.1;p23.26">
<formula notation="" id="BAWE_6139d-form.004"/> </s>
</p>
</div2>
<div2>
<head rend="underlined">Input: Output</head>
<table id="BAWE_6139d-tab.001">
<row>
<cell/>
</row>
</table>
<p n="p24.26">
<s n="s1.4;p24.26">From the above inputs we can see that the program always halts and never runs infintely. </s>
<s n="s2.4;p24.26">However from the above inputs it is not possible to say that the program will always stop, there will always be a number 1 bigger that the number you have tried that we can not sya for sure will work. </s>
<s n="s3.4;p24.26">As we can see the number 27 has a lot of printed output before it stops, if we looked at the pattern of number of terms in the output, for the number 21 there are 7 outputs for 25 there are 23 and for 27 there are over 110 outputs. </s>
<s n="s4.4;p24.26">This means it looks like the number of outputs is at least tripling when the input is increased by 2 or 4, so it is fair to predict that an input of 29 or 31 would produce over 330 outputs. </s>
</p>
<p n="p25.26">
<s n="s1.1;p25.26">With this extreme increase of outputs per small increase in input it is fair to say that the number of outputs would eventually become extremely large. </s>
</p>
<p n="p26.26">
<s n="s1.1;p26.26">The importance of the Halting Problem is that it was one of the first prolblems to be proved undecideable, with our instance of the above halting problems, it is fair to say that we can never guarantee that a random number that is inputted will always halt. </s>
</p>
</div2>
</div1>
</body>
<back>
<div1 type="missing or external appendix">
<p/>
</div1>
</back>
</text>
</TEI.2>
