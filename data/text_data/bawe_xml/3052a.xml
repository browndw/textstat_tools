<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_3052a" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Coursework 2</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
</notesStmt>
<sourceDesc>
<p n="level">3</p>
<p n="date">2005-10</p>
<p n="module title">Systems Programming</p>
<p n="module code">U08052</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">M</p>
<p n="number of authors">1</p>
<p n="number of words">723</p>
<p n="number of s-units">48</p>
<p n="number of p">25</p>
<p n="number of tables">0</p>
<p n="number of figures">2</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">6</p>
<p n="number of lists">1</p>
<p n="number of paragraphs formatted like lists">0</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">15.1</p>
<p n="average s-units per p">1.9</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1985</p>
<p n="first language">French</p>
<p n="education">OSa</p>
<p n="course">Computing</p>
<p n="student ID">3052</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<titlePart rend="italic">
<name type="student name"/> Student number: <name type="student ID"/>
</titlePart>
<titlePart rend="italic">Systems Programming (U08051)</titlePart>
<docTitle>
<titlePart rend="italic">Coursework 2</titlePart>
</docTitle>
<titlePart rend="italic">24th October 2005</titlePart>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="bold italic">Discussion of the program:</head>
<p n="p1.25">
<s n="s1.1;p1.25">This program is made up of 3 functions: <hi rend="italic">ExecuteCommandLine, main</hi> and <hi rend="italic"> NumberSpace.</hi> </s>
</p>
<div2>
<head rend="italic">The main function:</head>
<p n="p2.25">
<s n="s1.3;p2.25">The <hi rend="italic">main</hi> function prompts the user to enter a command line. </s>
<s n="s2.3;p2.25">This command line can be 'exit' if the user wants to quit the program. </s>
<s n="s3.3;p2.25">This main function contains a main loop which runs until the user enters 'exit'. </s>
</p>
<p n="p3.25">
<s n="s1.3;p3.25">After the user has entered a command line, the function <hi rend="italic">fork()</hi> is called in order to create a child process which will execute the command line. </s>
<s n="s2.3;p3.25">This child process calls the function <hi rend="italic">ExecuteCommandLine</hi> (see below to have more explanation) and the parent process waits its child end with the function <hi rend="italic">wait()</hi>. </s>
<s n="s3.3;p3.25">After the child process ends, the parent process tests what the child process returned in order to inform the user about the error if that is what happens. </s>
</p>
<p n="p4.25">
<s n="s1.1;p4.25">The following schema explains this process: </s>
</p>
<figure id="BAWE_3052a-fig.001"/>
<p n="p5.25">
<s n="s1.1;p5.25">The prompt message follows, </s>
</p>
<p n="p6.25">
<s n="s1.1;p6.25">
<formula notation="" id="BAWE_3052a-form.001"/> </s>
</p>
</div2>
<div2>
<head rend="italic">'ExecuteCommandLine' function:</head>
<p n="p7.25">
<s n="s1.3;p7.25">This function is called by the child process. </s>
<s n="s2.3;p7.25">The purpose of this function is to analyse the command line (analyse the pathname and the arguments) and then to execute this command line. </s>
<s n="s3.3;p7.25">This function has just one parameter, a string which is the command line. </s>
</p>
<p n="p8.25">
<s n="s1.2;p8.25">This function creates an array (char**, array of array of char) which will contain the pathname and all the parameters. </s>
<s n="s2.2;p8.25">This array is called <hi rend="italic">args</hi> in the program. </s>
</p>
<p n="p9.25">
<s n="s1.2;p9.25">In order to "extract" the argument from the command line, a "while loop" is used. </s>
<s n="s2.2;p9.25">This loop reads the command line character by character and then fills the array. </s>
</p>
<p n="p10.25">
<s n="s1.1;p10.25">The following schema show how is structured this array: </s>
</p>
<figure id="BAWE_3052a-fig.002"/>
<p n="p11.25">
<s n="s1.3;p11.25">After the array is filled, we can call the <hi rend="italic">execv</hi> function which executes a program. </s>
<s n="s2.3;p11.25">This function is a member of the <hi rend="italic">exec</hi> family. </s>
<s n="s3.3;p11.25">The synopsis of this function is, </s>
</p>
<p n="p12.25">
<s n="s1.1;p12.25">
<formula notation="" id="BAWE_3052a-form.002"/> </s>
</p>
<p n="p13.25">
<s n="s1.1;p13.25">Where <hi rend="italic">path</hi> is the pathname of the program and <hi rend="italic">argv[]</hi> is an array (array of array of char) which contains all the argument which have to be added to the command line (after <hi rend="italic">path</hi>). </s>
</p>
<p n="p14.25">
<s n="s1.3;p14.25">If no error has occurred, then the child process closes and the parent process wakes up. </s>
<s n="s2.3;p14.25">However, if an error has occurred, then the child process closes and returns the integer 2. </s>
<s n="s3.3;p14.25">Then the parent process catches this integer and informs the user about this error. </s>
</p>
</div2>
<div2>
<head rend="italic">'NumberSpace' function:</head>
<p n="p15.25">
<s n="s1.2;p15.25">This simple function returns the number of space in a string. </s>
<s n="s2.2;p15.25">It's called by the function <hi rend="italic">ExecuteCommandLine</hi> in order to count the number of argument in a command line. </s>
</p>
<p n="p16.25">
<s n="s1.3;p16.25">For example, if the command line is: <hi rend="italic">"./myprog arg1 arg2"</hi> then this function should return the integer 2 (because there are 2 space), so there is 2 arguments in the command line. </s>
<s n="s2.3;p16.25">Then, <hi rend="italic">ExecuteCommandLine</hi> add 1 to this number in order to count the pathname. </s>
<s n="s3.3;p16.25">So there are 3 argument within which the pathname. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold italic">Printout of a compilation:</head>
<p n="p17.25">
<s n="s1.1;p17.25">
<formula notation="" id="BAWE_3052a-form.003"/> </s>
</p>
<p n="p18.25">
<s n="s1.2;p18.25">We can see above that the compilation has no error. </s>
<s n="s2.2;p18.25">There is only one file, so no '.o' file are created. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold italic">Printout of program source code:</head>
<p n="p19.25">
<s n="s1.1;p19.25">
<formula notation="" id="BAWE_3052a-form.004"/> </s>
</p>
</div1>
<div1 type="section">
<head rend="bold italic">Test data:</head>
<p n="p20.25">
<s n="s1.1;p20.25">In this following printout, we can see several tests in several cases. </s>
</p>
<p n="p21.25">
<s n="s1.1;p21.25">
<formula notation="" id="BAWE_3052a-form.005"/> </s>
</p>
<p n="p22.25">
<s rend="italic" n="s1.1;p22.25">In this example several command line are entered until the user has entered 'exit'. </s>
</p>
<list type="ordered">
<item rend="italic">'hello' needn't argument and printouts a simple message</item>
<item rend="italic">'helloarg' is a simple program which printouts all the arguments</item>
<item rend="italic">' blabla' doesn't exist => child error => parent informs user</item>
<item rend="italic">Some tests follow using the program 'ls' (/bin/ls)</item>
</list>
<p n="p23.25">
<s n="s1.1;p23.25">
<formula notation="" id="BAWE_3052a-form.006"/> </s>
</p>
</div1>
<div1 type="section">
<head rend="bold italic">Reflection on results:</head>
<p n="p24.25">
<s n="s1.5;p24.25">Expected results are similar than the results which are obtained. </s>
<s n="s2.5;p24.25">The user can enter commands line with any arguments necessary. </s>
<s n="s3.5;p24.25">He can do that until he enters 'exit'. </s>
<s n="s4.5;p24.25">The command line is executed by an child process and the parent process wait for the end of the child process. </s>
<s n="s5.5;p24.25">If an error has occurred, then child process returns a special integer (2) and then the parent process inform the user about this error. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold italic">Conclusion on the problem:</head>
<p n="p25.25">
<s n="s1.4;p25.25">The system function <hi rend="italic">fork(),</hi> <hi rend="italic">wait()</hi> and <hi rend="italic">exec()</hi> allow to a process to delegate some tasks to another process (its child process). </s>
<s n="s2.4;p25.25">While the child process executes, the parent process can wait its child process or do another task. </s>
<s n="s3.4;p25.25">It can be very useful when a program has to execute the same task several times. </s>
<s n="s4.4;p25.25">For example, if a program has to execute a task (which can be a program execution) 4 times, it can create 4 child process which will execute this task in the same time (parallel execution). </s>
</p>
</div1>
</body>
<back/>
</text>
</TEI.2>
