<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6160c" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Pseudocode Coursework 2</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: date; student name; student number. Page footer contains: page number. </note>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2006-11</p>
<p n="module title">Computer Science Roadmap</p>
<p n="module code">SE1SC5</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">1361</p>
<p n="number of s-units">53</p>
<p n="number of p">37</p>
<p n="number of tables">0</p>
<p n="number of figures">3</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">4</p>
<p n="number of lists">4</p>
<p n="number of paragraphs formatted like lists">12</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">25.7</p>
<p n="average s-units per p">1.4</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1987</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">BSc Computer Science</p>
<p n="student ID">6160</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart rend="underlined bold">Pseudocode Coursework 2</titlePart>
</docTitle>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="underlined">
<hi rend="bold">1. Introduction</hi>
<hi rend="italic">and informal statement of requirements</hi>
</head>
<p n="p1.37">
<s n="s1.2;p1.37">In this coursework the problem to be solved is based on the analogy of a rat navigating a maze, trying to get from the entrance to the exit. </s>
<s n="s2.2;p1.37">Essentially, the aim is to develop a solution to the maze- i.e. find the path from the entrance to exit: </s>
</p>
<figure id="BAWE_6160c-fig.001"/>
<p n="p2.37">
<s n="s1.2;p2.37">A LIFO stack can be used to store the path taken. </s>
<s n="s2.2;p2.37">It will model the movements of the rat and allow retracing of steps in the case that a wall or "dead end" is encountered. </s>
</p>
<p n="p3.37">
<s n="s1.3;p3.37">On the assignment handout sheets, the maze is depicted in a form such that it appears that grid references are given in (Y, X) form rather than the conventional (X, Y). </s>
<s n="s2.3;p3.37">Also, the grid references are zero-based, i.e. the first cell is (0,0). </s>
<s n="s3.3;p3.37">Both these features indicate that the maze should be modelled using a two-dimensional array (as in C programming) because such an array has exactly the same properties. </s>
</p>
<div2>
<head rend="underlined">Assumptions</head>
<p n="p4.37">
<s n="s1.2;p4.37">For any model, assumptions must be made. </s>
<s n="s2.2;p4.37">The assumptions provided on the Exercise sheet shall be used: </s>
</p>
<p rend="bulleted" n="p5.37">
<s n="s1.2;p5.37">Mazes consist of walls and paths. </s>
<s n="s2.2;p5.37">Walls cannot be crossed and it is unknown what is on the other side. </s>
</p>
<p rend="bulleted" n="p6.37">
<s n="s1.1;p6.37">Movement is possible in four directions- North (N), South (S), East (E), West (W). </s>
</p>
<p rend="bulleted" n="p7.37">
<s n="s1.1;p7.37">At a junction, N,S,E,W directions are tried in that order. </s>
</p>
<p rend="bulleted" n="p8.37">
<s n="s1.1;p8.37">The entry and exit co-ordinates are given. </s>
</p>
<p n="p9.37">
<s rend="underlined" n="s1.1;p9.37">Other </s>
</p>
<p rend="bulleted" n="p10.37">
<s n="s1.1;p10.37">I make a further assumption and assume a <hi rend="bold">Peek()</hi> function is available to read the last <hi rend="bold">pushed</hi> value without removing it from the stack. </s>
</p>
<p rend="bulleted" n="p11.37">
<s n="s1.1;p11.37">It is assumed that functions/methods for finding the number of elements in an array and the sum of an array are already defined. </s>
</p>
</div2>
<div2>
<head>
<hi rend="underlined">Requirements</hi> :</head>
<p n="p12.37">
<s n="s1.2;p12.37">The algorithm must solve the maze and the solution should involve the Pop(), Push() and IsEmpty() operations. </s>
<s n="s2.2;p12.37">When this is achieved, the algorithm is complete and should terminate. </s>
</p>
<p n="p13.37">
<s n="s1.2;p13.37">Ideally, the algorithm should avoid revisiting squares unless a dead end has been encountered and it is attempting to find a valid path. </s>
<s n="s2.2;p13.37">When a dead end is encountered, Pop() should be used until it arrives back at a position that offers an alternate path. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">2. The Algorithm</head>
<div2>
<head rend="underlined">Initial conditions:</head>
<p rend="bulleted" n="p14.37">
<s n="s1.2;p14.37">The two-dimensional input array <hi rend="bold">M</hi> models the maze. </s>
<s n="s2.2;p14.37">"Wall" elements will be assigned the value of 1, while "Path" elements have the value zero: </s>
</p>
<figure id="BAWE_6160c-fig.002"/>
<p rend="bulleted" n="p15.37">
<s n="s1.3;p15.37">The LIFO stack <hi rend="bold">P</hi> will store the path, it is initially empty. </s>
<s n="s2.3;p15.37">Positions are stored in the form (I,J, dir). </s>
<s n="s3.3;p15.37">Where [I][J] is the array reference of the current element that the algorithm has arrived at. </s>
</p>
<p rend="bulleted" n="p16.37">
<s n="s1.1;p16.37">The LIFO stack <hi rend="bold">D</hi> to store possible directions is initially empty.. </s>
</p>
<p rend="bulleted" n="p17.37">
<s n="s1.1;p17.37">The variable DSize will be used to store the number of elements in stack D </s>
</p>
<p rend="bulleted" n="p18.37">
<s n="s1.2;p18.37">dir will be initialised to 0. </s>
<s n="s2.2;p18.37">During run-time, it will take one of four values 1,2,3,4- corresponding to the 4 possible directions North, South, East and West. </s>
</p>
<p rend="bulleted" n="p19.37">
<s n="s1.1;p19.37">The <hi rend="bold">Entry</hi> co-ordinate is A(I <hi rend="sub">A</hi>,J <hi rend="sub">A</hi>) and the <hi rend="bold">Exit</hi> co-ordinate is B(I <hi rend="sub">B</hi>,J <hi rend="sub">B</hi>). </s>
</p>
</div2>
<div2>
<head rend="underlined">2a. Expressed informally as a sequence of steps</head>
<p n="p20.37">
<s n="s1.2;p20.37">The following is designed as a general solution to work for any maze. </s>
<s n="s2.2;p20.37">However, the more complex the maze is, the longer the running time. </s>
</p>
<list type="ordered">
<item>1) First there must be a LOOK function to obtain information about the spaces to the North, South, East and West so that the algorithm can determine which direction to move to. It also ensures that the algorithm will never try to go through walls/obstacles. The LOOK takes Peek(P) as input and returns a stack D indicating which directions are valid moves (i.e. moves which do not mean trying to move through a wall) and the number of possible valid moves (the variable DSize).</item>
<item>Given that it has been specified that movements at junctions must be tried in the order N,S,E,W, these directions are "Looked" in reverse order so that when stack D is <hi rend="bold">Pop</hi>ped, the directions are tried in the order specified on the exercise sheet.</item>
<item>2) The algorithm runs until the exit co-ordinate is reached- i.e. until Peek(P) == B. The algorithm begins at the entry co-ordinates, which is <hi rend="bold">Push</hi>ed into stack <hi rend="bold">P</hi>.</item>
<item>3) Use LOOK with Peek(P) as input. </item>
<item>4a) If there is only one valid move, that move is made. Or if there is more than one possible direction then the algorithm is on a junction. The first available move is made based on the order NSEW by Pop(D). Then, depending on direction, the appropriate position is <hi rend="bold">Push</hi>ed into <hi rend="bold">P</hi> and algorithm moves into that direction.</item>
<item> The array element representing the cell that the algorithm is leaving is marked by changing its value from 0 to 1. This results in it being impassable so that the algorithm will not revisit it.</item>
<item>4b) If there are no possible moves, Pop(P) and Look(Peek(P)) until DSize > 1.</item>
<item>6) Repeat steps 3-5.</item>
<item>7) When Peek(P) == B, the sum of array M is equal to the number of elements because every one of its elements will equal 1.</item>
<item>8) Output Stack P and terminate algorithm.</item>
</list>
</div2>
<div2>
<head rend="underlined">2b. Expressed as Pseudocode</head>
<p n="p21.37">
<s rend="italic" n="s1.1;p21.37">In this section I make comments in italics. </s>
</p>
<p n="p22.37">
<s n="s1.1;p22.37">
<hi rend="italic">Here I refer to the I or J parts of the co-ordinates in the form</hi> A.I <hi rend="italic"> and</hi> A.J,<hi rend="italic"> like this:</hi> Peek(P).I <hi rend="italic">and</hi> Peek(P).J, <hi rend="italic">where</hi> A <hi rend="italic"> is the co-ordinate.</hi> </s>
</p>
<p n="p23.37">
<s rend="italic" n="s1.1;p23.37">Assume the starting values: </s>
</p>
<p n="p24.37">
<s n="s1.1;p24.37">
<formula notation="" id="BAWE_6160c-form.001"/> </s>
</p>
<p n="p25.37">
<s rend="italic" n="s1.1;p25.37">In an actual program, the co-ordinates would probably be represented by a pair of linked-lists. </s>
</p>
<p n="p26.37">
<s rend="italic" n="s1.1;p26.37">LOOK function defined to provide information about surroundings: </s>
</p>
<p n="p27.37">
<s n="s1.1;p27.37">
<formula notation="" id="BAWE_6160c-form.002"/> </s>
</p>
<p n="p28.37">
<s rend="italic" n="s1.1;p28.37">For easier reading I will refer to the lengthy LOOK function calls as follows: </s>
</p>
<p n="p29.37">
<s n="s1.1;p29.37">
<formula notation="" id="BAWE_6160c-form.003"/> </s>
</p>
<p n="p30.37">
<s rend="italic" n="s1.1;p30.37">Each cycle of while loop updates stack so that top of the stack shows the co-ordinates and direction of next square. </s>
</p>
<p n="p31.37">
<s rend="bold italic" n="s1.1;p31.37">Pseudocode program begins here: </s>
</p>
<p n="p32.37">
<s n="s1.1;p32.37">
<formula notation="" id="BAWE_6160c-form.004"/> </s>
</p>
<p n="p33.37">
<s rend="italic" n="s1.1;p33.37">End of Algorithm </s>
</p>
<p n="p34.37">
<s rend="bold italic" n="s1.2;p34.37">Pseudocode program ends. </s>
<s rend="bold" n="s2.2;p34.37"> </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">3. Algorithm Properties:</head>
<list type="ordered">
<item>
<hi rend="underlined">Input:</hi> The array <hi rend="bold">M</hi> containing the maze to be navigated, the entry co-ordinate and the exit co-ordinate.</item>
<item>
<hi rend="underlined">Output:</hi> A LIFO stack containing the solution to the maze or an error message.</item>
<item>
<hi rend="underlined">Definiteness:</hi> Each step is precisely defined using only assignment, conditionals and loop statements. </item>
<item>
<hi rend="underlined">Finiteness:</hi> If the maze has a solution then the algorithm terminates when this solution is found, i.e. the exit co-ordinate is reached. If there is no solution, it will terminate once the entire maze has been processed. Therefore the algorithm has a finite number of steps.</item>
<item>
<hi rend="underlined">Effectiveness:</hi> Each step of the algorithm is either a comparison or an assignment operation so will take a finite amount of time.</item>
<item>
<hi rend="underlined">Correctness:</hi> Yes, providing the maze is solvable, algorithm outputs a stack containing the solution to the maze. If the maze is not solvable, an error message is output instead.</item>
</list>
<p n="p35.37"/>
</div1>
<div1 type="section">
<head rend="underlined bold">4. Trace</head>
<div2>
<head rend="underlined">For the example given:</head>
<p n="p36.37">
<s n="s1.5;p36.37">The starting square is given by the position (3,0,0). </s>
<s n="s2.5;p36.37">The following is a trace of the "state" space of the algorithm showing all the positions that are recorded in the LIFO from start to finish. </s>
<s n="s3.5;p36.37">Reminder, the third figures mean as follows: 1=North, 2=South, 3=East, 4=West. </s>
<s n="s4.5;p36.37">Note that for my own maze in particular, the table is a complete transcript of the actual route taken. </s>
<s n="s5.5;p36.37">The P stack that the program produces will be more concise and will not have repeated co-ordinates. </s>
</p>
<figure id="BAWE_6160c-fig.003"/>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">5. The Space Required</head>
<div2>
<head rend="underlined">Calculation of the space required</head>
<list type="simple">
<head>For the maze:</head>
<item>For a maze X columns by Y rows, there is a border of padding cells around it which will be filled with 1s.</item>
<item>For an array to store such a maze, it must be able to store (total height * total width) number of elements.</item>
<item>The total height of each column is Y + 2 padding cells.</item>
<item>The total width of each row is X + 2 padding cells.</item>
<item>Therefore the total number of elements required is (Y+2)(X+2).</item>
<item>So for example, the maze I have created requires (10+2)(5+2) = 84 elements.</item>
</list>
<list type="simple">
<head>For the stacks:</head>
<item>The main stack P which stores the path as it is being found. The stack must have enough space to accommodate all possible routes.</item>
<item>Movement is permitted in four directions and the maze itself (excluding borders) is X*Y.</item>
<item>Therefore, to ensure sufficient storage space, the stack should be able to accommodate X*Y*4 positions.</item>
<item>So for my maze, this equates to 200 spaces.</item>
</list>
<p n="p37.37"/>
</div2>
</div1>
</body>
<back/>
</text>
</TEI.2>
