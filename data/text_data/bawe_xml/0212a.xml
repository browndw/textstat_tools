<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_0212a" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Coursework II</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document title</note>
<note resp="British Academic Written English (BAWE) corpus project">Language used in quote: <foreign id="English">English</foreign>
</note>
<note resp="British Academic Written English (BAWE) corpus project">appendix: code listing</note>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2006-04</p>
<p n="module title">Computer Organisation and Architecture</p>
<p n="module code">CS132</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">2</p>
<p n="number of words">2750</p>
<p n="number of s-units">136</p>
<p n="number of p">50</p>
<p n="number of tables">1</p>
<p n="number of figures">0</p>
<p n="number of block quotes">1</p>
<p n="number of formulae">4</p>
<p n="number of lists">2</p>
<p n="number of paragraphs formatted like lists">7</p>
<p n="abstract present">abstract present</p>
<p n="average words per s-unit">20.2</p>
<p n="average s-units per p">2.7</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1986</p>
<p n="first language">English</p>
<p n="education">UKA</p>
<p n="course">Computer Science</p>
<p n="student ID">0212</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart>Computer Organisation and architecture Coursework 2</titlePart>
</docTitle>
</titlePage>
<div1 type="toc" n="2">
<p/>
</div1>
</front>
<body>
<div1 type="abstract">
<head rend="bold">SUMMARY</head>
<p n="p1.50">
<s n="s1.5;p1.50">The paper covers the design, implementation and testing of a reaction game involving two keypads, an LCD screen, SWET box and computer terminal. </s>
<s n="s2.5;p1.50">The team's decision about how to create a reaction game from the equipment, and the reasons behind this are also discussed. </s>
<s n="s3.5;p1.50">Previous knowledge of the team is outlined to put the accomplishments, targets and solutions to problems into a better perspective. </s>
<s n="s4.5;p1.50">The paper covers issues relating to problems that were encountered and action taken towards their solution. </s>
<s n="s5.5;p1.50">Pen ultimately, a discussion on the performance of the system is outlined before the conclusions of the project </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">INTRODUCTION</head>
<p n="p2.50">
<s n="s1.5;p2.50">The chosen project was the Reaction Game. </s>
<s n="s2.5;p2.50">It involved using two keypads, and LCD screen and a SWET box to create a game whereby the reactions of two players were pitted against one another. </s>
<s n="s3.5;p2.50">The basic idea of the game was to display something on the LCD screen. </s>
<s n="s4.5;p2.50">The speed at which a correct key was pressed determined who won. </s>
<s n="s5.5;p2.50">From this starting point a more detailed specification was developed (see Analysis of System Specification, Design Details). </s>
</p>
<p n="p3.50">
<s n="s1.2;p3.50">It was decided that rather than split up responsibilities to each team member it would be more time efficient to work on a single problem collectively. </s>
<s n="s2.2;p3.50">Approximately half way through each of the three lab sessions the role of programmer would switch so as to distribute the work load fairly. </s>
</p>
<p n="p4.50">
<s n="s1.2;p4.50">Previous experience of using the SWET box was limited to a total of three, three hour lab sessions within the course. </s>
<s n="s2.2;p4.50">LCD screens and the Keypads had never been encountered prior to the project. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">ANALYSIS OF SYSTEM SPECIFICATION, DESIGN DETAILS</head>
<p n="p5.50">
<s n="s1.1;p5.50">The project outline given to the team was: </s>
</p>
<quote lang="English">"The object of this project is to implement a game that will test the reaction of two players. Available for this are two keypads, one for each player, each containing 16 switches. A pixel addressable LCD display is also available which can be used to display objects / shapes in various positions to provoke a particular key to be pressed on the keypad."</quote>
<p n="p6.50">
<s n="s1.4;p6.50">To fulfil this we first decided on how communicating the required response from the user was to be achieved, it was decided that the goal was to display a random number of lines on the LCD screen as this was an easily understandable task for the user. </s>
<s n="s2.4;p6.50">The second consideration was to then how to check which player pressed the corresponding number on the keypad. </s>
<s n="s3.4;p6.50">E.g. if 7 lines were displayed on the LCD screen a player would have to press "7" on their respective keypad and the system would have to differentiate this from an undesired response. </s>
<s n="s4.4;p6.50">The first player to press the correct key then would win the round. </s>
</p>
<p n="p7.50">
<s n="s1.1;p7.50">The final consideration was to have some sort of scoring system to add a competitive element to the game, as such it was decided that the game would include 10 rounds which constituted one match. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">SYSTEM IMPLEMENTATION AND TESTING</head>
<p n="p8.50">
<s n="s1.2;p8.50">The system was developed using a modular approach. </s>
<s n="s2.2;p8.50">Three phases... </s>
</p>
<list type="ordered">
<item>Write to screen </item>
<item>Read inputs </item>
<item>Calculate winner.</item>
</list>
<p n="p9.50">
<s n="s1.1;p9.50">These three phases were broken down into a number of separate methods detailed below </s>
</p>
<div2>
<head rend="underlined bold">INITIALISING/ CLEARING SCREEN</head>
<p n="p10.50">
<s n="s1.7;p10.50">Given the project sheet it was decided the first sensible step to take was to familiarise ourselves with the registers and ports to be used. </s>
<s n="s2.7;p10.50">The first step was to initialise the LCD screen to an appropriate default using the given Instruction Codes and values. </s>
<s n="s3.7;p10.50">The default state of the LCD screen was whatever had been on the screen last time the system was active. </s>
<s n="s4.7;p10.50">This necessitated the design of a clearScreen () procedure. </s>
<s n="s5.7;p10.50">This was achieved by iterating through each byte of the display and writing 0x00 (the equivalent of a blank) to the set of pixels. </s>
<s n="s6.7;p10.50">The first few implementations of this code did not work quite as expected but through debugging it was found to be due to the cursor remaining in place when the system was deactivated. </s>
<s n="s7.7;p10.50">This was easily remedied by initialing the cursor to the top left location of the screen when the procedure was called. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">DRAWING LINES TO LCD</head>
<p n="p11.50">
<s n="s1.2;p11.50">Now that the screen could be initialised it was decided to implement a method which would write a single line in an arbitrary location on the LCD screen. </s>
<s n="s2.2;p11.50">The project sheet gave the location of the first addressable segment of the LCD screen. </s>
</p>
<p n="p12.50">
<s n="s1.3;p12.50">The process of writing to the LCD screen involved writing to the data register sequentially. </s>
<s n="s2.3;p12.50">Initially, the CURSOR instruction was written with a value of the first addressable location. </s>
<s n="s3.3;p12.50">This was followed by a WRITE instruction which wrote a byte to the current cursor position. </s>
</p>
<p n="p13.50">
<s n="s1.3;p13.50">Once this was completed we tested the system by trying to write a number of lines to the screen at defined locations. </s>
<s n="s2.3;p13.50">We found that despite moving the cursor existing lines were not removed, this was a variation of the problems experienced earlier with lines remaining after system shutdown. </s>
<s n="s3.3;p13.50">The problem was solved by calling the clearScreen() method immediately before writing to the LCD screen at different locations. </s>
</p>
<p n="p14.50">
<s n="s1.4;p14.50">To allow drawLines() method to be called in the future it was extended with the addition of parameters. </s>
<s n="s2.4;p14.50">By passing in two parameters p and q which represented the cursor's CURSOR_L and Cursor_H bytes the method would write to a given location on the LCD screen. </s>
<s n="s3.4;p14.50">To test the method we passed it a number of parameters from the main method. </s>
<s n="s4.4;p14.50">The fact that all lines were written to the correct location sufficiently proved the method was working. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">READ INPUT</head>
<p n="p15.50">
<s n="s1.4;p15.50">A key part to the system was being able to read inputs from the keypads. </s>
<s n="s2.4;p15.50">To avoid possible confusion and to provide a base from which to build on we decided to use only one keypad. </s>
<s n="s3.4;p15.50">We would develop the methods to read from one keypad, translate its input and output this number on the monitor. </s>
<s n="s4.4;p15.50">These methods would then be transferable to the second keypad in the final phase of development. </s>
</p>
<p n="p16.50">
<s n="s1.4;p16.50">The first solution which was implemented was to enter a busy waiting loop whereby values would stream into the system from the input keypad until a value other than the default was detected. </s>
<s n="s2.4;p16.50">In theory the method would work but when put into practice the values were read in at such a rate it was difficult to differentiate between the values Additionally, the values received were incomprehensible to us. </s>
<s n="s3.4;p16.50">Initially we misinterpreted the project sheet and considered the inputs from keypad as one byte outputting a binary value, however on rereading the sheet we found the row and column values as being nibbles in one byte. </s>
<s n="s4.4;p16.50">We worked around this by masking off the first four bits to read the column value, then masking the second four bits and reading in the row value. </s>
</p>
<p n="p17.50">
<s n="s1.4;p17.50">To combat the excess speed issues we implemented a delay looping procedure delay (loops) which would monopolise processor time for a given time period. </s>
<s n="s2.4;p17.50">The time period was in approximately milliseconds i.e. </s>
<s n="s3.4;p17.50">5000 results in a 0.5 second delay. </s>
<s n="s4.4;p17.50">This was useful in debugging as it allowed us to document the hard coded values that a keypad press gave these are illustrated below: </s>
</p>
<p n="p18.50">
<s n="s1.4;p18.50">When reading from keypad A and B we had problems with dropping out of loops. </s>
<s n="s2.4;p18.50">Initially it would wait until A was correct before it checked B; this meant there was no way B could win. </s>
<s n="s3.4;p18.50">The solution to this was to have a found flag with the loop that checked if Keypad A was correct. </s>
<s n="s4.4;p18.50">If not it would drop out of Keypad A loop and read Keypad B. If both were incorrect i.e. found flag = false then the loop would restart reading in keypad A again. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">TRANSLATE</head>
<p n="p19.50">
<s n="s1.2;p19.50">Our testing provided us with a set of row and column values for each key pressed on the keypad however in cognitive terms this was hard to understand. </s>
<s n="s2.2;p19.50">We decided that a method which read in these two values and translated them to denary was necessary. </s>
</p>
<p n="p20.50">
<s n="s1.5;p20.50">The translate (col, row) method post condition was to output a denary value of the inputs. </s>
<s n="s2.5;p20.50">There were two options available. </s>
<s n="s3.5;p20.50">The first option was to develop a loop and a 2D array of the codes associated with each key. </s>
<s n="s4.5;p20.50">The inputted values would determine the location in the 2D array of the denary value. </s>
<s n="s5.5;p20.50">The second option was to simply have 16 if statements which would compare the parameters with each statement until a match was found. </s>
</p>
<p n="p21.50">
<s n="s1.2;p21.50">We decided that the time needed to implement a 2D array was too much, any slight gain in performance would barely have been noticeable. </s>
<s n="s2.2;p21.50">We decided to keep the system simple and therefore use 16 IF statements, the equivalent of a switch statement in java. </s>
</p>
<p n="p22.50">
<s n="s1.1;p22.50">A useful feature of this translate feature that we were unaware of at the time of coding is that if the user presses more than one keys simultaneously, thereby 'cheating', then it outputs the default value and behaves if no key is pressed. </s>
</p>
<p n="p23.50">
<s n="s1.2;p23.50">The testing for translate consisted of a single print statement which would output the translated value of the keypad. </s>
<s n="s2.2;p23.50">We coupled this with our reading loop passing the values to translate() and so streamed output to the terminal window. </s>
</p>
<p n="p24.50">
<s n="s1.1;p24.50">
<formula notation="" id="BAWE_0212a-form.001"/> </s>
</p>
<p n="p25.50">
<s n="s1.8;p25.50">However, we never achieved the correct output. </s>
<s n="s2.8;p25.50">Instead of outputting the true value a value of % was output. </s>
<s n="s3.8;p25.50">To solve this two temporary flags were used; if a pre determined key was pushed the flags would be set to 1. </s>
<s n="s4.8;p25.50">A single print statement would output whether the key was pressed. </s>
<s n="s5.8;p25.50">By doing this we could find if the correct value was selected or whether it was our print statement. </s>
<s n="s6.8;p25.50">Our program passed this test and otherwise worked. </s>
<s n="s7.8;p25.50">After seeking assistance we were advised on how to output a denary value of a variable, unlike java c requires you to specify the data type of the output. </s>
<s n="s8.8;p25.50">This immediately solved the problem: </s>
</p>
<p n="p26.50">
<s n="s1.1;p26.50">
<formula notation="" id="BAWE_0212a-form.002"/> </s>
</p>
<p n="p27.50">
<s n="s1.1;p27.50">The translate() function was now fully operational. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">RANDOM GENERATOR</head>
<p n="p28.50">
<s n="s1.5;p28.50">To have a random sequence of numbers was crucial to ensure longevity of the game. </s>
<s n="s2.5;p28.50">An option was to store a large array of values which we "hard coded" and access them sequentially. </s>
<s n="s3.5;p28.50">A better option was to import the random library into the code. </s>
<s n="s4.5;p28.50">After numerous attempts at importing the library it became evident it was not possible, this was later explained to be due to an incompatibility with the SWET boards hardware. </s>
<s n="s5.5;p28.50">To overcome this setback we decided to utilize user input; users would input a sequence of ten numbers that would be run through an algorithm to give some pseudo random numbers. </s>
</p>
<p n="p29.50">
<s n="s1.1;p29.50">The algorithm decided upon was our own simple implementation of a prime number driven, modulus based calculation: </s>
</p>
<p n="p30.50">
<s n="s1.1;p30.50">
<formula notation="" id="BAWE_0212a-form.003"/> </s>
</p>
<p n="p31.50">
<s n="s1.3;p31.50">To test this equation we passed each possible value that could be inputted via the keypad. </s>
<s n="s2.3;p31.50">The results proved that there was an even spread of numbers. </s>
<s n="s3.3;p31.50">These numbers could be passed into an array which would then be accessed sequentially based on the round of the game. </s>
</p>
<p n="p32.50">
<s n="s1.8;p32.50">To get these values a simple method called readStart() was created. </s>
<s n="s2.8;p32.50">It read from Keypad A continuously until ten numbers were input. </s>
<s n="s3.8;p32.50">To store the values in an array the translate() method was called. </s>
<s n="s4.8;p32.50">To test the inputting of random numbers we simply inputted ten numbers and wrote a simple method to output the contents of the array. </s>
<s n="s5.8;p32.50">As the output of array was random after each of the five rounds of testing it was decided that the readStart() method was a success. </s>
<s n="s6.8;p32.50">The method also functioned when a non numeric key was pressed (e.g. </s>
<s n="s7.8;p32.50">A, B, C or D). </s>
<s n="s8.8;p32.50">An output of one of the testing rounds is detailed below. </s>
</p>
<table id="BAWE_0212a-tab.001">
<row>
<cell/>
</row>
</table>
<p n="p33.50">
<s n="s1.1;p33.50">A test program, printArray() was used to output the value stored in the array once values had been entered. </s>
</p>
<p n="p34.50">
<s n="s1.1;p34.50">
<formula notation="" id="BAWE_0212a-form.004"/> </s>
</p>
<p n="p35.50">
<s n="s1.3;p35.50">The detailed brief suggested "lighting up squares" on a four by four grid but we believed the usage of boxes was too basic. </s>
<s n="s2.3;p35.50">We wanted to make the user actually try and engage with the program. </s>
<s n="s3.3;p35.50">So by writing a random number of lines to the LCD screen we could make the user "work" and hopefully enjoy the challenge. </s>
</p>
</div2>
<div2>
<head rend="underlined bold">USER INTERFACE</head>
<p n="p36.50">
<s n="s1.1;p36.50">The final aspect of the system was adding a user friendly interface we decided upon the following features all implemented to display on the terminal window: </s>
</p>
<list type="bulleted">
<item>A welcome message asking the user for ten numbers of input</item>
<item>A countdown timer, this was activated before printing lines to the screen</item>
<item>An end of game message that announced the winner and the scores for each player</item>
</list>
<p n="p37.50">
<s n="s1.5;p37.50">The test the calculation of the winner we simply played the game. </s>
<s n="s2.5;p37.50">One round Keypad A would win by a score of 6-4. </s>
<s n="s3.5;p37.50">The next round Keypad B would win by the same score. </s>
<s n="s4.5;p37.50">In case of a draw the final test was to have a score of 5-5. </s>
<s n="s5.5;p37.50">All tests passed first time. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">ANALYSIS AND DISCUSSION OF SYSTEM PERFORMANCE</head>
<p n="p38.50">
<s n="s1.2;p38.50">The final solution worked well and met our specification. </s>
<s n="s2.2;p38.50">It allowed two players to pit themselves against each other and would reward the faster player. </s>
</p>
<p n="p39.50">
<s n="s1.1;p39.50">However, there were a handful of minor issues that arose. </s>
</p>
<p rend="bulleted" n="p40.50">
<s n="s1.2;p40.50">During the time between two rounds of a match being played the LCD screen did not completely clear instantly. </s>
<s n="s2.2;p40.50">We are unsure of the cause of this but it does not hamper gameplay in any way so we did not actively seek to change it. </s>
</p>
<p rend="bulleted" n="p41.50">
<s n="s1.2;p41.50">When inputting the ten random numbers before the match began, for the system to work, there had to be a slight delay between the pressings of the ten numbers. </s>
<s n="s2.2;p41.50">This was only a fraction of a second, approximately 0.4 seconds this was due to the delay procedure necessary to stop the same number being read in ten times in quick succession. </s>
</p>
<p rend="bulleted" n="p42.50">
<s n="s1.2;p42.50">Loading time into the SWET box was quite long mainly owing to the number of print statements used. </s>
<s n="s2.2;p42.50">It took approximately twenty seconds for loading to complete. </s>
</p>
<p rend="bulleted" n="p43.50">
<s n="s1.3;p43.50">Finally, when trying to play two matches one after the other the scores for each player carried over from the previous round. </s>
<s n="s2.3;p43.50">This ability to play multiple matches was an extension of our original specification. </s>
<s n="s3.3;p43.50">Due to time constraints it wasn't possible to fix this issue but we believe the solution lays in the fact that the scores were stored in global variables and these were not reset at the correct time i.e. the commencement of a new match. </s>
</p>
<div2>
<head rend="underlined bold">EXTENSIONS</head>
<p rend="bulleted" n="p44.50">
<s n="s1.2;p44.50">A possible extension would be to have timer on the loop so if nothing was pressed within a certain time limit nether player would win, this would be tricky to implement if based on time as the library function is unavailable. </s>
<s n="s2.2;p44.50">However by trial and error a count system could be included in the reading functions. </s>
</p>
<p rend="bulleted" n="p45.50">
<s n="s1.2;p45.50">Another improvement could be to include switching each round between checking Keypad A or Keypad B first. </s>
<s n="s2.2;p45.50">The slight discrepancy between the readings of each keypad could be further reduced; however this is only an issue if player A presses on the correct key before the round begins. </s>
</p>
<p rend="bulleted" n="p46.50">
<s n="s1.2;p46.50">Instead of simple horizontal lines to count other shapes and images could be generated. </s>
<s n="s2.2;p46.50">This would be an epic task as the pixels are all individually controlled, but would be rewarding as it could then be used in simple entertainment systems for children </s>
</p>
</div2>
<div2>
<head rend="underlined bold">PRACTICAL USES</head>
<p n="p47.50">
<s n="s1.1;p47.50">There are limited uses for these types of reaction games but they exist nonetheless, one such application as mentioned before is as a simple counting game for children of primary school age, it has been proven that visual stimulation is important for the development of the children's' intelligence and this would be a good way of doing so. </s>
</p>
<p n="p48.50">
<s n="s1.3;p48.50">A second option is as part of the "shocking games" section of the market. </s>
<s n="s2.3;p48.50">This is targeted at a mature audience as a novelty toy whereby the slowest reacting person gets a mild electric shock; there is a simpler version of this currently available from a number of shops including the menswear store Burtons. </s>
<s n="s3.3;p48.50">Hence the potential for sales exists. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">CONCLUSIONS</head>
<p n="p49.50">
<s n="s1.1;p49.50">The project has shown that high end graphics and intricate rules aren't a necessity when it comes to developing an enjoyable and stimulating game. </s>
</p>
<p n="p50.50">
<s n="s1.3;p50.50">The project has been a great success, in nine hours a working system has been produced in an unfamiliar language, integrating hardware that had not been used by the team before. </s>
<s n="s2.3;p50.50">Furthermore by distancing ourselves from the traditional square lighting approach to solving this problem we feel we have taken the project to another more enjoyable level. </s>
<s n="s3.3;p50.50">Similarly the system fulfils the specification and the competitive element is exciting for the user. </s>
</p>
</div1>
</body>
<back>
<div1 type="appendix">
<head rend="bold">APPENDIX 1</head>
<p/>
</div1>
</back>
</text>
</TEI.2>
