<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6108e" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Appointment Module for Sony Ericsson S710a Mobile Telephone - Project Codename "CellCal"</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: assignment title. Page footer contains: page number. </note>
</notesStmt>
<sourceDesc>
<p n="level">2</p>
<p n="date">2005-04</p>
<p n="module title">Programming and Design</p>
<p n="module code">CS2TP3</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">M</p>
<p n="number of authors">1</p>
<p n="number of words">2411</p>
<p n="number of s-units">72</p>
<p n="number of p">35</p>
<p n="number of tables">0</p>
<p n="number of figures">5</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">0</p>
<p n="number of lists">1</p>
<p n="number of paragraphs formatted like lists">6</p>
<p n="abstract present">abstract present</p>
<p n="average words per s-unit">33.5</p>
<p n="average s-units per p">2.1</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1983</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">BSc Information Technology</p>
<p n="student ID">6108</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<titlePart>Programming and Design (CS2TP3)</titlePart>
<docTitle>
<titlePart>Appointment Module for Sony Ericsson S710a Mobile Telephone Project Codename <hi rend="bold">"CellCal"</hi>
</titlePart>
</docTitle>
<titlePart>Project Report<name type="student name"/>
<name type="university"/> April 2005</titlePart>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="bold">Introduction</head>
<figure id="BAWE_6108e-pic.002">
<head>
<hi rend="bold">Figure 1.</hi> The Sony Ericsson S710a handset</head>
</figure>
<p n="p1.35"/>
</div1>
<div1 type="abstract">
<head rend="bold">Abstract</head>
<p n="p2.35">
<s n="s1.4;p2.35">The Sony Ericsson S710a Mobile Telephone, part of the S700 family, is part of Sony Ericsson's new generation of mobile phones, equipped to the latest standards, to be launched in the United States and European markets, including the United Kingdom. </s>
<s n="s2.4;p2.35">Featuring a 1.3 Megapixel digital camera, Bluetooth wireless interface, and a memory expansion slot (with which a Sony Memory Stick duo can be used to increase available system memory for storage). </s>
<s n="s3.4;p2.35">The telephone features a large, high-resolution colour screen and 32MB main memory. </s>
<s n="s4.4;p2.35">A full specification of the unit can be found on the Sony Ericsson web page referenced at the end of this report [1]. </s>
</p>
</div1>
<div1 type="section">
<div2>
<head rend="bold">Project Brief &amp; Overview</head>
<p n="p3.35">
<s n="s1.3;p3.35">For the new Sony Ericsson S710a, part of the launch of the new handset is the design and development of software for the product. </s>
<s n="s2.3;p3.35">One such piece of software to be produced is an 'Appointment Module' designed to work in connection with the SIM card, address book, and other functionality already present in the phone's bundled software. </s>
<s n="s3.3;p3.35">Sony Ericsson desire that this appointment module should allow users to enter appointments into a calendar interface, stored in the handset, which will hold corresponding contact details of involved parties with the appointments, in order that when an appointment is due, each person concerned with the appointment may be issued a text message reminder automatically by the software. </s>
</p>
<p n="p4.35">
<s n="s1.2;p4.35">This report is concerned with how the requirements of Sony Ericsson were met with the design of such an appointment module, codenamed "CellCal" for the duration of this project. </s>
<s n="s2.2;p4.35">Several stages in its design were undertaken sequentially in order to produce a well-designed and appropriate solution: </s>
</p>
<list type="bulleted">
<item>Analysis of the structure of the handset's software, inputs, outputs and interactions through the use of modelling techniques (UML - Unified Modelling Language) to produce a series of diagrams to visualise the structure of the telephone and it's interaction with the proposed CellCal application. These can be found in section 2 of the report.</item>
<item>Design of an appropriate system in an object-oriented programming language- with justified design choices to be found in section 3 of the report.</item>
<item>Conclusions and recommendations for further development, along with associated information, in section 4.</item>
</list>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Design of the system in UML</head>
<div2>
<head rend="bold">Introduction</head>
<p n="p5.35">
<s n="s1.4;p5.35">The design of an appropriate solution to the problem presented by the client, Sony Ericsson, requires the use of an object-oriented approach to coding a suitable application. </s>
<s n="s2.4;p5.35">Use of an OO language allows for better interaction between the separate modules of the phone, greater flexibility, easier debugging, and an is ideally suited to the problem presented. </s>
<s n="s3.4;p5.35">The need to store multiple appointments in a calendar, with associated contacts, already lends itself to an object-oriented design - with individual Appointments and Contacts form base classes themselves- each contact or appointment has a certain number of properties, or 'attributes', such as Name, Date or Venue, which are standard for every instance of a contact or appointment, but which multiple instances may be required with different properties in those attributes, for example, different contacts. </s>
<s n="s4.4;p5.35">These classes can be accurately modelled in an object-oriented language, but before this can be done, it is important to lay the foundations of this modelling by designing the system in Unified Modelling Language (UML). </s>
</p>
<p n="p6.35">
<s n="s1.1;p6.35">The following pages contain three diagrams that attempt to model the proposed CellCal system in UML - (i) A Use Case diagram that illustrates the interaction of the user and components of the phone handset to perform different actions or 'use-cases'; (ii) a Class Diagram that expresses the design of the system in terms of individual classes to be implemented and their interactions with eachother; and (iii) Interaction Diagrams consisting of a Sequence and Collaboration diagram to represent the communication between classes as modelled in (ii). </s>
</p>
<p n="p7.35">
<s n="s1.2;p7.35">Java 2 Standard Edition (J2SE) was selected as the programming language in which to implement the system. </s>
<s n="s2.2;p7.35">It was selected for the following reasons: </s>
</p>
<p rend="bulleted" n="p8.35">
<s n="s1.1;p8.35">It is a true object-oriented language ideally suited to building a appointment system with distinct types and properties, that can be modelled as classes and attributes; </s>
</p>
<p rend="bulleted" n="p9.35">
<s n="s1.1;p9.35">The native support of Java on the Sony Ericsson S710a platform (implemented in the form of Java Mobile Edition - JME). </s>
</p>
</div2>
<div2>
<head rend="bold">Use Case Diagram</head>
<p n="p10.35">
<s n="s1.3;p10.35">The following UML diagram represents the first stage in a well-planned design- that of Use-Case. </s>
<s n="s2.3;p10.35">The diagram represents the interactions of the user(s) (in this case, only one, that of the Phone User) represented as an Actor to the left of the diagram, with the mobile handset as a whole. </s>
<s n="s3.3;p10.35">Each oval symbolises a 'use-case', that is, a possible action that the user of the phone may take, or functionality they may use, or the interactions between constituent elements of the handset in terms of functionality used by each part. </s>
</p>
<p n="p11.35">
<s n="s1.3;p11.35">Each of the key actions that can be taken by the user are represented to the left. </s>
<s n="s2.3;p11.35">These actions interact with each other using functionality provided by the handset - which in turn makes use of the functionality of the SIM card which stores the Address Book data, and handles communication with the mobile network. </s>
<s n="s3.3;p11.35">Note that the auxiliary functionality denoted with * represents functions such as MP3 playback, calculator, games which are, though valid use cases, not relevant to the design of the CellCal application. </s>
</p>
<figure id="BAWE_6108e-fig.001">
<head>
<hi rend="bold">Figure 2.</hi> <hi rend="bold">Sony Ericsson S710a Mobile Phone</hi> This Use-Case diagram represents the interactions of the user with the system as a whole, and how functionality is provided. &lt;&lt;extend>> denotes that a particular case provides functionality to the case(s) at the end of the arrowhead. &lt;&lt;includes>> denotes that a particular case(s)' functionality is incorporated in the case at the end of the arrowhead.</head>
</figure>
</div2>
<div2>
<head rend="bold">Class Diagrams</head>
<p n="p12.35">
<s n="s1.1;p12.35">The second phase of the development of the CellCal application is to express the design of the module in terms of classes and attributes, and their relationships, using a UML class diagram. </s>
</p>
<p n="p13.35">
<s n="s1.2;p13.35">The class diagram shows each user-defined class as a separate rectangle on the diagram. </s>
<s n="s2.2;p13.35">The name of each class is stated in the top box, the middle box gives the names of the <hi rend="italic">attributes</hi> associated with that class, and the bottom box gives the <hi rend="italic">methods</hi> available in that class. </s>
</p>
<figure id="BAWE_6108e-fig.002">
<head>
<hi rend="bold">Figure 3.</hi> This class diagram shows the interaction and relationships between the four user-defined classes.</head>
</figure>
<p n="p14.35">
<s n="s1.2;p14.35">The attributes given with each class represent the data that will be stored as variables or constants for each class - for example, in the Contact class, information about a contact's name, telephone number and email address need to be kept - as such, three distinct attributes are defined to store each of these values. </s>
<s n="s2.2;p14.35">Each attribute is suffixed with the data type, defining the type of information that can be stored by that attribute - only two are used in the design for the CellCal system - String (which can hold a row of alphanumeric characters) and Date (which holds a Gregorian calendar date), though Java 2 supports a number of other data types. </s>
</p>
<p n="p15.35">
<s n="s1.1;p15.35">The bottom box gives the <hi rend="italic">methods</hi> associate with the class - these are the functions, calls or procedures that trigger an action within the system, interacting with other classes to produce an output as a result of user action or background processes. </s>
</p>
<p n="p16.35">
<s n="s1.3;p16.35">Each attribute and method is given a visibility definition - this determines how a method or attribute can be accessed outside of its own class or package. </s>
<s n="s2.3;p16.35">The three visibility types are <hi rend="italic">public</hi>, <hi rend="italic">private</hi> and <hi rend="italic">protected</hi>, and they are denoted on the diagram by- a coloured brick for a public method or attribute, and a coloured brick with a padlock for a private method or attribute. </s>
<s n="s3.3;p16.35">No protected methods or attributes are defined in this project. </s>
</p>
<p n="p17.35">
<s n="s1.1;p17.35">Public visibility specifies that a method or attribute can be used or altered by an associated class, whereas private visibility specifies that an attribute or method's features can only be used by the class to which it belongs. </s>
</p>
<p n="p18.35">
<s n="s1.3;p18.35">The relationships between classes are shown on the diagram by the arrows been objects - the description of the relationship is given in the diagram's annotations- for instance, the Address Book class will be used to define a vector or array to <hi rend="italic">hold</hi> contact records. </s>
<s n="s2.3;p18.35">Multiplicity is defined through the numbering at each end of the lines - so in the case of the Contact class, zero or more contacts can be held, but there must only ever be one Address Book holding those zero or more contacts in existence at any given time. </s>
<s n="s3.3;p18.35">The diamond arrowheads on these relationships show the type of <hi rend="italic">aggregation</hi> between classes. </s>
</p>
<p n="p19.35">
<s n="s1.1;p19.35">A black diamond head shows that the classes are linked by a <hi rend="italic">composition aggregation</hi> - that is, a linked class is a part of the whole of the class with which it is linked, and will cease to exist should the class it is linked to be deleted - so, for instance, Contacts cannot exist outside of the Address Book. </s>
</p>
<p n="p20.35">
<s n="s1.2;p20.35">A white diamond illustrates <hi rend="italic">shared aggregation</hi> - whereby a class can exist separately and numerous instances could exist for each instance of the class it is linked to. </s>
<s n="s2.2;p20.35">So in the case of Contact-Appointment class relationships, individual Contacts can exist without being a part of an appointment, and an appointment can concern a number of different contacts, such as a meeting with a group of colleagues. </s>
</p>
</div2>
<div2>
<head rend="bold">Interaction Diagrams</head>
<div3>
<head rend="bold">Sequence Diagrams</head>
<p n="p21.35">
<s n="s1.2;p21.35">The following Sequence Diagrams demonstrate how the objects defined in the system interact, in turn, to produce desired functionality. </s>
<s n="s2.2;p21.35">Diagrams for major functionality, adding and editing appointments, are presented below. </s>
</p>
<p n="p22.35">
<s n="s1.4;p22.35">Given in the top left of the diagram is the Actor representing the user of the phone. </s>
<s n="s2.4;p22.35">Alongside this are the major objects that the system will interact with to produce the functionality the diagram is illustrating. </s>
<s n="s3.4;p22.35">Starting from the left-hand side, each arrow, numbered and labelled (beginning with Add Appointment - the user function triggering the sequence) represents a sychronous call to the object with which the arrowhead touches- that is, a single-threaded procedure executed within the system. </s>
<s n="s4.4;p22.35">It waits for the results of its actions and return calls to pass messages back through the system. </s>
</p>
<figure id="BAWE_6108e-fig.003">
<head>
<hi rend="bold">Figure 4.</hi> This diagram shows the sequence of events in the user-initiated action to insert a new appointment.</head>
</figure>
<p n="p23.35">
<s n="s1.2;p23.35">The arrows to the far right of the diagram (alighned with the Appointment object) which return on themselves represent self-delegation calls, whereby a particular object will utilise functionality within itself to accomplish a task (for example, making sure required fields such as Name are not left blank). </s>
<s n="s2.2;p23.35">The dotted lines represent return calls, passing messages back through the system, culminating, in the case of the Add Appointment functionality, in the user being informed whether their appointment details were entered successfully or not. </s>
</p>
<p n="p24.35">
<s n="s1.1;p24.35">Return calls, given by the dotted lines, represent a return from an earlier message sent through the sytem, so in the case of the Edit Appointment sequence, return call 8 confirms whether an appointment's changes where sucessfully applied in order to provide the user feedback. </s>
</p>
<figure id="BAWE_6108e-fig.004">
<head>
<hi rend="bold">Figure 5.</hi> Another sequence diagram to demonstrate the similar functionality of editing an appointment</head>
</figure>
</div3>
<div3>
<head rend="bold">Collaboration Diagrams</head>
<p n="p25.35">
<s n="s1.2;p25.35">The second type of interaction diagram to be employed in the desing of the CellCal system in UML is a Collaboration Diagram. </s>
<s n="s2.2;p25.35">These are generated in conjunction with sequence diagrams to identify the objects in the system which play a role in interaction and to lay them out to visualise that interaction. </s>
</p>
<figure id="BAWE_6108e-fig.005">
<head>
<hi rend="bold">Figure 6.</hi> This Collaboration diagram is used to layout the interactions for the Add Appointment </head>
</figure>
<p n="p26.35">
<s n="s1.3;p26.35">Each object is displayed as a rectangle, as in the Sequence diagram. </s>
<s n="s2.3;p26.35">The flow of information is indicated by the arrows, with events numbered and annotated. </s>
<s n="s3.3;p26.35">Self-delegations are represented by the semicircles, indicating the flow of information within the object itself. </s>
</p>
</div3>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Prototype</head>
<div2>
<head rend="bold">Design Decisions</head>
<p n="p27.35">
<s n="s1.2;p27.35">Following the design and graphical modelling of the system using UML techniques, the system was implemented in J2SE using the open-source NetBeans integrated Java development environment [2]. </s>
<s n="s2.2;p27.35">A justification for the major design decisions can be found listed here, and sample code to accompany the text can be found in section 3.2 below. </s>
</p>
<p rend="bulleted" n="p28.35">
<s n="s1.3;p28.35">In accordance with the class diagram in figure. </s>
<s n="s2.3;p28.35">3, four classes were designed to represent the objects Contact, Address Book, Appointment, and Events Calendar. </s>
<s n="s3.3;p28.35">Each of these classes specified the attribute and methods specific to the operation of that object. </s>
</p>
<p rend="bulleted" n="p29.35">
<s n="s1.1;p29.35">Vectors were to be implemented as part of the EventsCalendar and AddressBook classes, to hold the 'records' defined in the Contact and Event classes. </s>
</p>
<p rend="bulleted" n="p30.35">
<s n="s1.1;p30.35">Java 2 SE's built-in Calendar class and associated methods could be used to implement the calendar, and the scheduling of reminders. </s>
</p>
<p rend="bulleted" n="p31.35">
<s n="s1.1;p31.35">A JFrame class was added to provision for the building of the graphical user interface for Appointments, to add, remove and edit appointments. </s>
</p>
</div2>
<div2>
<head rend="bold">Sample Code</head>
<p n="p32.35">
<s n="s1.2;p32.35">For the sake of brevity, a full unit listing of the source code for the project has been omitted from this report. </s>
<s n="s2.2;p32.35">However, a full electronic version of all source files, in .java format for source classes and .jar bytecode compiled format can be found attached to this document. </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Conclusions and Recommendations</head>
<div2>
<head rend="bold">Conclusion</head>
<p n="p33.35">
<s n="s1.2;p33.35">Designing, developing, coding and testing the prototype CellCal appointment module for the Sony Ericsson S710a proved to be a difficult prospect initially- the key to success was in the breaking down of the large project (as described in the initial overview) into smaller, more manageable section. </s>
<s n="s2.2;p33.35">The project lent itself ideally to object-oriented design, and the analysis of the project using UML techniques to model each part of the larger system into separate classes, with associated member attributes, contributed greatly to simplifying the design and making its development easier and more logical. </s>
</p>
<p n="p34.35">
<s n="s1.3;p34.35">Assumptions were made about the scenario and the system. </s>
<s n="s2.3;p34.35">Firstly, it was assumed that only a single telephone number (presumably mobile, for the the purpose of sending SMS reminders) would be stored for each contact. </s>
<s n="s3.3;p34.35">It was also assumed a set period of time before an appointment would define when an SMS reminder would be send - an extension would be allowing a user-defined time period. </s>
</p>
<p n="p35.35">
<s n="s1.3;p35.35">Further extensions to the system primarily concerns moving from a prototype, which we currently have, to a first-version which can be deployed on the S710a mobile telephone's java platform. </s>
<s n="s2.3;p35.35">This will require the code to be ported to the Java 2 Mobile Edition API (J2ME), upon which the java support on the mobile platform is founded. </s>
<s n="s3.3;p35.35">The J2ME virtual machine is a cut-down version of the Java platform used to develop for a personal computer, and as such features a far more limited variety of built-in classes and functions. </s>
</p>
</div2>
</div1>
</body>
<back>
<div1 type="bibliography">
<head rend="bold">List of References</head>
<div2 type="bibliography">
<head rend="italic">Books</head>
<p>Burd, Barry, 'Java 2 for Dummies' (2<hi rend="sup">nd</hi> Edition), 2004.</p>
</div2>
<div2 type="bibliography">
<head rend="italic">Websites</head>
<p>S710a Specifications, Sony Ericsson United States (<seg type="URL" n="http://www.sonyericsson.com/spg.jsp?cc=global&amp;lc=en&amp;ver=4001&amp;template=pp1_1_1&amp;zone=pp&amp;lm=pp1&amp;pid=10179"/>). (see [1])</p>
<p>NetBeans Java IDE (<seg type="URL" n="http://www.netbeans.org/community/releases/40/index.html"/>). (see [2])</p>
<p>Sun J2SE Documentation and 'The Java Tutorial' (<seg type="URL" n="http://java.sun.com/docs/books/tutorial/index.html"/>).</p>
</div2>
<div2 type="bibliography">
<head rend="italic">Reports/Papers</head>
<p>Unified Modelling Language lecture notes, Dr. L. Sun, The University of Reading 2005</p>
<p>School of Systems Engineering Style Guide for Technical Reports and Academic Papers, Dr. V.F. Ruiz, The University of Reading 2003</p>
</div2>
</div1>
</back>
</text>
</TEI.2>
