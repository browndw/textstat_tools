<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6101b" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>[Linear Algebra for Computer Vision and Robotics I, Robot 2]</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">Evaluated as candidate compound assignment. Assigned to S1b: collection of reports: compound.</note>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: student name. Page footer contains: page number.  </note>
</notesStmt>
<sourceDesc>
<p n="level">3</p>
<p n="date">2005-08</p>
<p n="module title">Linear Algebra for Computer Vision and Robotics</p>
<p n="module code">CS3U2</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">1763</p>
<p n="number of s-units">87</p>
<p n="number of p">44</p>
<p n="number of tables">0</p>
<p n="number of figures">1</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">6</p>
<p n="number of lists">0</p>
<p n="number of paragraphs formatted like lists">0</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">20.3</p>
<p n="average s-units per p">2.0</p>
<p n="macrotype of assignment">compound assignment consisting of 2 parts (see notesStmt for details)</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1984</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">Computer Science</p>
<p n="student ID">6101</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart rend="bold">CS382: Linear Algebra for Computer Vision and Robotics I, Robot 2</titlePart>
</docTitle>
<titlePart rend="bold">
<name type="student name"/> Computer Science</titlePart>
</titlePage>
<div1 type="toc" n="2">
<head rend="bold">Contents</head>
<p/>
</div1>
</front>
<body>
<div1 type="text">
<head rend="bold">Part 1</head>
<div2>
<head rend="bold">Aims</head>
<p n="p1.44">
<s n="s1.3;p1.44">The aims of the coursework were to develop a robotic arm composed of two thin cuboids. </s>
<s n="s2.3;p1.44">The lower cuboid should pan and tilt, and the second cuboid be attached and able to tilt with respect to the first. </s>
<s n="s3.3;p1.44">The arm should be able to be viewed through three orthographic screens, as well as from a perspective view. </s>
</p>
<p n="p2.44">
<s n="s1.2;p2.44">The user should be able to pan or tilt the camera in the perspective view, as well as changing the focal length and the distance it is from the origin. </s>
<s n="s2.2;p2.44">The camera should always be upright and pointing towards the origin. </s>
</p>
<p n="p3.44">
<s n="s1.1;p3.44">The overall aims of the coursework, however, are to gain a deeper understanding of using matrices for linear transforms, as I find I only really understand the subtleties of a concept if I have had direct experience implementing it myself. </s>
</p>
</div2>
<div2>
<head rend="bold">Method</head>
<p n="p4.44">
<s n="s1.4;p4.44">Although this coursework followed on from <hi rend="italic">"I, Robot 1"</hi>, I found I had to almost start the code again from scratch. </s>
<s n="s2.4;p4.44">
<hi rend="italic">"I Robot 1"</hi> stored the 8 points of a cuboid as a list of lists of co-ordinates. </s>
<s n="s3.4;p4.44">It stored a robot, therefore, as a list of cuboids. </s>
<s n="s4.4;p4.44">Manipulations were achieved by having a function for, for example, rotating a point, and then robots were rotated by many calls of this function. </s>
</p>
<p n="p5.44">
<s n="s1.3;p5.44">This work is more intelligent. </s>
<s n="s2.3;p5.44">It stores cuboids as a 3*8 homogenous matrix, which stores the x, y and z co-ordinate of each of the 8 points of the cuboid. </s>
<s n="s3.3;p5.44">Robots are stored as a list of cuboids. </s>
</p>
<p n="p6.44">
<s n="s1.2;p6.44">Instead of iteratively calling a function in a loop to rotate a cuboid, we can now do it by multiplying its matrix with a rotational transformation matrix. </s>
<s n="s2.2;p6.44">This has meant that I don't need to keep track of all of the translations and manipulations I have performed on each cuboid in order that I can undo them each time. </s>
</p>
<p n="p7.44">
<s n="s1.4;p7.44">The perspective view is merely the result of a perspective transform matrix multiplied by the vertices. </s>
<s n="s2.4;p7.44">The camera position is chosen by rotating and translating the robot before the transform. </s>
<s n="s3.4;p7.44">In other words, as the perspective view is merely a relation between the CCS and the OCS, I have inversely altered the OCS rather than directly altering the CCS for the benefit of this view. </s>
<s n="s4.4;p7.44">This made the code far simpler than trying to move the CCS. </s>
</p>
<p n="p8.44">
<s n="s1.1;p8.44">I also have added code for 'furthest point' hidden line control, which I didn't get time for in the first assignment. </s>
</p>
</div2>
<div2>
<head rend="bold">Testing</head>
<p n="p9.44">
<s n="s1.6;p9.44">I have put the code through a great deal of testing before being satisfied that it works entirely. </s>
<s n="s2.6;p9.44">I did this once I had made an arm of two cuboids. </s>
<s n="s3.6;p9.44">As I knew the size and position of both cuboids, I was able to predict on paper their new location after, for example, panning and tilting the base arm by 20 and 35 degrees respectively, and tilting the upper arm by 5 degrees. </s>
<s n="s4.6;p9.44">I was able to use the <hi rend="italic">modmatrixpr()</hi> function to print the transformed locations of the cuboids to the terminal as the code ran and was therefore able to check the cuboids' actual positions with where I had predicted them to be. </s>
<s n="s5.6;p9.44">After I had tested the code with four or five tests of this sort I was confident the code was correct. </s>
<s n="s6.6;p9.44">I used a similar technique to test the perspective transforms. </s>
</p>
<p n="p10.44">
<s n="s1.3;p10.44">As I worked the manipulations out by hand, his method also gave me the advantage of being able to ensure that my ability to multiply matrices was still there. </s>
<s n="s2.3;p10.44">Indeed, when the first perspective transform test gave a different result to the one I calculated, I found that the error was in my calculation rather than in the code. </s>
<s n="s3.3;p10.44">Correcting this error made the two calculations agree. </s>
</p>
</div2>
<div2>
<head rend="bold">Evaluation</head>
<p n="p11.44">
<s n="s1.2;p11.44">As I tested the code comprehensively, I am sure that the matrix mathematics is correct. </s>
<s n="s2.2;p11.44">The program fulfils all of its aims in that the user can control the robot in the specified way, and view it both orthographically and with perspective from a given camera position. </s>
</p>
<p n="p12.44">
<s n="s1.2;p12.44">In terms of the higher aims, my appreciation of how transformation matrices can manipulate a vector is far deeper. </s>
<s n="s2.2;p12.44">This is most noticeable in that I understand far better the need for applying the transformations in the correct order. </s>
</p>
<p n="p13.44">
<s n="s1.2;p13.44">Before, I had the opinion that matrices were needed for linear algebra in order to be mathematically elegant, but implementers would usually just use arrays and functions for each element. </s>
<s n="s2.2;p13.44">I now see how powerful and essential matrices are in vision and graphics related software. </s>
</p>
<p n="p14.44">
<s n="s1.2;p14.44">I think that in my own time before the exam I might add code so that the user can specify a distorted cuboid, and the program will calculate how the original 100*100*100 cube has been rotated, scaled, translated, sheered, and put into perspective to give this result. </s>
<s n="s2.2;p14.44">I think this will leave me with an understanding of determining transforms as deep as my understanding of applying transforms now is. </s>
</p>
</div2>
<div2>
<head rend="bold">Code Listing</head>
<p n="p15.44">
<s n="s1.1;p15.44">
<formula notation="" id="BAWE_6101b-form.001"/> </s>
</p>
</div2>
</div1>
<div1 type="text">
<head rend="bold">Part 2</head>
<p n="p16.44">
<s n="s1.5;p16.44">When modelling a robotic arm that is moving in the real world, it is important to ensure that the model is accurate to the robot. </s>
<s n="s2.5;p16.44">If the computer rotates the arm 60 degrees, due to imperfections in the real world, such as friction and air resistance, the actual arm will rotate very slightly more or less than 60 degrees. </s>
<s n="s3.5;p16.44">As this difference is likely to be minute, it could be possible to ignore it. </s>
<s n="s4.5;p16.44">The problem is that as the arm is moved more and more times, this error will grow and compound until the model of the robot bears little resemblance to the robot itself. </s>
<s n="s5.5;p16.44">This result is as catastrophic as a human with a blindfold operating the robot. </s>
</p>
<p n="p17.44">
<s n="s1.3;p17.44">We need some form of feedback, therefore. </s>
<s n="s2.3;p17.44">This can be done with sensors, but as the robot gets more and more complex, we would need more and more unobtrusive calibrated sensors. </s>
<s n="s3.3;p17.44">Another way is with vision. </s>
</p>
<figure id="BAWE_6101b-pic.001">
<head>
<hi rend="italic">Top robotic arm image from: </hi>
<seg type="URL" n="http://www.belmont.k12.ca.us/ralston/programs/itech/robotc.gif"/>
</head>
</figure>
<p n="p18.44">
<s n="s1.2;p18.44">The computer models a robot as a series of vertices. </s>
<s n="s2.2;p18.44">If a small bright blue dot were to be painted on the point on the otherwise non-blue robot in the real world that correspond with each vertex, then these could be picked up by cameras and compared to the positions of the vertices in the computer model. </s>
</p>
<p n="p19.44">
<s n="s1.1;p19.44">For example, on the right is a robotic arm, and the second image is a simulated extraction of the cuboids from the 'blue dots' in the image. </s>
</p>
<p n="p20.44">
<s n="s1.3;p20.44">The computer can then take these 2D points and multiply them by the inverse of the perspective matrix. </s>
<s n="s2.3;p20.44">It can then rotate the resulting 3D model so that it is in line with the CCS. The model can then be translated along the z-axis the distance the camera is away. </s>
<s n="s3.3;p20.44">If the real robot is accurate to the computer model, the resulting points should match those of the model. </s>
</p>
<p n="p21.44">
<s n="s1.1;p21.44">If not, then we have some work to do to find out how to move the robot to put it back where the model thinks it is. </s>
</p>
<p n="p22.44">
<s n="s1.1;p22.44">We have a known set of points from the computer model, M. We also now have a set of calculated points of the real robot, R. </s>
</p>
<p n="p23.44">
<s n="s1.1;p23.44">Assuming that the arms of the robot have not changed shape, there must be a translation, T <hi rend="sup">-1</hi>, to get us from R to M. </s>
</p>
<p n="p24.44">
<s n="s1.1;p24.44">
<formula notation="" id="BAWE_6101b-form.002"/> </s>
</p>
<p n="p25.44">
<s n="s1.1;p25.44">If we could calculate T <hi rend="sup">-1</hi>, and then convert it so that we knew what commands to give the robot, we can move the robot to meet the computer model. </s>
</p>
<p n="p26.44">
<s n="s1.4;p26.44">As this is a robot, this problem of inverse kinematics is simplified. </s>
<s n="s2.4;p26.44">As presumably the base of the robot is fixed, and the camera is fixed, it has only three degrees of freedom. </s>
<s n="s3.4;p26.44">That is for the based arm to pan (pB) and to tilt (tB), and for the upper arm to tilt (uT). </s>
<s n="s4.4;p26.44">Let's say for simplicity that the bottom of the base arm is at the origin of the OCS. Let's also say that in its starting position the connected end of the upper arm is at position (ux, uy, uz) in the OCS. </s>
</p>
<figure id="BAWE_6101b-fig.001"/>
<p n="p27.44">
<s n="s1.1;p27.44">y </s>
</p>
<p n="p28.44">
<s n="s1.2;p28.44">This is represented in the diagram to the left. </s>
<s n="s2.2;p28.44">The axes are x and y, and z comes directly out of the page. </s>
</p>
<p n="p29.44">
<s n="s1.1;p29.44">Therefore, pB is a rotation around y, and tB is a rotation around z. </s>
</p>
<p n="p30.44">
<s n="s1.1;p30.44">
<formula notation="" id="BAWE_6101b-form.003"/> </s>
</p>
<p n="p31.44">
<s n="s1.2;p31.44">tU is more complicated. tU involves translating (-ux, -uy, -uz), rotating tU, and then translating back (ux, uy, uz). </s>
<s n="s2.2;p31.44">This gives: </s>
</p>
<p n="p32.44">
<s n="s1.1;p32.44">
<formula notation="" id="BAWE_6101b-form.004"/> </s>
</p>
<p n="p33.44">
<s n="s1.1;p33.44">The transformation to get from the initial position to an arbitrary position is therefore: </s>
</p>
<p n="p34.44">
<s n="s1.1;p34.44">
<formula notation="" id="BAWE_6101b-form.005"/> </s>
</p>
<p n="p35.44">
<s n="s1.1;p35.44">We can take the inverses of each of these to form tU <hi rend="sup">-1</hi>, tB <hi rend="sup">-1</hi> and pB <hi rend="sup">-1</hi>. </s>
</p>
<p n="p36.44">
<s n="s1.1;p36.44">The transformation to get from an arbitrary position to the initial position is therefore: </s>
</p>
<p n="p37.44">
<s n="s1.1;p37.44">
<formula notation="" id="BAWE_6101b-form.006"/> </s>
</p>
<p n="p38.44">
<s n="s1.3;p38.44">Solving the above would give us one transformation matrix with three unknowns in. </s>
<s n="s2.3;p38.44">It is possible to write a simultaneous equation for each of these unknowns. </s>
<s n="s3.3;p38.44">These can then be solved to find the values of tU, tB and pB. </s>
</p>
<p n="p39.44">
<s n="s1.1;p39.44">The computer can then move the robot - tU, then - tB, then - pB, which will put the robot into the position to match the computer. </s>
</p>
<p n="p40.44">
<s n="s1.1;p40.44">If there is any uncertainty about whether this new position is accurate, the process can be repeated. </s>
</p>
<p n="p41.44">
<s n="s1.2;p41.44">To make this process more accurate, images from two or more cameras could be put together to develop the original 3D model of the robot from the images. </s>
<s n="s2.2;p41.44">The computer would take the output of all the cameras and identify each blue dot on each image that it's visible in, multiply each by the inverse of the perspective matrix for the focal lengths, manipulate each to compensate for the various camera co-ordinate systems, and then average all of the resulting readings for each point. </s>
</p>
<p n="p42.44">
<s n="s1.2;p42.44">Another method for the arm to know where it is could theoretically be using a camera at the end of the arm. </s>
<s n="s2.2;p42.44">The images from the camera could be then recognised so that the computer would know which direction the arm was facing. </s>
</p>
<p n="p43.44">
<s n="s1.2;p43.44">This recognition could be by identifying known objects in the room. </s>
<s n="s2.2;p43.44">An example is putting small bright red balls around the room in a pattern, and the location of the red dots in the camera's image would tell the computer the angle of the camera. </s>
</p>
<p n="p44.44">
<s n="s1.2;p44.44">Another method would be to have a database of images of the room stored in the computer and to match the image given by the camera to the 3 closest images in the database, and perform a weighted average to get the true position. </s>
<s n="s2.2;p44.44">This would mean that the view from the robot could not change significantly. </s>
</p>
</div1>
</body>
<back/>
</text>
</TEI.2>
