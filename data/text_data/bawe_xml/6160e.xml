<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6160e" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Pseudocode 4 : Graph data model</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: student name; date. Page footer contains: page number. </note>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2006-12</p>
<p n="module title">Computer Science Roadmap</p>
<p n="module code">SE1SC5</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">782</p>
<p n="number of s-units">44</p>
<p n="number of p">27</p>
<p n="number of tables">4</p>
<p n="number of figures">1</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">4</p>
<p n="number of lists">0</p>
<p n="number of paragraphs formatted like lists">0</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">17.8</p>
<p n="average s-units per p">1.6</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1987</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">BSc Computer Science</p>
<p n="student ID">6160</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<titlePart rend="underlined bold">Computer Science Roadmap SE1SC5</titlePart>
<docTitle>
<titlePart rend="underlined bold">Pseudocode 4 : Graph data model</titlePart>
</docTitle>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="underlined bold">NP-Complete problems </head>
<div2>
<head rend="underlined">General Procedure:</head>
<table id="BAWE_6160e-tab.001">
<row>
<cell/>
</row>
</table>
<figure id="BAWE_6160e-fig.001"/>
<p n="p1.27">
<s n="s1.2;p1.27">In solving of TSPs, we are essentially finding Hamiltonian Circuits - i.e. finding that path that that will visit each vertex (for this exercise, these happen to be cities) and then return to the point of origin. </s>
<s n="s2.2;p1.27">For solving TSPs, there is the additional condition that we are seeking the circuit with the minimum possible weight (i.e. shortest distance travelled): </s>
</p>
<p n="p2.27">
<s n="s1.2;p2.27">Start from a city and proceed to the nearest city that has <hi rend="bold">not</hi> <hi rend="bold">yet been visited</hi>. </s>
<s n="s2.2;p2.27">Stop when last city is reached and return to the starting city. </s>
</p>
<p n="p3.27">
<s n="s1.1;p3.27">Repeat with a different starting city and compare total weights to find to find the minimum possible weight. </s>
</p>
<p n="p4.27">
<s n="s1.1;p4.27">Here are the distances of some of the various possible circuits: </s>
</p>
<table id="BAWE_6160e-tab.002">
<row>
<cell/>
</row>
</table>
</div2>
<div2>
<head rend="underlined">Use of Permutations and Verification of Result</head>
<p n="p5.27">
<s n="s1.2;p5.27">The number of possible circuits is equivalent to the number of possible permutations. </s>
<s n="s2.2;p5.27">From initial testing, the shortest circuit has a distance of <hi rend="bold">237</hi> and there are multiple possible circuits which result in this total distance. </s>
</p>
<p n="p6.27">
<s n="s1.3;p6.27">For the example problem, there are 5! = 120 possible circuits, where half of these are the other half in reverse. </s>
<s n="s2.3;p6.27">The 120 combinations consist of 24 circuits for each starting city (12 circuits and their reverses). </s>
<s n="s3.3;p6.27">The value of 120 was obtained via application of the permutation formula: </s>
</p>
<p n="p7.27">
<s n="s1.1;p7.27">
<formula notation="" id="BAWE_6160e-form.001"/> </s>
</p>
<p n="p8.27">
<s n="s1.3;p8.27">where <hi rend="bold">n</hi> is the total number of items and <hi rend="bold">r</hi> is the number of items required in each set. </s>
<s n="s2.3;p8.27">Since <hi rend="bold">n = r</hi> in this exercise (permutations of 5 cities from a set of 5 cities), the denominator is <hi rend="bold">0! = 1</hi>. </s>
<s n="s3.3;p8.27">So the formula is reduced to <hi rend="bold">n! .</hi> </s>
</p>
<p n="p9.27">
<s n="s1.3;p9.27">120 permutations is a small enough number to "brute force" and hence verify whether or not the shortest circuit has indeed been found. </s>
<s n="s2.3;p9.27">An Excel spreadsheet and lookup functions were used for this. </s>
<s n="s3.3;p9.27">First, a list of permutations need to be found, this was done using the Permutation Generator at <seg type="URL" n="http://home.att.net/~srschmitt/script_permutations.html"/> </s>
</p>
<p n="p10.27">
<s n="s1.5;p10.27">This was put onto the spreadsheet. </s>
<s n="s2.5;p10.27">The table giving relative distances was pasted into the spreadsheet to use as a lookup table. </s>
<s n="s3.5;p10.27">With the help of the INDEX spreadsheet function, this allowed the distances travelled to be generated using the list of permutations. </s>
<s n="s4.5;p10.27">The INDEX spreadsheet function is as follows: <hi rend="bold">INDEX(reference,row_num,column_num).</hi> </s>
<s n="s5.5;p10.27">The function will use pairs of two consecutive numbers in the permutations to select the appropriate distance value from the lookup table. </s>
</p>
<p n="p11.27">
<s n="s1.1;p11.27">A sample of the data generated is shown here: </s>
</p>
<table id="BAWE_6160e-tab.003">
<row>
<cell/>
</row>
</table>
<p n="p12.27">
<s n="s1.3;p12.27">Data for all 120 permutations (circuits) were generated and the shortest possible distance is confirmed to be <hi rend="underlined bold">237</hi>. </s>
<s n="s2.3;p12.27">There are <hi rend="underlined">10 circuits</hi> that will result in the total distance of <hi rend="underlined bold">237- </hi>this consists of <hi rend="underlined">5 circuits</hi> and their <hi rend="underlined">reverse paths</hi>. </s>
<s n="s3.3;p12.27">For brevity, only one direction will be shown- their reverse paths are equally valid: </s>
</p>
<table id="BAWE_6160e-tab.004">
<row>
<cell/>
</row>
</table>
</div2>
<div2>
<head rend="underlined">Questions</head>
<div3>
<head rend="italic">If no. of cities = 30 and if it takes 1 nanosecond (10-9 seconds) to find one circuit (i.e. Start to finish and back to start) on a Dell Pentium PC, how long would it take to find the shortest circuit? </head>
<p n="p13.27">
<s n="s1.1;p13.27">
<formula notation="" id="BAWE_6160e-form.002"/> </s>
</p>
</div3>
<div3>
<head rend="italic">Is exhaustive search of all possible paths the only way to solve the problem? </head>
<p n="p14.27">
<s n="s1.1;p14.27">Reference: <seg type="URL" n="http://en.wikipedia.org/wiki/Travelling_salesman"/> </s>
</p>
<p n="p15.27">
<s n="s1.1;p15.27">There is not yet a general solution for the problem but using "heuristic algorithms" it is possible to obtain a "best guess" solution which is usually sufficient. </s>
</p>
<p n="p16.27">
<s n="s1.1;p16.27">For small finite number of cities, exact solutions can be obtained using "branch and bound" algorithms and "linear programming". </s>
</p>
</div3>
<div3>
<head rend="italic">What are NP-Complete problems and why TSP is an NP-Complete problem? </head>
<p n="p17.27">
<s n="s1.1;p17.27">NP-Complete problems are problems which cannot be easily solved by computation. </s>
</p>
<p n="p18.27">
<s n="s1.1;p18.27">TSP is NP-Complete because it the time taken to solve it increases exponentially as the complexity of the problem increases- i.e. the time taken increases exponentially as the number of cities increases. </s>
</p>
</div3>
</div2>
</div1>
<div1 type="section">
<head rend="underlined bold">Halting Problem</head>
<p n="p19.27">
<s n="s1.2;p19.27">Translate the following pseudo-code into a 'C' program and test the program by executing it for the following inputs: n = 3, 21, 25, 27. </s>
<s n="s2.2;p19.27">Check if there is an input for which the program doesn't halt. </s>
</p>
<p n="p20.27">
<s n="s1.1;p20.27">
<formula notation="" id="BAWE_6160e-form.003"/> </s>
</p>
<p n="p21.27">
<s n="s1.1;p21.27">Output values for each of the inputs for the above program: </s>
</p>
<p n="p22.27">
<s n="s1.1;p22.27">
<formula notation="" id="BAWE_6160e-form.004"/> </s>
</p>
<p n="p23.27">
<s n="s1.1;p23.27">The problem with this particular implementation is that it does not check validity of input and so does NOT halt when input other than integers are used. </s>
</p>
<p n="p24.27">
<s n="s1.1;p24.27">As long as input is an INTEGER, the program will halt. </s>
</p>
<div2>
<head rend="underlined italic">Significance of "halting problem". </head>
<p n="p25.27">
<s n="s1.2;p25.27">The halting problem, as it exists in computability theory, is deciding whether a program will finish or continue running forever, given a particular input. </s>
<s n="s2.2;p25.27">To solve the halting problem is to develop a general solution for determining <hi rend="italic">finiteness</hi>. </s>
</p>
<p n="p26.27">
<s n="s1.1;p26.27">While this can in general be determined for programs individually, it is another matter to </s>
</p>
<p n="p27.27">
<s n="s1.1;p27.27">In 1936, Alan Turing proved that a general algorithm (one that works for any program) to solve the halting problem for all possible inputs cannot exist. </s>
</p>
</div2>
</div1>
</body>
<back/>
</text>
</TEI.2>
