<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6169d" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Coursework</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
<note resp="British Academic Written English (BAWE) corpus project">Language used in quote: <foreign id="English">English</foreign>
</note>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: student name; module code. Page footer contains: page number. </note>
</notesStmt>
<sourceDesc>
<p n="level">4</p>
<p n="date">2007-01</p>
<p n="module title">Real-time and Embedded Systems</p>
<p n="module code">M64CS</p>
<p n="genre family">Explanation + Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">3565</p>
<p n="number of s-units">129</p>
<p n="number of p">55</p>
<p n="number of tables">1</p>
<p n="number of figures">1</p>
<p n="number of block quotes">1</p>
<p n="number of formulae">2</p>
<p n="number of lists">7</p>
<p n="number of paragraphs formatted like lists">10</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">27.6</p>
<p n="average s-units per p">2.3</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1983</p>
<p n="first language">Polish</p>
<p n="education">OSa</p>
<p n="course">MSc Computing</p>
<p n="student ID">6169</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<titlePart>
<hi rend="bold">
<name type="university"/>
</hi> School of Mathematical and Information Sciences</titlePart>
<docTitle>
<titlePart rend="bold">M64CS - Real-time and Embedded Systems</titlePart>
</docTitle>
<titlePart>Author <hi rend="bold">
<name type="student name"/>
</hi> Student ID <name type="student ID"/> Course Title Msc Computing Module M64CS - Real-time and Embedded Systems Date 23/01/2007</titlePart>
</titlePage>
<div1 type="toc" n="4">
<head rend="bold">CONTENTS</head>
<p/>
</div1>
</front>
<body>
<div1 type="section">
<head rend="bold">Part 1: Communication and synchronisation mechanisms and formal method definition. </head>
<div2>
<head rend="bold">Semaphores, monitors and message passing</head>
<div3>
<head rend="bold italic">Semaphores</head>
<p n="p1.55">
<s n="s1.1;p1.55">A semaphore (invented by Edsger Dijkstra) is a protected variable and represents the classic method for restricting access to shared resources (e.g. memory) in a multiprogramming environment. </s>
</p>
<p n="p2.55">
<s n="s1.5;p2.55">Semaphore is a non-negative integer with value initialized to the number of corresponding shared resources it is implemented to control (if there is only one resource, it is a binary semaphore with value 0 or 1). </s>
<s n="s2.5;p2.55">The current value is the number of units of the resource which are free. </s>
<s n="s3.5;p2.55">Semaphore "is accessed by means of two special operations, P and V. If s is a semaphore, V(s) increments the value of s, and P(s) delays its cellar unit s is positive and then decrements s. </s>
<s n="s4.5;p2.55">A V is used to signal the occurrence of an event, and a P is used to delay until the event has occurred." </s>
<s n="s5.5;p2.55">(Olsson, R, 2004) </s>
</p>
<p n="p3.55">
<s n="s1.3;p3.55">Notice that incrementing the variable <hi rend="italic">s</hi> must not be interrupted, and the <hi rend="italic">P</hi> operation must not be interrupted after s is found to be nonzero. </s>
<s n="s2.3;p3.55">This can be done by special instruction or by ignoring interrupts in order to prevent other processes from becoming active. </s>
<s n="s3.3;p3.55">That is why <hi rend="italic">P</hi> and <hi rend="italic">V</hi> operations must be atomic, which means that no process may ever be pre-empted in the middle of one of those operations to run another operation on the same semaphore. </s>
</p>
<p n="p4.55">
<s n="s1.4;p4.55">The canonical names P and V come from the initials of Dutch words. </s>
<s n="s2.4;p4.55">V stands for verhoog, what can be translated into <hi rend="bold">increase</hi>. </s>
<s n="s3.4;p4.55">Several explanations have been given for P (including passeer meaning pass, probeer meaning try, and pakken meaning grab), but in fact Dijkstra wrote that he intended P to stand for the made-up portmanteau word prolaag, short for probeer te verlagen, meaning <hi rend="bold">try-and-decrease</hi>. </s>
<s n="s4.4;p4.55">This confusion stems from the unfortunate characteristic of the Dutch language that the words for increase and decrease both begin with the letter V, and the words spelled out in full would be impossibly confusing for non - Dutch-speakers. </s>
</p>
<p n="p5.55">
<s n="s1.1;p5.55">In software engineering practice the P and V operations are called wait and signal, or take and release, or pend and post. </s>
</p>
<p n="p6.55">
<s n="s1.3;p6.55">To avoid busy-waiting, a semaphore may have an associated queue of processes. </s>
<s n="s2.3;p6.55">If a process performs a <hi rend="italic">P</hi> operation on a semaphore which has the value zero, the process is added to the semaphore's queue. </s>
<s n="s3.3;p6.55">When another process increments the semaphore by performing a <hi rend="italic">V</hi> operation, and there are processes on the queue, one of them is removed from the queue and resumes execution. </s>
</p>
<div4>
<head rend="italic">Different kinds of Semaphores:</head>
<p rend="bulleted" n="p7.55">
<s n="s1.8;p7.55">Counting Semaphores - can take integer values. </s>
<s n="s2.8;p7.55">"An instance of a counting semaphore is a single count. </s>
<s n="s3.8;p7.55">For example if the count is five, then that semaphore has five instances. </s>
<s n="s4.8;p7.55">Similarly if the count is zero, semaphore has no instances." </s>
<s n="s5.8;p7.55">(Lamie, E. </s>
<s n="s6.8;p7.55">2004) The P operation takes one instance from the counting semaphore by decreasing its count. </s>
<s n="s7.8;p7.55">If the count is equal to zero instance must wait in a queue. </s>
<s n="s8.8;p7.55">Similarly, the V operation places the instance in the counting semaphore by incrementing its count. </s>
</p>
<p rend="bulleted" n="p8.55">
<s n="s1.6;p8.55">Binary semaphore - the simplest kind of semaphore used to control access to a single resource. </s>
<s n="s2.6;p8.55">It is always initialized with the value 1. </s>
<s n="s3.6;p8.55">It "only takes values 0 and 1, like locks. (...) </s>
<s n="s4.6;p8.55">Just like locks binary semaphores must be acquired and released, and only one process can hold a given semaphore at a time." </s>
<s n="s5.6;p8.55">(Kent A.al. 1990)When the resource is in use, the accessing thread calls P to decrease this value to 0 and lock access to this resource. </s>
<s n="s6.6;p8.55">Only the current owner can unlock the semaphore so when resource is ready to be freed it is restored to 1 with the V operation. </s>
</p>
<p rend="bulleted" n="p9.55">
<s n="s1.2;p9.55">Blocking semaphore - a binary semaphore that is initialized to zero. </s>
<s n="s2.2;p9.55">This has the effect that any thread that does a P operation will be blocked until another thread does a V. This kind of construction is very useful when the order of execution among threads needs to be controlled. </s>
</p>
<p n="p10.55">
<s n="s1.1;p10.55">(Wikipedia, 2007) </s>
</p>
</div4>
</div3>
<div3>
<head rend="bold italic">Monitors</head>
<quote lang="English">"Many modern software systems consist of collections of cooperating tasks. In such systems, mechanisms for arranging exclusive access to resources and for synchronizing and communication among tasks are needed. Many such mechanisms have been proposed, including semaphores and various forms of message passing. One of the most natural, elegant, and efficient mechanisms for synchronisation and communication, especially for shared-memory systems, is the monitor." (Belzer J.al. 1987)</quote>
<p n="p11.55">
<s n="s1.2;p11.55">A monitor can be used for synchronizing two or more computer tasks that use a shared resource. </s>
<s n="s2.2;p11.55">Not only it ensures task an exclusive access to resources, but also to synchronize and communicate with other tasks. </s>
</p>
<p n="p12.55">
<s n="s1.1;p12.55">A monitor consists of: </s>
</p>
<list type="bulleted">
<item>Entry routines </item>
<item>Mutual exclusion</item>
<item>Date items- the variables associated with the resource</item>
<item>Monitor invariant - defines the assumptions needed to avoid race conditions</item>
</list>
<div4>
<head rend="italic">Entry routines and Data Items</head>
<p n="p13.55">
<s n="s1.5;p13.55">A contains a set of data items and a set of procedures, called entry routines that operate on the data items. </s>
<s n="s2.5;p13.55">The monitor data items can represent any resource that is shared by multiple tasks. </s>
<s n="s3.5;p13.55">A resource can represent a shared hardware component (e.g. hard drive) or a software component (e.g. file). </s>
<s n="s4.5;p13.55">Generally monitor data can be manipulated only by the set of operations defined by its entry routines. </s>
<s n="s5.5;p13.55">(Belzer J.al. 1987) </s>
</p>
<div5>
<head rend="italic">Mutual exclusion</head>
<p n="p14.55">
<s n="s1.3;p14.55">Mutual exclusion is enforced among tasks using a monitor - only one task at a time can execute (called 'active task') a monitor entry routine. </s>
<s n="s2.3;p14.55">Mutual exclusion is enforced by locking the monitor when execution of an entry routine begins and unlocking it when the active task gives up control of the monitor. </s>
<s n="s3.3;p14.55">If another task invokes an entry routine while the monitor is locked, it is blocked until the monitor becomes unlocked. </s>
</p>
</div5>
</div4>
<div4>
<head rend="italic">Monitor invariant</head>
<p n="p15.55">
<s n="s1.4;p15.55">The monitor invariant in this case simply says that the balance must reflect all past operations before another operation can begin. </s>
<s n="s2.4;p15.55">It is usually not stated in the code but may be mentioned in comments. </s>
<s n="s3.4;p15.55">There are however programming languages like Eiffel, which can check invariants. </s>
<s n="s4.4;p15.55">(Wikipedia, 2007) </s>
</p>
</div4>
<div4>
<head rend="italic">Condition variables</head>
<p n="p16.55">
<s n="s1.6;p16.55">To avoid entering a busy waiting state, processes must be able to signal each other about events of interest. </s>
<s n="s2.6;p16.55">Monitors provide this capability through condition variables. </s>
<s n="s3.6;p16.55">When a monitor function requires a particular condition to be true before it can proceed, it waits on an associated condition variable. </s>
<s n="s4.6;p16.55">By waiting, it gives up the lock and is removed from the set of running entry routines. </s>
<s n="s5.6;p16.55">Any process that subsequently causes the condition to be true may then use the condition variable to notify a process waiting for the condition. </s>
<s n="s6.6;p16.55">A process that has been notified regains the lock and can proceed. </s>
</p>
</div4>
</div3>
<div3>
<head rend="bold italic">Message passing</head>
<p n="p17.55">
<s n="s1.1;p17.55">In computer science, <hi rend="bold">message passing</hi> is a form of communication used in concurrent programming, parallel programming, object-oriented programming, and inter-process communication. </s>
</p>
<p n="p18.55">
<s n="s1.4;p18.55">"The basic operations in message passing languages are "send a message" and "receive a message." </s>
<s n="s2.4;p18.55">Since a message must be sent before it can be received, message passing imposes an causal order on the actions of the program" (John H., 1999). </s>
<s n="s3.4;p18.55">Destination of a send operation and the soured of receive, seen as a pair, is called communication channel. </s>
<s n="s4.4;p18.55">Forms of messages include function invocation, signals, and data packets. </s>
</p>
<p n="p19.55">
<s n="s1.2;p19.55">There are few different models of message passing. </s>
<s n="s2.2;p19.55">As fundamental the message passing model is defined as: </s>
</p>
<list type="bulleted">
<item>set of processes having only local memory </item>
<item>processes communicate by sending and receiving messages </item>
<item>the transfer of data between processes requires cooperative operations to be performed by each process (a send operation must have a matching receive</item>
</list>
<p n="p20.55">
<s n="s1.1;p20.55">Other models include: </s>
</p>
<list type="bulleted">
<item>data parallelism - data partitioning determines parallelism </item>
<item>shared memory - multiple processes sharing common memory space </item>
<item>remote memory operation - set of processes in which a process can access the memory of another process without its participation </item>
<item>threads - a single process having multiple (concurrent) execution paths combined models composed of two or more of the above </item>
</list>
<p n="p21.55">
<s n="s1.1;p21.55">(Maui High Performance Computing Centre, 1996) </s>
</p>
<p n="p22.55">
<s n="s1.1;p22.55">Message passing uses two communication mechanisms: </s>
</p>
<p rend="bulleted" n="p23.55">
<s n="s1.3;p23.55">Asynchronous message passing mechanism buffers the communication between sender and receiver. </s>
<s n="s2.3;p23.55">That allows the sender to continue execution after sending a message. </s>
<s n="s3.3;p23.55">This is analogous to mailing a letter - once a letter is in postbox, the sender can continue with other tasks. </s>
</p>
<p rend="bulleted" n="p24.55">
<s n="s1.2;p24.55">Synchronous message passing - after sending the message the sender is blocked until its massage is received. </s>
<s n="s2.2;p24.55">This is analogous to making a phone call, where the caller must wait until someone picks up the phone before talking. </s>
</p>
<p n="p25.55">
<s n="s1.1;p25.55">(Reppy J., 1999) </s>
</p>
</div3>
</div2>
<div2>
<head rend="bold">Formal Methods</head>
<p n="p26.55">
<s n="s1.4;p26.55">Formal methods are mathematically-based techniques for the specification, development and verification of software systems. </s>
<s n="s2.4;p26.55">They are based on mathematical theories, such as: algebra, temporal logic, finite-state machines, functional programming or Petri nets. </s>
<s n="s3.4;p26.55">The use of formal methods for software design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analyses can contribute to the reliability and forcefulness of a design. </s>
<s n="s4.4;p26.55">The high cost of using formal methods implicates that they are usually only used in the development of systems, where safety or security is crucial. </s>
</p>
<p n="p27.55">
<s n="s1.5;p27.55">Formal methods are rapidly becoming a promising and automated technique used at an early stage during the process of software development. </s>
<s n="s2.5;p27.55">The reason for that is that most of the cost of software development branch from design (or requirements) defects. </s>
<s n="s3.5;p27.55">It is obvious that defects detected in design cost hundred times less then the ones detected in testing or maintenance phase. </s>
<s n="s4.5;p27.55">Formal methods enable us to identify those defects at the early stage of software life cycle. </s>
<s n="s5.5;p27.55">As a result we can reduce cost of debugging, maintenance, and re-development. </s>
</p>
<p n="p28.55">
<s n="s1.4;p28.55">Moreover formal methods give us greater confidence that safety-critical systems meet the desired properties in order to avoid disastrous consequences. </s>
<s n="s2.4;p28.55">Many techniques with various degrees of rigor have been used in formal methods for specification, modelling, and verification. </s>
<s n="s3.4;p28.55">(Juan, E. et al., 2002) </s>
<s n="s4.4;p28.55">Formal verification methods can ensure that a high-level system design really meets rigorously specified correctness requirements, thereby increasing the possibility that faulty designs can be discovered at the early phases of system development. </s>
</p>
<p n="p29.55">
<s n="s1.1;p29.55">The other advantages of using formal methods are: </s>
</p>
<p rend="bulleted" n="p30.55">
<s n="s1.1;p30.55">In the process of formalizing informal requirements, ambiguities, omissions and contradictions will often be discovered. </s>
</p>
<p rend="bulleted" n="p31.55">
<s n="s1.1;p31.55">The formal model may lead to hierarchical semi-automated (or even automated) system development methods. </s>
</p>
<p rend="bulleted" n="p32.55">
<s n="s1.1;p32.55">The formal model can be verified for correctness by mathematical methods (rather than by intractable case by case testing). </s>
</p>
<p rend="bulleted" n="p33.55">
<s n="s1.1;p33.55">A formally verified subsystem can be incorporated into a larger system with greater confidence that it behaves as specified. </s>
</p>
<p rend="bulleted" n="p34.55">
<s n="s1.1;p34.55">Different designs can be evaluated and compared. </s>
</p>
<p n="p35.55">
<s n="s1.2;p35.55">(Ostroff J. </s>
<s n="s2.2;p35.55">1992) </s>
</p>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Part 2: Real-time application</head>
<div2>
<head rend="bold italic">1. MULTI-STOREY PARKING SYSTEM</head>
<p n="p36.55">
<s n="s1.1;p36.55">The application which I decided to describe is a system which works in a multi-storey car park. </s>
</p>
<p n="p37.55">
<s n="s1.3;p37.55">System is provided for car park to monitor and control cars entering, leaving and staying inside the facility. </s>
<s n="s2.3;p37.55">For the purpose of this coursework I made an assumption that car park has 200 parking places and 3 floors, with entrance gate on each of them and exit with pay centre situated on the ground floor. </s>
<s n="s3.3;p37.55">Each space has its own sensor, which can tell if it is occupied or not. </s>
</p>
<p n="p38.55">
<s n="s1.3;p38.55">Thanks to the sensors system can say how many places are still available and where exactly they are located in the building. </s>
<s n="s2.3;p38.55">This information is provided to driver who should find a parking space without senseless driving around the floors. </s>
<s n="s3.3;p38.55">Car will not be let in if there is no space to park. </s>
</p>
<p n="p39.55">
<s n="s1.2;p39.55">My system is also capable of calculating amount of money to be paid when car is leaving the parking. </s>
<s n="s2.2;p39.55">Payment is dependent on the time spend in the facility. </s>
</p>
<p n="p40.55">
<s n="s1.6;p40.55">While designing the real-time applications we must ensure that it meets not only functional but also timelines requirements. </s>
<s n="s2.6;p40.55">The Multi-Storey Parking System is a soft real-time system. </s>
<s n="s3.6;p40.55">"A soft real-time system is one in which performance is degraded but not destroyed by failure to meet response-time constraints." </s>
<s n="s4.6;p40.55">(Laplante P., 2004). </s>
<s n="s5.6;p40.55">For my system it simply means that if driver will have to wait e.g. </s>
<s n="s6.6;p40.55">5 seconds before he will obtain detailed directions to find his parking space, no serious damage is made. </s>
</p>
<div3>
<head rend="italic">Processes Description</head>
<p n="p41.55">
<s n="s1.1;p41.55">Multi-Storey Parking System contains following processes: </s>
</p>
<list type="simple">
<item>Display Panel - Gate 1 2 3:Informs driver how many (if any) free spaces are left. It communicates with update process to update the number of free spaces. It displays the way to the parking place.</item>
<item>Update:This process communicates directly with the Central Panel to obtain number of free spaces available at the moment. Afterwards it sends the information to the Display Panels on Gate 1, 2 and 3.</item>
<item>Ticket Machine - 1 2 3:Ticket machines, assigned to each Gate, after being asked for a ticket by Display Panel check if any place is available, and book it in Central Panel (it means that the number of free spaces is decreased). If the place is booked successfully the information including directions is sent to Display Panel and ticket is given. If there is no space left information: 'Sorry we do not have any free places left. Please wait.' appears on the Display Panel.</item>
<item>Park:Car parks on a free space. This activates the sensor of this place.</item>
<item>Leave:Car leaves the parking place. This deactivates the sensor of this place.</item>
<item>Sensor - 1 to 200:Each parking place has its own sensor which is activated every time a car parks on this place and deactivated every time a car leaves the place. Sensor process sends information about a parking car to the Central Panel so that the current localization of free spaces can be updated. The number of free spaces is not updated by this process as the car leaving the place does not have to leave the parking (it can park on some other place).</item>
<item>Pay Centre:When driver gives the ticket to Pay centre its details are send to Central Panel in order to acquire data of how much time this car spent inside the car park and how much should be paid. When money is paid Pay Centre updates availability of free spaces in Central Panel (now we can be sure that the car has left).</item>
<item>CENTRAL PANEL:This process has access to availability details. It gives information how many places are available, and where they are located. In order to be constantly updated It communicates with Ticket Machine, Update, Sensor and Pay Centre. </item>
</list>
</div3>
<div3>
<head rend="italic">Processes I/O</head>
<table id="BAWE_6169d-tab.001">
<row>
<cell/>
</row>
</table>
<p n="p42.55"/>
</div3>
<div3>
<head rend="italic">Scenario I (One car at one gate)</head>
<list type="ordered">
<item>Gates:</item>
<item>Gate 1 - no car</item>
<item>Gate 2 - no car</item>
<item>Gate 3 - 1 car</item>
<item>Display panel on gate 3 checks how many free parking places are left</item>
<item>Information is updated from central panel :Availability = 5</item>
<item>Driver asks for a ticket</item>
<item>Ticket machine checks again with the central panel and books a place</item>
<item>Response to ticket machine on gate 3: 5 places available; book 1 and show the way, decrease free places number to 4</item>
<item>Central panel sends localization of the place to the ticket machine</item>
<item>Information is updated on each gate from central panel :Availability = 4</item>
<item>Ticket machine gives ticket and shows the way</item>
<item>Car parked in destined place</item>
<item>Sensor activated</item>
<item>Sensor send localization details to main server</item>
<item>Main server checks if the car is parked in correct place. It is.</item>
<item>Car is parked</item>
<item>Car leaves</item>
<item>Sensor is released and central panel is updated</item>
<item>Pay centre takes a ticket and sends ticket details to central panel</item>
<item>Central panel answers with period of time that the car spend in the parking and amount of money to be paid</item>
<item>Availability information in central panel is updated when money is paid</item>
<item>Information is updated on each gate from central panel :Availability = 5</item>
<item>Car goes toward the exit</item>
</list>
<p n="p43.55"/>
</div3>
<div3>
<head rend="italic">Scenario II (One car at each gate)</head>
<list type="ordered">
<item>Gates:</item>
<item>Gate 1 - 1 car</item>
<item>Gate 2 - 1 car</item>
<item>Gate 3 - 1 car</item>
<item>Display panel on each gate check how many free parking places are left</item>
<item>Information is updated on each gate from central panel :Availability = 2</item>
<item>Drivers asks for tickets</item>
<item>Gate 1 asks for a ticket</item>
<item>Gate 2 asks for a ticket</item>
<item>Gate 3 asks for a ticket</item>
<item>Ticket machines check again with the central panel and book a place</item>
<item>Response to ticket machine on gate 1: 2 places available; book 1 and show the way, decrease free places number to 1. Send localization of the place to the ticket machine</item>
<item>Information is updated on each gate from central panel :Availability = 1</item>
<item>Response to ticket machine on gate 2: 1 place available; book 1 and show the way, decrease free places number to 0. Send localization of the place to the ticket machine</item>
<item>Information is updated on each gate from central panel :Availability = 0</item>
<item>Response to ticket machine on gate 3: 0 places available.</item>
<item>Ticket machines:</item>
<item>On gate 1 and 2 give tickets and show the way</item>
<item>On gate 3 display 'Sorry we do not have any free places left. Please wait.'</item>
<item>Car from gate 1 and 2 parked in destined place</item>
<item>Sensors activated</item>
<item>Sensors send localization details to main server:</item>
<item>Sensor responsible for the car from gate 1</item>
<item>Sensor responsible for the car from gate 2</item>
<item>Main server checks if the cars are parked in correct places.</item>
<item>Car 1 is.</item>
<item>Car 2 is.</item>
<item rend="bold">Cars from gate 1 and 2 are parked</item>
<item>Ticket machine on gate 3 checks availability with the central panel: Availability =0</item>
<item rend="bold">1 of parked cars leaves parking place</item>
<item>Sensor is released and central panel is updated</item>
<item>Pay centre takes a ticket and sends ticket details to central panel</item>
<item>Central panel answers with period of time that the car spend in the parking and amount of money to be paid</item>
<item>Availability information in central panel is updated when money is paid</item>
<item>Information is updated on each gate from central panel :Availability = 1 </item>
<item>Car goes toward the exit</item>
<item rend="bold">Ticket machine on gate 3 checks availability with the central panel: Availability =1</item>
<item>Driver asks for a ticket</item>
<item>Ticket machine on gate 3 checks again with the central panel and books a place</item>
<item>Response to ticket machine on gate 3: 1 place available; book 1 and show the way, decrease free places number to 0</item>
<item>Central panel sends localization of the place to the ticket machine</item>
<item>Information is updated on each gate from central panel :Availability = 0</item>
<item>Ticket machine gives ticket and shows the way</item>
<item rend="bold">Another car leaves his parking place</item>
<item>Sensor is released and central panel is updated</item>
<item>Pay centre takes a ticket and sends ticket details to central panel</item>
<item>Central panel answers with period of time that the car spend in the parking and amount of money to be paid</item>
<item>Availability information in central panel is updated when money is paid</item>
<item>Information is updated on each gate from central panel :Availability = 1 </item>
<item>Car goes toward the exit</item>
<item>Car form gate 3 parked in released place (incorrect)</item>
<item>Sensor activated</item>
<item>Sensor send localization details to main server</item>
<item>Main server checks if the car is parked in correct place. It is not.</item>
<item>Central panel is updated with new car localization.</item>
<item rend="bold">Car is parked</item>
</list>
<p n="p44.55"/>
</div3>
</div2>
<div2>
<head rend="bold italic">2. Data Flow Diagram</head>
<figure id="BAWE_6169d-fig.001"/>
<p n="p45.55"/>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Part 3: Definition of concurrent process and synchronisation mechanisms. </head>
<div2>
<head rend="bold italic">1. Concurrent Processes</head>
<p n="p46.55">
<s n="s1.1;p46.55">Multi-storey parking system processes' concurrency is dependent on the number of cars which are currently inside the facility. </s>
</p>
<p n="p47.55">
<s n="s1.8;p47.55">When car park is empty the only processes that work are the Display panels on all three gates, which wait for a car to come (they work all the time). </s>
<s n="s2.8;p47.55">When first car arrives one of the gates exchanges the data with Update process and concurrently with ticket machine. </s>
<s n="s3.8;p47.55">That means that Central Panel starts working parallel. </s>
<s n="s4.8;p47.55">Than car parks, that activates the Sensor which updates Central Panel. </s>
<s n="s5.8;p47.55">When car leaves Sensor is deactivated, that updates Central Panel. </s>
<s n="s6.8;p47.55">Ticket is putted into Pay centre process, which again exchange data with Central Panel. </s>
<s n="s7.8;p47.55">Finally car goes toward Exit. </s>
<s n="s8.8;p47.55">As it is easy to notice when there is only one car in car park it does not happen to often that other processes than Gate processes run at the same time. </s>
</p>
<p n="p48.55">
<s n="s1.4;p48.55">Situation changes dramatically when parking is full. </s>
<s n="s2.4;p48.55">When there are more cars in the car park where, some of them are parked, some want to park and some are leaving the building, all of the processes work concurrently. </s>
<s n="s3.4;p48.55">From all this processes that take place when parking is busy I believe that process Park, Leave and Display Panels on gates are the processes which require the most attention when concurrency is taken into account. </s>
<s n="s4.4;p48.55">I decided to use semaphores as inter-process communication and synchronisation mechanisms. </s>
</p>
<p n="p49.55">
<s n="s1.1;p49.55">Process Park uses semaphores to lock the place where the car is parked. </s>
</p>
<p n="p50.55">
<s n="s1.1;p50.55">Process Leave unlocks semaphores when car leaves the parking place. </s>
</p>
<p n="p51.55">
<s n="s1.1;p51.55">Display Panels on Gates are also based on semaphores as only one car can go threw the gate at one time. </s>
</p>
</div2>
<div2>
<head rend="bold italic">2. SR program</head>
<p n="p52.55">
<s n="s1.2;p52.55">The program below simulates working of Multi-storey Parking System. </s>
<s n="s2.2;p52.55">With processes: </s>
</p>
<list type="simple">
<item>Parking - simulates the process of parking a car.</item>
<item>Leaving - process of leaving the car park.</item>
<item>Clock - counts the time.</item>
<item>Gate 1, Gate 2, Gate 3 - they set the probability of appearing of the car at each gate.</item>
</list>
<div3>
<head rend="italic">Source code</head>
<p n="p53.55">
<s n="s1.1;p53.55">
<formula notation="" id="BAWE_6169d-form.001"/> </s>
</p>
</div3>
<div3>
<head rend="italic">Output</head>
<p n="p54.55">
<s n="s1.1;p54.55">Though the program above is wrote for 200 parking places this output is from the program in which the number of places was decreased to 5 what illustrates better working of the system. </s>
</p>
<p n="p55.55">
<s n="s1.1;p55.55">
<formula notation="" id="BAWE_6169d-form.002"/> </s>
</p>
</div3>
</div2>
</div1>
</body>
<back>
<div1 type="bibliography">
<head rend="bold">REFERENCES</head>
<p>Belzer J, Holzman A, Kent A, Williams J. <hi rend="bold">Encyclopedia of computer science and technology,</hi> CRC</p>
<p>Juan E. and Tsai J. (2002), <hi rend="bold">Compositional Verification of Concurrent and Real-Time Systems</hi>, Springer</p>
<p>Kent A., Williams G., Kent R. and Hall C. (1990),<hi rend="bold"> Encyclopaedia of microcomputers</hi>, CRC </p>
<p>Lamie E. (2004), <hi rend="bold">Real-Time Embedded Multithreading: Using Threadx® And Arm ®</hi>, CMP Books</p>
<p>Laplante P. (2004), <hi rend="bold">Real-Time Systems Design and Analysis,</hi> Wiley-IEEE Press</p>
<p>Maui High Performance Computing Center (1996), <hi rend="bold">SP Parallel Programming Workshop Message Passing Overview</hi>, <seg type="URL" n="http://www.hku.hk/cc/sp2/workshop/html/message_passing/message_passing.html"/>
</p>
<p>Olsson R. and Keen A. (2004<hi rend="bold">), The JR Programming Language: Concurrent Programming in an Extended Java</hi>, Springer</p>
<p>Ostroff J. (1992), <hi rend="bold">Formal Methods for the Specification and Design of Real-Time Safety Critical Systems</hi>, <seg type="URL" n="http://www.cse.yorku.ca/~jonathan/papers/survey.pdf"/>
</p>
<p>Reppy J. (1999), <hi rend="bold">Concurrent programming</hi>, ReppyPublished Cambridge University Press</p>
<p>Wikipedia, <seg type="URL" n="http://www.wikipedia.org"/>
</p>
</div1>
</back>
</text>
</TEI.2>
