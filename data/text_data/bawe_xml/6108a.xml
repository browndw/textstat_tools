<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_6108a" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Introductory Programming 1 - Practical 8 Writeup</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">Page header contains: student name. Page footer contains: pag number. </note>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2004-03</p>
<p n="module title">Introductory Programming 1</p>
<p n="module code">CS1D2</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">1318</p>
<p n="number of s-units">45</p>
<p n="number of p">39</p>
<p n="number of tables">2</p>
<p n="number of figures">2</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">6</p>
<p n="number of lists">1</p>
<p n="number of paragraphs formatted like lists">10</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">29.3</p>
<p n="average s-units per p">1.2</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1983</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">BSc Information Technology</p>
<p n="student ID">6108</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<titlePart>Introductory Programming 1</titlePart>
<docTitle>
<titlePart>Practical 8 Writeup</titlePart>
</docTitle>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="bold">Task </head>
<figure id="BAWE_6108a-fig.001">
<head rend="italic">The Practical 8 Design Brief</head>
</figure>
<p n="p1.39">
<s n="s1.1;p1.39">The brief for Introductory Programming Practical 8 was to design, build and test a program to calculate the GCD (Greatest Common Devisor) and LCM (Least Common Multiple) of two inputs, A and B, and return the results in G and L. This practical task was intended to demonstrate the correct use of <hi rend="italic">procedures</hi> and <hi rend="italic">parameters</hi> in Delphi, and, as such, must include both of these within the program code </s>
</p>
<p n="p2.39">
<s n="s1.1;p2.39">A suitable user interface was required of the finished article which would facilitate access to the full set of operations of the program. </s>
</p>
<p n="p3.39">
<s n="s1.1;p3.39">The procedure to be used in the program, GCDandLCM, as well as a full and more detailed brief are to be found on the attached pink practical sheet. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Design &amp; Development</head>
<p n="p4.39">
<s n="s1.1;p4.39">Designing the program to meet the criteria of the brief stipulated, to fulfil the needs of the program whilst at all times considering the essential integration of the provided procedure was the first task in the Design and Development phase of the project. </s>
</p>
<p n="p5.39">
<s n="s1.3;p5.39">The design of the form was the first consideration, and in my design plan I decided that the best way for the user to input the two values, A and B, required by the program would be to include two edit boxes on the form with suitable layers and comments to provide ease of use to the user. </s>
<s n="s2.3;p5.39">A single button with suitable label would be needed to execute the procedure GCDandLCM when clicked by the user. </s>
<s n="s3.3;p5.39">And a Message Box (dialog box) with information added in code and the output variables G and L would be the best way of communicating the output to the user. </s>
</p>
<p n="p6.39">
<s n="s1.1;p6.39">Below is a Data Flow diagram that graphically illustrates the flow of data through the system, beginning with a "black box" outside overview of the Input-Process-Output functions of the program in the LEVEL 1 diagram, followed by a more detailed "white box" examination of the internal processes in the LEVEL 2 diagram. </s>
</p>
<p n="p7.39">
<s n="s1.1;p7.39">After adding a suitable title, colour scheme and fonts and sizing the form to an adequate portion of an average display, I added the following components (and customised their captions): </s>
</p>
<list type="simple">
<item>Label - Label1</item>
<item>Edit Box - Edit1</item>
<item>Edit Box - Edit2</item>
<item>Button - CaculateGCDLCMButton</item>
</list>
<figure id="BAWE_6108a-fig.002">
<head rend="italic">The Data Flow Diagram demonstrates, in two levels, the "Black Box" and "White Box" Processes integral to the program</head>
</figure>
<p n="p8.39">
<s n="s1.2;p8.39">Secondly, I would need to examine the mathematical procedures and Pascal coding necessary to implement the required procedure. </s>
<s n="s2.2;p8.39">The design brief stipulates that the provided procedure, </s>
</p>
<p n="p9.39">
<s n="s1.1;p9.39">procedure GCDandLCM (const a,b:Integer; var G,L:Integer); should be used, as well as the Euclidean Algorithm to calculate the GCD (and the subsequent mathematics to determine the LCM. I bore this in mind through the entirety of the Design &amp; Development phase. </s>
</p>
<p n="p10.39">
<s n="s1.1;p10.39">
<formula notation="" id="BAWE_6108a-form.001"/> </s>
</p>
<p n="p11.39">
<s n="s1.1;p11.39">After examining the available information and analysing the practical sheet given I decided that I would need code to replicate the function of the Euclidean Algorithm to perform the calculation necessary to obtain the GCD from the input values A and B. This I would implement using the * (multiplication), div and abs functions (built-in to Delphi), as the first part of the GCDandLCM function. </s>
</p>
<p n="p12.39">
<s n="s1.1;p12.39">
<formula notation="" id="BAWE_6108a-form.002"/> </s>
</p>
<p n="p13.39">
<s n="s1.1;p13.39">Below the implementation of this code, I would use a ShowMessage command to provide the output to the user, displaying the user the calculated results for the GCD and LCM. In order for this output to be useful data (information) I must put it in context, as such I would use quotes (' ') to enclose descriptive text in the message box with the integer values. </s>
</p>
<p n="p14.39">
<s n="s1.1;p14.39">
<formula notation="" id="BAWE_6108a-form.003"/> </s>
</p>
<p n="p15.39">
<s n="s1.1;p15.39">Finally, below this, I would use a separate function which contains and implementation of Delphi's while loop to calculate the value of the LCM from the output generated by the Euclidean algorithm in the previous statement, and pass this output back to the CaculateGCDLCMButtonClick event handler to be displayed in the ShowMessage output. </s>
</p>
<p n="p16.39">
<s n="s1.2;p16.39">A try statement, shown below, would be added to the beginning of the event handler procedure to provide data validation and prompt the user when invalid inputs are entered. </s>
<s n="s2.2;p16.39">In order that variables did not carry over values from a previous execution of code, both were reset to a value of 1 before continuing, as both the GCD and LCM of 1 are equal to 1. </s>
</p>
<p n="p17.39">
<s n="s1.1;p17.39">
<formula notation="" id="BAWE_6108a-form.004"/> </s>
</p>
<p n="p18.39">
<s n="s1.1;p18.39">All of this code would be contained within the event handler procedure for the user's clicking of the form's only button; <formula notation="" id="BAWE_6108a-form.005"/> </s>
</p>
<p n="p19.39">
<s n="s1.1;p19.39">The full source code for my solution can be found in the Unit Listing below. </s>
</p>
<div2>
<head rend="underlined">Data for Testing</head>
<p n="p20.39">
<s n="s1.2;p20.39">In order to accurately test the implemented solution, suitable test data was required. </s>
<s n="s2.2;p20.39">The data tabulated below would be entered into the Edit box during the testing phase, with the expected outcome noted alongside it. </s>
</p>
<p n="p21.39">
<s n="s1.1;p21.39">These inputs were chosen for test data based on the following reasoning: </s>
</p>
<p rend="bulleted" n="p22.39">
<s n="s1.1;p22.39">The use of character values in either input should not be allowed and if my code is correct should generate the error message described </s>
</p>
<p rend="bulleted" n="p23.39">
<s n="s1.1;p23.39">The use of non-integer (Floating Point) numbers in either input should not be allowed and if my code is correct should generate the error message described </s>
</p>
<p rend="bulleted" n="p24.39">
<s n="s1.1;p24.39">The inputs in tests 7, 8 and 9 have know GCD and LCM values (as provided in the practical brief and checked using conventional mathematics) and as such provide two ways of checking the procedure works to give us known answers. </s>
</p>
<table id="BAWE_6108a-tab.001">
<head>N.B. Error message is as described earlier in design: ShowMessage('Please enter valid integers only');</head>
<row>
<cell/>
</row>
</table>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Unit Listing</head>
<p n="p25.39">
<s n="s1.1;p25.39">
<formula notation="" id="BAWE_6108a-form.006"/> </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Problems</head>
<p n="p26.39">
<s n="s1.1;p26.39">The only problem encountered after the implementation of the solution was that the program was crashing whenever an unexpected value was entered into the edit boxes (an exception), unexpected being out the expected integer values (being a floating point, negative or character value). </s>
</p>
<figure id="BAWE_6108a-pic.001">
<head rend="italic">Delphi's integrated debugger steps in</head>
</figure>
<p n="p27.39">
<s n="s1.3;p27.39">After attempting to find the root of the problem, I discovered that the fault did not occur when the compiled, finished .exe of the program was executed outside of Delphi. </s>
<s n="s2.3;p27.39">The problem was being caused by Delphi's integrated error handling stepping in to report the problem before the try statement implemented in code could handle the exception. </s>
<s n="s3.3;p27.39">This therefore was not a problem as the finished program would function as intended. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Testing</head>
<p n="p28.39">
<s n="s1.1;p28.39">For each planned test value, I ran through the input and recorded the output. </s>
</p>
<table id="BAWE_6108a-tab.002">
<head>* The Error Message displayed was that as intended and implemented in the error checking function of the program, using the try statement aforementioned - please see Page 4.</head>
<row>
<cell/>
</row>
</table>
<p n="p29.39">
<s n="s1.1;p29.39">My testing provided the expected results as outlined at the end of the Design and Development phase on page 4, proving within reasonable bounds that my program works as specified and intended. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Sample Run</head>
<figure id="BAWE_6108a-pic.002">
<head>
<hi rend="italic">These sample run screenshots demonstrate the completed program in use.</hi> <hi rend="italic">Top left- The program running, standing by for inputTop right- The program's error handling</hi>
<hi rend="italic">Bottom right- The program calculates and displays output as intended</hi>
</head>
</figure>
<p n="p30.39"/>
</div1>
<div1 type="section">
<head rend="bold">Conclusion</head>
<p n="p31.39">
<s n="s1.1;p31.39">The brief on the attached Practical Sheet 8 has been fulfilled in full with each of the criteria specified in the Task section being met. </s>
</p>
<p rend="bulleted" n="p32.39">
<s n="s1.1;p32.39">Correct values for GCD and LCM are produced for integers A and B entered into edit boxes by the user </s>
</p>
<p rend="bulleted" n="p33.39">
<s n="s1.1;p33.39">A suitable error message is displayed for invalid input </s>
</p>
<p rend="bulleted" n="p34.39">
<s n="s1.1;p34.39">The provided procedure, GCDandLCM, was implemented in the program as required </s>
</p>
<p rend="bulleted" n="p35.39">
<s n="s1.1;p35.39">The Euclidean algorithm was adapted and implemented as required </s>
</p>
<p rend="bulleted" n="p36.39">
<s n="s1.1;p36.39">A suitable user interface for this procedure was designed and implemented as stipulated by the design brief </s>
</p>
<p n="p37.39">
<s n="s1.1;p37.39">Furthermore, during the stages of the completion of this assignment and this associated report I have learnt about procedures and parameters, as per the intended goal of the set assignment. </s>
</p>
<p rend="bulleted" n="p38.39">
<s n="s1.1;p38.39">
<hi rend="italic">Procedures</hi> were used in the form of the GCDandLCM procedure provided, and in my design of procedure GCDLCMButtonClick to handle the event of the user clicking the calculate button </s>
</p>
<p rend="bulleted" n="p39.39">
<s n="s1.1;p39.39">
<hi rend="italic">Parameters</hi> were used in the defining and subsequent calling of constants A and B and variables G and L as formal parameters within the procedure GCDandLCM </s>
</p>
</div1>
</body>
<back>
<div1 type="back text">
<head rend="bold">Acknowledgements</head>
<p>The major source of information for the project was Discover Delphi by S Williams and S Walmsley, and the Introductory Programming 1 and Programming 1 practical notes. I was assisted with the implementation of the GCDandLCM procedure by a colleague and by supervisors in the laboratory during practical sessions.</p>
</div1>
</back>
</text>
</TEI.2>
