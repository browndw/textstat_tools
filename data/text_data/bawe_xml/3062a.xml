<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TEI.2 SYSTEM "tei_bawe.dtd">
<TEI.2 id="_3062a" n="version 1.0">
<teiHeader>
<fileDesc>
<titleStmt>
<title>Coursework 1</title>
</titleStmt>
<extent/>
<publicationStmt>
<distributor>British Academic Written English (BAWE) corpus</distributor>
<availability>
<p>The British Academic Written English (BAWE) corpus was developed at the Universities of Warwick, Reading and Oxford Brookes, under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC. Subject to the rights of the these institutions in the BAWE corpus, and pursuant to the ESRC agreement, the BAWE corpus is available to researchers for research purposes PROVIDED THAT the following conditions are met:</p>
<p>1. The corpus files are not distributed in either their original form or in modified form.</p>
<p>2. The texts are used for research purposes only; they should not be reproduced in teaching materials.</p>
<p>3. The texts are not reproduced in full for a wider audience/readership, although researchers are free to quote short passages of text (up to 200 running words from any given text).</p>
<p>4. The BAWE corpus developers (contact: BAWE@warwick.ac.uk) are informed of all projects, dissertations, theses, presentations or publications arising from analysis of the corpus.</p>
<p>5. Researchers acknowledge their use of the corpus using the following form of words: "The data in this study come from the British Academic Written English (BAWE) corpus, which was developed at the Universities of Warwick, Reading and Oxford Brookes under the directorship of Hilary Nesi and Sheena Gardner (formerly of the Centre for Applied Linguistics [previously called CELTE], Warwick), Paul Thompson (Department of Applied Linguistics, Reading) and Paul Wickens (Westminster Institute of Education, Oxford Brookes), with funding from the ESRC (RES-000-23-0800)."</p>
</availability>
</publicationStmt>
<notesStmt>
<note resp="British Academic Written English (BAWE) corpus project">The document has a title page which contains:document titletitle part</note>
<note resp="British Academic Written English (BAWE) corpus project">Standard cover page. Almost whole assignment in table, converted to text.</note>
</notesStmt>
<sourceDesc>
<p n="level">1</p>
<p n="date">2005-10</p>
<p n="module title">Structured programming</p>
<p n="module code">U08003</p>
<p n="genre family">Design specification</p>
<p n="discipline">Computer Science</p>
<p n="disciplinary group">PS</p>
<p n="grade">D</p>
<p n="number of authors">1</p>
<p n="number of words">948</p>
<p n="number of s-units">65</p>
<p n="number of p">38</p>
<p n="number of tables">0</p>
<p n="number of figures">0</p>
<p n="number of block quotes">0</p>
<p n="number of formulae">14</p>
<p n="number of lists">17</p>
<p n="number of paragraphs formatted like lists">3</p>
<p n="abstract present">no abstract</p>
<p n="average words per s-unit">14.6</p>
<p n="average s-units per p">1.7</p>
<p n="macrotype of assignment">simple assignment</p>
</sourceDesc>
</fileDesc>
<encodingDesc>
<p>TEI P4 (documented in: BAWE.documentation.pdf)</p>
</encodingDesc>
<profileDesc>
<particDesc>
<person>
<p n="gender">m</p>
<p n="year of birth">1980</p>
<p n="first language">English</p>
<p n="education">UKa</p>
<p n="course">BSc Computing</p>
<p n="student ID">3062</p>
</person>
</particDesc>
</profileDesc>
</teiHeader>
<text>
<front>
<titlePage>
<titlePart rend="bold">Student No. <name type="student ID"/> Student Name <name type="student name"/>
</titlePart>
<titlePart rend="bold">Module No. U08003 Module Title Structured Programming</titlePart>
<docTitle>
<titlePart rend="bold">Coursework Title or No. Coursework </titlePart>
</docTitle>
<titlePart rend="bold">Module Leader <name type="tutor name"/>
</titlePart>
</titlePage>
</front>
<body>
<div1 type="section">
<head rend="bold">Test data and expected results</head>
<div2>
<head rend="bold">Test data 1</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p1.38">
<s n="s1.1;p1.38">
<formula notation="" id="BAWE_3062a-form.001"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p2.38">
<s n="s1.1;p2.38">If the program works correctly, I would expect the results to be as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: 1000</item>
<item>Total of all negative numbers: 0</item>
<item>Total of all positive numbers: 1000</item>
</list>
<p n="p3.38">
<s n="s1.1;p3.38">However, I want to test the algorithm with extremes of numbers that can be entered and accepted. </s>
</p>
</div3>
</div2>
<div2>
<head rend="bold">Test data 2</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p4.38">
<s n="s1.1;p4.38">
<formula notation="" id="BAWE_3062a-form.002"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p5.38">
<s n="s1.1;p5.38">The results should be as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: -1000</item>
<item>Total of all negative numbers: -1000</item>
<item>Total of all positive numbers: 0 </item>
</list>
<p n="p6.38">
<s n="s1.1;p6.38">As mentioned above, I want to test the algorithm with extremes of numbers. </s>
</p>
</div3>
</div2>
<div2>
<head rend="bold">Test data 3</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p7.38">
<s n="s1.1;p7.38">
<formula notation="" id="BAWE_3062a-form.003"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p8.38">
<s n="s1.1;p8.38">If working correctly, the program should display as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: 0</item>
<item>Total of all negative numbers: -500</item>
<item>Total of all positive numbers: 500</item>
</list>
<p n="p9.38">
<s n="s1.1;p9.38">The numbers chosen here could expose a flaw in the algorithm as the total should be '0' but the other totals equal in weighting. </s>
</p>
</div3>
</div2>
<div2>
<head rend="bold">Test data 4</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p10.38">
<s n="s1.1;p10.38">
<formula notation="" id="BAWE_3062a-form.004"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p11.38">
<s n="s1.3;p11.38">These numbers should test the number check section of code, i.e. only accepting numbers between -100 and +100. </s>
<s n="s2.3;p11.38">Note that the numbers in the brackets are what was entered after the numbers out of range. </s>
<s n="s3.3;p11.38">Expected results: </s>
</p>
<list type="simple">
<item>Total of all numbers: 357</item>
<item>Total of all negative numbers: -199</item>
<item>Total of all positive numbers: 556</item>
</list>
</div3>
</div2>
<div2>
<head rend="bold">Test data 5</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p12.38">
<s n="s1.1;p12.38">
<formula notation="" id="BAWE_3062a-form.005"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p13.38">
<s n="s1.2;p13.38">In my code there is no mention of 'if number = 0' so it would be worth while checking what would happen if this was input. </s>
<s n="s2.2;p13.38">Expected results are as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: 0</item>
<item>Total of all negative numbers: 0</item>
<item>Total of all positive numbers: 0</item>
</list>
</div3>
</div2>
<div2>
<head rend="bold">Test data 6</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p14.38">
<s n="s1.1;p14.38">
<formula notation="" id="BAWE_3062a-form.006"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p15.38">
<s n="s1.4;p15.38">As before, there is no mention of '-0' in the code. </s>
<s n="s2.4;p15.38">This time, the fact it is input as -0 (no such number...?) may expose an error. </s>
<s n="s3.4;p15.38">I think the program <hi rend="italic">might</hi> display the results as '-0'. </s>
<s n="s4.4;p15.38">Expected results: </s>
</p>
<list type="simple">
<item>Total of all numbers: 0 </item>
<item>Total of all negative numbers: 0 (possibly '-0')</item>
<item>Total of all positive numbers: 0</item>
</list>
</div3>
</div2>
</div1>
<div1 type="section">
<head rend="bold">Dictionary of variables</head>
<list type="simple">
<item>
<hi rend="bold">Name</hi>: Counter</item>
<item>
<hi rend="bold">Type</hi>: Integer</item>
</list>
<p n="p16.38">
<s n="s1.3;p16.38">
<hi rend="bold">Description</hi>: My program makes use of a 'while' loop. </s>
<s n="s2.3;p16.38">To count the required loops, and to keep track of the current number, I use this variable to store an integer that increments by one with every loop. </s>
<s n="s3.3;p16.38">Note that 'Counter' is given the value of '1' before the while loops starts-this is to ensure the correct number of loops and to indicate what the current number is at the start of the program. </s>
</p>
<list type="simple">
<item>
<hi rend="bold">Name</hi>: Number</item>
<item>
<hi rend="bold">Type</hi>: Integer</item>
</list>
<p n="p17.38">
<s n="s1.3;p17.38">
<hi rend="bold">Description</hi>: This variable stores the input of the user, i.e. numbers one through to ten. </s>
<s n="s2.3;p17.38">To keep the amount of coding down and to simplify the program, I chose not to have a variable for every number entered (Num1, Num2, Num3 etc.). </s>
<s n="s3.3;p17.38">Instead, this variable stores the number input, adds to the appropriate totals and then is recycled to store the next number. </s>
</p>
<list type="simple">
<item>
<hi rend="bold">Name</hi>: Total</item>
<item>
<hi rend="bold">Type</hi>: Integer</item>
</list>
<p n="p18.38">
<s n="s1.2;p18.38">
<hi rend="bold">Description</hi>: In order to make the program user friendly and easy for someone else to understand, I chose variables with names that closely resemble their purpose. </s>
<s n="s2.2;p18.38">Thus, variable 'Total' stores the sum of all numbers entered. </s>
</p>
<list type="simple">
<item>
<hi rend="bold">Name</hi>: TotalNeg</item>
<item>
<hi rend="bold">Type</hi>: Integer</item>
</list>
<p n="p19.38">
<s n="s1.2;p19.38">
<hi rend="bold">Description</hi>: As mentioned above, the name of the variable matches its purpose. </s>
<s n="s2.2;p19.38">This variable holds the total of all negative numbers input. </s>
</p>
<list type="simple">
<item>
<hi rend="bold">Name</hi>: TotalPos</item>
<item>
<hi rend="bold">Type</hi>: Integer</item>
</list>
<p n="p20.38">
<s n="s1.1;p20.38">
<hi rend="bold">Description</hi>: This variable holds the total of all positive numbers input by the user. </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Stepwise refinement</head>
<p rend="ordered" n="p21.38">
<s n="s1.2;p21.38">1. </s>
<s n="s2.2;p21.38">Initialise variables. </s>
</p>
<p rend="ordered" n="p22.38">
<s n="s1.2;p22.38">2. </s>
<s n="s2.2;p22.38">Prompt user to enter ten numbers, and check they are within correct number range. </s>
</p>
<p rend="ordered" n="p23.38">
<s n="s1.4;p23.38">3. </s>
<s n="s2.4;p23.38">Keep running totals of all numbers entered, all negative numbers and all positive numbers. </s>
<s n="s3.4;p23.38">4. </s>
<s n="s4.4;p23.38">Print results. </s>
</p>
<p n="p24.38">
<s n="s1.1;p24.38">
<formula notation="" id="BAWE_3062a-form.007"/> </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Delphi program code</head>
<p n="p25.38">
<s n="s1.1;p25.38">
<formula notation="" id="BAWE_3062a-form.008"/> </s>
</p>
</div1>
<div1 type="section">
<head rend="bold">Results</head>
<div2>
<head rend="bold">Test data 1</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p26.38">
<s n="s1.1;p26.38">
<formula notation="" id="BAWE_3062a-form.009"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Actual results</head>
<p n="p27.38">
<s n="s1.2;p27.38">The program functioned correctly. </s>
<s n="s2.2;p27.38">Actual results as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: 1000</item>
<item>Total of all negative numbers: 0</item>
<item>Total of all positive numbers: 1000</item>
</list>
</div3>
</div2>
<div2>
<head rend="bold">Test data 2</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p28.38">
<s n="s1.1;p28.38">
<formula notation="" id="BAWE_3062a-form.010"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Actual results</head>
<p n="p29.38">
<s n="s1.2;p29.38">Program functioned correctly. </s>
<s n="s2.2;p29.38">Actual results as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: -1000</item>
<item>Total of all negative numbers: -1000</item>
<item>Total of all positive numbers: 0 </item>
</list>
</div3>
</div2>
<div2>
<head rend="bold">Test data 3</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p30.38">
<s n="s1.1;p30.38">
<formula notation="" id="BAWE_3062a-form.011"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Actual results</head>
<p n="p31.38">
<s n="s1.2;p31.38">Program functioned correctly. </s>
<s n="s2.2;p31.38">Actual results as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: 0</item>
<item>Total of all negative numbers: -500</item>
<item>Total of all positive numbers: 500</item>
</list>
</div3>
</div2>
<div2>
<head rend="bold">Test data 4</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p32.38">
<s n="s1.1;p32.38">
<formula notation="" id="BAWE_3062a-form.012"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p33.38">
<s n="s1.2;p33.38">Program functioned correctly. </s>
<s n="s2.2;p33.38">Actual results as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: 357</item>
<item>Total of all negative numbers: -199</item>
<item>Total of all positive numbers: 556</item>
</list>
</div3>
</div2>
<div2>
<head rend="bold">Test data 5</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p34.38">
<s n="s1.1;p34.38">
<formula notation="" id="BAWE_3062a-form.013"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p35.38">
<s n="s1.2;p35.38">Program functioned correctly. </s>
<s n="s2.2;p35.38">Actual results as follows: </s>
</p>
<list type="simple">
<item>Total of all numbers: 0</item>
<item>Total of all negative numbers: 0</item>
<item>Total of all positive numbers: 0</item>
</list>
</div3>
</div2>
<div2>
<head rend="bold">Test data 6</head>
<div3>
<head rend="bold">Data entered</head>
<p n="p36.38">
<s n="s1.1;p36.38">
<formula notation="" id="BAWE_3062a-form.014"/> </s>
</p>
</div3>
<div3>
<head rend="bold">Expected results</head>
<p n="p37.38">
<s n="s1.2;p37.38">Program functioned correctly. </s>
<s n="s2.2;p37.38">Actual results as follows (Note that the program did not display the results as '-0' as I thought it might): </s>
</p>
<list type="simple">
<item>Total of all numbers: 0</item>
<item>Total of all negative numbers: 0</item>
<item>Total of all positive numbers: 0</item>
</list>
<p n="p38.38">
<s n="s1.5;p38.38">The only problems encountered with my program are superficial. </s>
<s n="s2.5;p38.38">For example, when a very large integer number is entered, the program crashes-this could be seen a fault of Delphi rather than my program, in that an integer has to be in the range -32,768 to 32,767. </s>
<s n="s3.5;p38.38">I believe that if the variables were changed from integer to real (floating point) this problem would be less of an issue as the number range is far larger. </s>
<s n="s4.5;p38.38">However, I have not tested this so don't know it to be true. </s>
<s n="s5.5;p38.38">In addition, the screen can become slightly cluttered when numbers outside of the range are entered repeatedly, though by keeping track of which number the user is currently inputting, the program remains relatively clear and user friendly. </s>
</p>
</div3>
</div2>
</div1>
</body>
<back/>
</text>
</TEI.2>
