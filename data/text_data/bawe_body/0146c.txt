This document provides an in-depth approach to the technical details of aspects discussed in the Summary Report. As such, this document is heavily referred to in the Summary Report.
The Technical Report comprises three broad chapters for the electronics, mechanical and software elements of the project.
The technical aims of the electronics team are:
To use a microcontroller with a built-in large amount of RAM (Random Access Memory) and UART (Universal Asynchronous serial Receiver and Transmitter) rather than a PLD and separate RAM IC.
Initialise Maxim MAX6952 LED Driver IC 's (hereafter referred to as 'LED Driver ICs' when scoreboard is powered up.
Store the ASCII bytes received in an address in memory specified by a character location byte received in the same transmission.
Read the character data from memory and send the character data by generating SPI (Serial Peripheral Interface) compatible data signals and sending them in an order appropriate to the wiring scheme of the scoreboard.
The above is to be repeated for the Satellite Scoreboards but must also provide motor control functionality.
Implement a wireless communications link between the Main Scoreboard and the Master Scorer PC with the option for a serial cable back-up.
To implement these aims, the following objectives were laid out:
Test LED Driver PCBs (Printed Circuit Boards) for functionality with Maxim 's test software which uses a PC parallel port to generate SPI compatible signals.
Determine how many LED Driver PCBs are functional and order replacements for faulty ones as soon as possible.
Investigate differences between controlling the LED Driver PCBs in a daisy-chain and controlling them in parallel by individually controlling their CS (Chip Select) lines.
Obtain a microcontroller and development board kit and write test programs in C to understand operation of built-in features such as a UART and automatic SPI signal generation.
Control one driver and four LED Modules from the microcontroller development board before scaling up.
Design and prototype the additional electronics to drive all 56 LED Driver PCBs in the Main Scoreboard under one system whilst modifying the microcontroller program to do so.
Design and manufacture PCBs for the additional electronics to interface between the microcontroller and the LED Driver PCBs.
Implement similar circuits for the Satellite Scoreboards taking account of the reduced complexity and motor control element.
PCB Testing.
In order to determine the precise problems with the previous year 's system, a thorough test of all electronic components was carried out; starting with the MAX6952 LED Driver PCBs. Initial visual inspection of the PCB confirmed that the layout matched the basic operation circuit as detailed in the MAX6952 data sheet 1.
Maxim, the supplier of the MAX6952 ICs being used, provides test software 2 for these ICs which was obtained and used to investigate the PCBs. In order to use this software, a parallel port adapter and interface circuit were required. These were constructed in accordance with the information given within the software.
As this was a test specifically for the SPI interface of the MAX6952, those elements relating to the MAX6953, which does not use the same SPI communications, or the blink function, which was not considered in the previous system, were not used. The software was then used to send SPI signals to the PCB board with LED Modules attached.
Initial attempts to transmit SPI data failed to produce any visible results on the LED Modules. At first this was thought to be related to the order in which the configuration data were transmitted to the IC and so all permutations of the order in which intensity, configuration and the data itself were attempted, but produced no result. The PCB was again inspected thoroughly to ensure it matched the operational circuit.
It was noted that the signals generated by the software were arriving at the PCB with a considerable amount of smoothing, resulting in a wave that was not square.
The signal from the PC 's parallel port was a sharp square wave. The interface circuit between the parallel port and the LED Driver PCB was suspected of causing this distortion, and examined in detail. With relatively few components used, it was possible to investigate the various effects each combination of these components caused 3 . By removing the capacitor completely, the smoothing on the signal was reduced considerably, but with an increased level of noise. Despite the noise, SPI signals from the software caused the LED Driver PCB to respond by correctly showing the data it had been sent.
As the signal path length increased, the noise distortion made operation of the LED Driver PCB more unreliable. As it was predicted in the previous year 's work that signal lengths could be upwards of 30 m, this was a great cause for concern.
Work on the scoreboard system last year involved the use of PCBs in the scoreboard as this was felt to help fulfil two key objectives. That is, that the scoreboard should be easy to assemble and have a high professional finish. PCBs offer a reliable solution for replacement of repeated electronic circuitry. PCBs are designed using Computer Aided Design (CAD) tools such as Protel DXP 4, which use electrical and design rules, net-listing and auto-routing to aid PCB layout design. The Protel files produced by last year 's group were kept by the technicians in the Engineering department. Therefore it was straightforward to produce more identical PCBs for replacing faulty ones in the Main Scoreboard and for fitting in the new Satellite Scoreboards. The process of creating a PCB layout in Protel DXP is detailed in Appendix F.
After testing the LED Modules and LED Driver PCBs successfully it was decided to use exactly the same LED Driver PCBs, LED Modules and connections between them in all six Satellite Scoreboards. This is so that the electronics developed to control the LED Driver PCBs in the Main Scoreboard can easily be modified to control a Satellite Scoreboard.
Microcontroller vs. PLD.
The previous year 's system attempted to use a Programmable Logic Device (PLD) to control the LED driver array. This approach met with little success, due to the complexity of using a real-time device such as a PLD.
PLDs are an array of programmable logic gates, with connections made and broken between the gates that are described by compiling the code (such as VHDL) used to generate them. However, very little control is had over the final physical layout, which can introduce unwanted delay problems. PLDs do excel where many asynchronous operations are required as they are free from the constraints of a linear program.
Microcontrollers incorporate many features required of a much larger computer, such as processing, memory and I/O. Many are programmable using high-level languages such as C#, as well as low-level Assembler. The functions of the microcontroller are all controlled in the software written for it, and timing issues are resolved because everything operates at the speed of the microcontroller. The microcontroller is less than ideal for asynchronous operation due to the microcontroller following a linear program, although the use of interrupts can overcome this to some extent.
Due to the previous experience within the group with C# over VHDL, and their generally greater reliability and repeatability, microcontrollers were selected to be used to interface between the Master Scorer PC and the electronics.
The existing Master Scorer PC sends out data serially using the RS-232 format. It was decided to use this but to investigate ways of transmitting it wirelessly to avoid long cable lengths. However, a need was also raised for an optional serial cable link to be included due to the unknown reliability issues of wireless systems in very large open environments such as those found in gymnastics halls. See Appendix F for wireless research in more detail.
The LED Driver ICs on the LED Driver PCBs use the SPI protocol. This makes use of three lines called Data, Clock and CS. Data is read serially into SPI devices by synchronising with the clock edges. In the case of the MAX6952 LED Driver IC this is 16-bit data and so 16 clock pulses are required to read in one instruction. Devices using SPI ignore data input to them unless their CS pin is activated by the CS Line. This topic was researched in depth and is documented in more detail in Appendix F.
The general signal connection plan was to have a 'fan-out' system supplying common Clock and Data signals to all LED Driver PCBs. To do this, the initial plan was to connect the Clock and Data inputs from each LED Driver IC in parallel. An individual Clock and Data pin on the microcontroller would then have supplied the logic signal for all the LED Driver ICs in the Main Scoreboard simultaneously.
When attempting to implement this system, problems were encountered with signal degradation due to the 'fan-out' scheme. On a test bench, it was found that the microcontroller was only capable of supplying a maximum of three parallel Clock or Data inputs to the LED Driver ICs. This discovery was not acceptable, as there were not enough free pins on the microcontroller to allow individual Clock and Data signal lines to each LED Driver IC. Therefore, another system had to be developed to enable the microcontroller to drive the Clock and Data inputs of all 56 LED Driver ICs. Several methods were attempted to counter this effect; for example, through the use of buffering (see Appendix G) and demultiplexing all three SPI lines. However, the problem was resolved using Schmitt triggers.
Schmitt Triggers.
LMC555CN 5 (CMOS) timer IC 's were configured as Schmitt triggers (Figure 1-4). The operation of a Schmitt trigger is described in Appendix F and details of its application are described in Appendix G.
There are three sections to the Main Scoreboard, with 14, 21 and 21 LED Driver PCBs in the 'Small', 'Middle' and 'End' sections respectively. Since the CMOS Schmitt triggers described above can only drive approximately ten CMOS inputs in parallel, a minimum of two Schmitt triggers were required per section. One Schmitt trigger was used to drive a maximum of 11 LED Driver PCBs, with the other Schmitt trigger used to drive signals to the remaining LED Driver PCBs.
The Schmitt triggers that have been used in this project are of the inverting type. Therefore in Figure 1-5, the 2nd Schmitt trigger is needed to invert the waveform so it can re-inverted by the 3rd Schmitt trigger. The 2nd Schmitt trigger in the 'Middle' section is used to provide the input signal to the 1st Schmitt triggers in the 'Small' and 'End' sections.
Demultiplexers.
The 56 CS lines, one to each LED Driver IC, need to be uniquely addressable from the microcontroller. However, only two ports of 8-bits (and therefore eight pins) were spare on the microcontroller and so the CD74HCT154 7 4 to 16 line demultiplexers are used to achieve up to 64 CS outputs. These are active low, inverting devices and are therefore transparent to the normal SPI CS signal which is active low.
RS-232 l CMOS.
The RS-232 protocol transmits and receives using +15 V to represent logic '0' and -15 V to represent logic '1'. A device was required to convert these   15 V RS-232 signal levels from the serial port on the Master Scorer PC, to CMOS compatible logic levels for direct interface to the microcontroller input pins. The documentation included with the microcontroller development board (STK500) suggested the use of a MAX202CSE 8 IC as a RS-232 transceiver.
The through-hole mounting version (MAX202CPE 8) of this IC was investigated, prototyped and included in the final design of the Scoreboard Controller PCB and all six Satellite Controller PCBs. The voltage converter does not need to be included with the CPE version. For further analysis of the Low Pass Filters see Appendix G. Since the communication channel to the scoreboard is only one-way (from Master Scorer PC to microcontroller), the transmit path from the TXD pin on the microcontroller is not strictly need. However, for the purposes of de-bugging, testing, and future-proofing, the transmit path has been fully connected to allow for two-way RS-232 communication.
Motor Controller IC.
The Satellite Scoreboards have been designed to rotate, thereby giving a wider field of view to the spectators.
The manufacturing/mechanical team calculated the required torque and speed to move a Satellite Scoreboard. A motor was chosen that would satisfy these requirements. The motor was also required to operate from either 5 V or 12 V DC, since these were the two power supply voltages provided to each scoreboard.
The motor that was chosen was from the IG33 10 12 V range. The motor is bi-directional, thus allowing the scoreboard to rotate back-and-forth. To gauge how much current the motor would draw under loaded conditions, a real-life demonstration was performed of the motor rotating the scoreboard while connected through an ammeter to a 12 V power supply. The maximum current draw was found to be approximately 100 mA.
The chosen motor drive circuitry is based on a single IC called the L293D 11 for details of how it is used in the project see Appendix G.
This section details technical aspects of the final implementation of the scoreboard electronics in depth.
Connectors.
The Molex connection system was chosen due to its known reliability for all connections to the interface PCBs to be made.
It was decided to keep the transmission format of the display data from the Master Scorer PC the same as used in the previous year. For the details of this component of the final design see the section titled 'Data Transmission Format' in Appendix A.
Serial Cable.
The communications link uses the RS-232 output from the Master Scorer PC. This has 8-bit words, one stop bit, no parity bit and the compulsory start bit. The data rate is 9600 Baud. This is transmitted over a simple cross-over cable (which can therefore be plugged in either way round) with no hand-shaking 13.
The ability exists to be able to switch signal sources on the Main Scoreboard between either the serial cable or the wireless link. Therefore, the end-user has a choice of which link method to use if for example the Bluetooth is unable to connect in certain environments.
Bluetooth Communications.
The Bluetooth hardware that was purchased was the BL-521 14 and BL-730 15. They are produced by Brainboxes Ltd 16. The two devices were purchased from Brainboxes' UK supplier, Talisman UK Ltd 17.
These two devices are essentially the same; the BL-521 is the BL-730 in a case and with a cable attached. Both devices are rated as having a Class 1 (14dBm) power output, which provides a typical open-field range of about 300m. A software utility is provided by Brainboxes Ltd to allow internal parameters of both devices to be configured. The utility has an intuitive and easy-to-use windows based GUI. The utility is required to establish a pairing between both devices, and to set other factors, such as the baud rate.
The configuration of parameters in the two modules was performed on a test bench using the supplied software. Parameters, such as the corresponding device address of the other module it is to be paired with, and the security PIN code that authorises the pairing, are all stored in the memory on each Bluetooth module. Therefore, provided the parameters in each module are correct, a wireless link should be established as soon as both modules are powered up. This means no end-user intervention is required to initiate the wireless link.
The BL-521 was connected to the serial port on the Master Scorer PC. It has its own mains power adaptor which needs to be plugged into the module. The BL-730 transmit and receive pins were connected directly to pins on the MAX202CPE IC on the Scoreboard Controller PCB. The BL-730 module requires a 5 V power supply, and draws a maximum of 120 mA. Therefore, a 5 V voltage regulator rated at 1 A was mounted on the same Vera-board as the module to provide a stable voltage supply from the 12 V electrical input to the scoreboard, see Figure 1-12.
The BL-730 was mounted within the 'Middle' scoreboard section. The BL-730 was chosen because it can be easily modified to use an external aerial. An external aerial connection is required because the module will be placed within the largely metallic case of the scoreboard section. The metallic case would severely attenuate any received signals from the BL-521, thereby reducing the effective range of the communications link. Therefore, by following the supplied instructions 18, the integral aerial was removed from the module, and an SMA connector mounted onto the PCB. This SMA connector allows connections to be made to an external antenna mounted outside the confines of the metallic case.
The external antenna used was the NET-WL-ANT008OSC 19, from Solwise Ltd. This antenna was chosen for the following reasons:
It has a relatively high gain of 7.8 dB.
It has an omni-directional capture direction. This means the end-users do not have to consider the direction in which the antenna is facing.
It has a magnetic base, so can be  'stuck' to the sides of the metallic scoreboard case.
It has a reverse SMA connection, so it can be readily attached to the SMA plug on the modified BL-730.
Microcontroller Integration.
The microcontroller is integrated between the Master Scorer PC and scoreboard electronics. The microcontroller used, Atmel ATMEGA16 20, has four general purpose input/output ports of eight pins each, as well as various pins for power supplies and external references and oscillators. The I/O pins were assigned as follows:
The development of the microcontroller underwent a number of cycles, each implementing a new function to the program code. Each cycle was rigorously tested before further development occurred. As the code progressed and problems were encountered, certain functions needed to undergo several revisions in order to perform the correct function.
Microcontroller Programming.
The program existed in three main stages. The first stage implemented the serial UART interface so that the microcontroller could receive and transmit serial data. Although transmission was not essential for the requirements of the scoreboard system, it would serve a vital role in future debugging. The second stage added various SPI routines to allow the microcontroller to control the LED Driver PCBs. After attempting to do this using the built-in SPI functionality of the microcontroller, the specifics of how the LED Driver PCBs received the SPI signal (see Figure 1-17 below), most specifically the behaviour of the CS during the final clock pulse, lead to a decision to utilise a custom programmed SPI output routine that would produce a clean and controlled SPI signal for the LED Driver PCBs. This routine would also be heavily revised in light of signal and fan-out problems encountered during the development of the interface electronics. The final stage implemented the protocol as used by the Master Scorer PC system, so that the microcontroller would correctly sort and display data once sent from the Master Scorer PC.
Four data arrays are used to store the current state of the display. These arrays are each single dimensional arrays of 64 elements, to represent the 8x8 display area each demultiplexer is capable of controlling, although 7x7 is the largest used in this specific system. The one-dimensional nature of this array made it easier to define locations mathematically, so that the incoming data of a 29x7 display could be correctly sorted into the appropriate array and position.
The final program is contained within Appendix D with descriptions of the major functions within the program. The overall flow of the program is shown in Figure 1-18.
Several debugging routines are included within the operation of the microcontroller, which can be activated by setting the debug variable to a value of 1, either on compilation of the program or through a serial command. This debug variable causes the microcontroller to constantly transmit data to the LED Driver PCBs in the main function so signal faults can be located, and echoes back input streams using the TransmitByte function.
Once the designation of I/O pins had been decided for the microcontroller the Scoreboard Controller PCB was relatively straightforward to design. It also incorporates an RS-232 level converter circuit as detailed in Section 1.3 'RS 232 l CMOS'. Figure 1-19 shows a block diagram of this PCB and its specifications are shown below it.
Please see Appendix C for the schematic and layout of the PCB designed. The finished PCB is shown below in Figure 1-20.
All three SPI Driver PCBs are identical in track layout; this is to reduce the cost of in-house PCB manufacture which is charged by number of designs submitted and total board areas. By drilling and populating them differently each is customised for its intended section ('Small', 'Middle' or 'End') of the Main Scoreboard as follows in Table 1-3 below.
PCB Layout Considerations.
Configuration.
The functionality of the SPI Driver PCBs can be seen in the overall system schematic in Figure 1-8.
See Appendix C for details of the SPI Driver PCBs schematic and layout.
The original power supply that was modified for use with the scoreboard had three outputs, with one output going to each of the three sections. The cables to each section carried 5 V DC and a ground line.
During testing of this previous system, it was found that as more LED Modules were activated, the voltage across the 5 V supply rails became progressively lower. While the 'Middle' scoreboard section was fully activated in test mode, the voltage present at the supply rails was 3.2 V. With the scoreboard unconnected, the voltage at the powers supply connecters was found to be 5 V.
The cause of this 1.8 V voltage drop during electrical loading can be attributed to losses in the cabling due to large current flow. By referring to the appropriate calculations 22, the total voltage drop across an output cable of the original power supply would be 1.92 V, so only about 3.1 V should be present at the scoreboard. As stated earlier, it was actually found to be about 3.2 V.
Once new, larger diameter power cables had been installed in a new power supply, the observed voltage to the 'Middle' section was about 4.6 V; a significant improvement from the 3.1 V measured previously. This voltage increase has made the LED 's shine brighter, as every LED Driver IC now has a higher supply voltage.
However, this value of 4.6 V is still not large enough to supply the microcontroller, Schmitt triggers and demultiplexers, which all require a stable 5 V DC supply voltage. To solve this problem, the power supplies have been modified to output 12 V as well as 5 V. This is possible because the power connectors are 3-way and the cable used is 3-core. Voltage regulators on the SPI Driver PCBs accept 12 V from the power supplies and reduce it to a stable 5 V for the supply rails to the circuitry.
The new model of power supply that has been chosen is the 300 W PC Q-Tec ADT-300 ATX Power Supply Unit (PSU). The choice of power supply had be of at least the 250 W capability of PC power supply unit used previously. The unit also needed to be capable of outputting 5 V and 12 V.
The required modifications were performed by Stewart Edris, an electrical technician within the department. He also tested, and authorised the units for electrical safety. As a requirement for electrical safety, 10 A 22 'T' type anti-surge fuses were incorporated into the electrical path to the 5 V supply rails to the LED Driver ICs. 500 mA fuses were also incorporated onto the electronics PCBs to protect the circuitry.
Another modification had to be made to the power supply to allow it to switch on by the rocker switch on the back of it without a signal from a PC motherboard. The connection to the motherboard signal was mimicked by connecting the green cable of the motherboard connector in the power supply directly to ground, see Figure 1-25.
The power-in connector in the scoreboard routes the 5 V to the LED Driver PCBs, the 12 V to the voltage regulators on the SPI Driver PCBs and the Bluetooth module 's circuit in the middle section, and attaches a common ground for both voltages.
To make power distribution within the scoreboard more efficient and thus avoid voltage drops, the power to each LED Driver PCB is looped twice along the LED rows, see Figure 1-26. See Appendix A for the previous daisy-chain arrangement of power distribution within the Main Scoreboard sections.
This section details the electronics used in the Satellite Scoreboards. Since the same LED Driver PCBs and LED Modules are used, the design is a combination of the techniques used in the Main Scoreboard with the addition of motor control.
The judges' laptops use exactly the same format of data transmission as is used as on the Master Scorer PC except there are now only 15 characters to display and there are some special op-codes for control of the motor. These op-codes are detailed in the microcontroller section of Chapter 1.5.3.
Since the Satellite Scoreboards are intended to be used near or on the same table as a judges' laptop there is no need for wireless communication to the Satellite Scoreboards. Therefore a standard 9-way D-type plug is used for simple 2-way RS-232 communication to the microcontroller again used with a 3-wire (Tx, Rx and ground) cross-over serial cable configured for no handshaking as previously detailed.
Satellite Scoreboard Microcontroller.
The microcontrollers in the Satellite Scoreboards perform a very similar role to the microcontroller in the Main Scoreboard, just on a much smaller scale. To maintain commonality between the two systems, it was decided to use the same ATMega16 microcontroller. This allowed rapid adaptation of the main microcontroller program. Although a Satellite Scoreboard microcontroller will be controlling considerably fewer LED Driver PCBs, it does require some additional functionality in motor control. The motor control requires two output bits to control the motor direction, additional command codes to activate the motor and a timing system so that measured and precise movement can be obtained.
The pin assignments on the microcontroller remained similar in the Satellite Scoreboard system to the main system. However, due to the much smaller scale, the binary outputs for the demultiplexers were not required, as the four CS outputs are able to be used directly with the four LED Driver PCBs within the Satellite Scoreboard system. The two unused pins in the microcontroller 's Port B, PB4 and PB6, were selected to provide output to the motor controller IC.
All of the functions and interrupts used in the Main Scoreboard microcontroller program are used within the Satellite Scoreboard microcontroller program, with some minor alterations to account for the changes brought about by the additional motor control function:
The main changes in the Satellite Scoreboard program involve the interrupt routines. The receive interrupt has been altered to accommodate the smaller data array being used, and is done in a more direct manner in a two-dimensional buffer array. Additional command codes are also implemented to control the motor in one of three ways: go, which sets motormode equal to 2, sets motorf lag equal to 1 and starts the motor timer, enabling continuous movement; once, which sets motormode equal to 1, sets motorf lag equal to 1 and starts the motor timer, enabling the movement cycle which is performed once; and stop, which sets motormode equal to 1, and ceases movement once the current movement cycle is complete.
The timer routine in the Satellite Scoreboard microcontroller is used to control the motors motion, dependant upon the current value of motormode. Every five seconds, the state of the motorf lag state machine is progressed. In the final state, if motormode is equal to 1 the state machine returns to its idle state and the motor stops moving. If motormode is equal to 2, the state machine returns to the beginning of the movement cycle and continues moving.
As can be seen, the structure of this state machine ensures that the motor will always return the Satellite Scoreboard to its original position in normal operation.
A global variable MF is set during the infinite loop to register the values of PB4 and PB6, based on the current state of the motorf lag state machine. This output is set in main, and the MF variable is used to maintain the output values of PB4 and PB6 through the other routines that alter the outputs in Port B (such as SPI_Custom and Clock_Pulse).
Other functions are altered to accommodate the changes in data structure and to account for the motor control, but not other major changes to the core program logic are made.
Satellite Controller PCB.
The design of the Satellite Controller PCB consists of the ATMEGA16 microcontroller, RS-232 level voltage converter circuitry as per the Scoreboard Controller PCB and Schmitt triggers and power supply circuitry as per the SPI Driver PCBs. It also includes the motor control circuitry including wide ground tracks to the IC to increase heat dissipation. See Appendix C for full details of the Satellite Controller PCB schematic and PCB track layout.
The power supply modifications for the Satellite Scoreboards are identical to the Main Scoreboard power supply modifications, except that only one output cable is required instead of three.
Microcontroller Program Improvements.
Many functions within the LED Driver ICs are still unused, such as the blink function and custom character sets. Through the microcontroller, it may be possible to make use of these functions.
The LED Driver ICs use only a basic ASCII character set - there is no security to check whether an extended ASCII character has been sent from the Master Scorer PC. As a result, this will cause unwanted inverted characters to display if an extended ASCII character is used. The LED Driver ICs have also 'borrowed' some of the extended ASCII characters to replace unusable ASCII command characters such as Next Line and Carriage Return. Options so that these extra characters can be transparently utilised could be added to the microcontroller.
The delays used in SPI_Custom are currently long in period and therefore safe. However, it may be possible to shorten these delays and speed up the program.
Enabling a second timer in the Satellite Scoreboards program and having it perform the same power up test as the Main Scoreboard.
Future PCB Improvements.
Main Scoreboard System Electrical Anomalies.
In its current state there are two anomalies with the Main Scoreboard system.
Firstly, if the 5.0 V supply to the LED Driver PCBs fails then about 1 A extra current flows through the voltage regulators on the SPI Driver PCBs in total. This is another reason why there are 500 mA fuses on these PCBs; to protect against this mode of failure which would otherwise damage at least the voltage regulator. The normal operating current through each voltage regulator is 60 mA 22. This effect appears even if the 5 V, 0 V and common ground between LED Driver PCBs and SPI Driver PCBs are completely removed. Therefore, the current must flow down the multiple SPI cables. This could be, for example, positive current flow down the Clock cables and negative current flow down the CS cables to make a circuit. The MAX6952 data sheet shows an input leakage current of   2   A on the Data, Clock and CS pins but multiplied by 56 (the number of LED Driver PCBs), this does not even approach 1 A. It is hypothesised that the MAX6952 LED Driver IC 's do not have high impedance state gates when un-powered. Limited testing was done on this mode of failure for fear of damaging any components so protection was instead incorporated; the 500 mA fuses on the SPI Driver PCBs and the 10 A fuses in each of the three sections.
The second anomaly is caused by the reverse situation of the first. If the 12 V supply to the SPI Driver PCBs is cut then 4 V appears on the power supply rails on the SPI Driver PCBs. Again this must at least partly come down the SPI cables since it is still there if the 12 V power supply line is removed, but vanishes when the common ground is removed from the SPI Driver PCBs. So in this mode, current seems able to only flow in one direction down the SPI cables.
Without the 12 V supply to the middle section the other two sections do not work since this is where they get their SPI signals from. If the 12 V is not present on the end or small section then the top two lines of the scoreboard do not work in any section. The scoreboard needs to be fully powered up and all interconnects in place to function properly.
This section is designed for a competent programmer to maintain or enhance the scoring software.
The system is supplied on a CD which contains the program executable WMAGA.exe.
To install the system double click the executable file to run the Setup Installation Wizard. The wizard helps users to install or re-install the MasterScorer and judging station software onto the host machine. Figure 2-1 illustrates the first stage of the installation process.
The user is then greeted with a window illustrated in Figure 3-2. As with all installation wizards, read the details provided to help with the installation process and choose 'Next'.
Follow the step-by-step wizard to install the program until the window illustrated by Figure 2-3 is reached. It is important that the destination directory is "C:\". The software has been written such that all files and folders are placed onto the local hard disk.
Choose next, and follow the instructions to install the system.
In addition to installing the Master Scorer PC and Judging station software, some additional software is required.
This section describes the method of creating and running competitions using the scoring software.
To create and run a competition, three files are required; a file that contains all competitor numbers, names and clubs and a TEMPLATE file that specifies the number and types of events for that competition. A third file, known as a COMPETITION file is generated from the first two files.
The MasterScorer requires a detailed list of all competing gymnasts for a competition in CSV format. The details within this list are the Competitor Number, Competitor Name and Competitor Club.
These details can be entered into a spreadsheet for simplicity. Table 2-1 demonstrates a sample spreadsheet. In the spreadsheet, the column headings Competitor Number, Name and Club do not need to be entered.
A Visual Basic for Applications (VBA) program in MS Excel uses a pattern matching approach to read in the competitor data from the Excel spreadsheet to compile a Comma Separated Variable (CSV) file. The CSV file stores the data in the following format:
An example CSV file is shown in Figure 2-4.
In addition to this data, other information should be included in this CSV file such as comments and categories.
To insert a comment use the following character prefix:
This prefix denotes that the following data are comments. Standard comments include the date, name and venue of the competition. There should be a separate line prefixed with this character. At the top of the data file there should be three lines that contain these data in the order specified for correct identification of the data file.
To add a category use the following character prefix:
This symbol assumes that all standard entries belong to the specified category until the next category flag occurs. The data are stored in a normalised manner so corrections to the category name can be made once the data have been imported.
Figure 2-5 illustrates a standard CSV file that would be imported for a competition.
The CSV file can then be interpreted directly by the software.
A template file specifies the number and type of events that will take for a certain competition. To create a new template file, proceed as follows:
Select the 'Competition' menu from the Master Scorer PC and from the list choose 'Manage Competition Templates'.
In the details section, give the template a name, such as Female_I ncludi ng_Range&Conditioning.
Choose the sex of the competing gymnasts using the radio buttons.
Select the events the gymnast will compete in from the combo boxes.
If applicable, specify whether the competition is back to back, i.e. there are two sets of judges for each event.
If applicable, specify if a sixth event is required.
Click the 'Save' button and save the template file in "C:\service\tem plates".
To load an existing competition template so that it can be used or modified and saved for a new competition then choose the appropriate button from the panel.
Now that data and template files specifying competitors and the events that they will compete in have been successfully created, a competition file can be generated. To generate a competition file, load the competitor data and template files as illustrated in Figure 2-8 and choose 'Save'. The file will be saved in the default location C:\Service\Competitions and given a title as shown in the 'Table Name' field in Figure 2-8.
A dialog box confirming the 'Save' will appear and ask the user whether they wish to load the competition ready to start.
Before a competition can be started, a competition file must be loaded. Provided a competition file has been created in preparation for the event. To load a competition file, from the 'Competition' menu of the Master Scorer software, choose 'Load Competition'. This is illustrated in Figure 2-10. If a competition file has not been created, one can be created quickly using the method mentioned previously.
To start a Competition, choose 'Start Competition' from the 'Competition' menu.
To begin scoring competitions, a competition must be loaded and started from the Master Scorer PC. Details about this process are described in section 3.2.1. The next task is to set up the remote judging stations and register them for events. Load the judging station software by double clicking the 'Vision Scoring shortcut placed on the desktop.
The scoring system comprises six elements as illustrated in Figure 2-12.
Stage 1 - Register Device.
Once the competition has begun, a list of all available events is listed on all judging stations. Thus, suppose the judging station is placed next to the vault, the operator of the station would select 'VAULT:VT' from the list and click 'Register for selected event (F4)' to register that station to score gymnasts performing on the vault only.
Stage 2 - Identify Competitor.
The second stage is to identify the competitor. The judges already have a list of competing gymnasts. Each gymnast has a unique competitor number, and it is this number that is entered into the text area. Selecting 'Confirm' passes the competitor number as a parameter to the MasterScorer. The MasterScorer will then validate this competitor number. If the number exists in the competition database, then the number along with the competitor 's name is returned to the judging station. If the details are correct, the operator selects 'OK' to proceed. If the details are incorrect, say the wrong competitor number was entered for example, the user can choose 'Back (F5)' and enter a new competitor number.
If the number does not exist, or the competitor has already completed the event, the operator is informed by a suitable message in the action area.
Stage 3 - Enter start value.
The third stage is to enter the start value for the competitor. The text area is validated so a start value of between 0.000 and 10.000 inclusive can only be entered. To confirm the start value, choose 'OK'.
N.B. There is still an option available at this stage to change the competitor number in case the user has made an error.
Stage 4 - Enter deductions.
The fourth stage allows the judge to enter deductions for the performance. First, the judges must select the appropriate scoring algorithm from the combo-box. There are 14 possible algorithms to choose from, listed A-J. Selecting one of these algorithms from the combo box brings up a description of the algorithm in the text area.
For example, choosing I(2,2) select an algorithm that has 4 judges in total, 2 judges on panel A and 2 judges on panel B. The highest and lowest scores are removed and middle two scores are averaged to determine the final deductions.
Once entered, the deduction are validated in to lie within the region of 0 - 10 and not being greater than the start value.
As in previous stages, the user can change the deductions, start value and competitor.
Stage 5 - Submit Score.
The fifth stage presents a summary of the scoring process, presenting the start value, deductions and final score in a clear and sequential manner. Selecting the 'SUBMIT SCORES' button submits all of the summarised information to the competition database stored on the MasterScorer. On successfully submitting the scores, a dialog box informing the user appears. Depending on the configuration of the MasterScorer, the results will appear almost instantly on the main scoreboard. Alternatively, the results can be queued and displayed in a timely and organised manner. The satellite scoreboard can also display the results instantly, if required.
Alternatively, the user can choose the change the start value, deductions and hence the final score or even change the competitor.
Stage 6 - Shut down.
Users of the judging station software can exit the program at any time, by clicking the exit button located on the lower right of the screen. This will ensure the correct shutdown procedure is followed.
The Master Scorer PC generates competition results in CSV format as shown in Figure 2-13. The results can be ordered by the final score or by the competitor number and subsequently saved and printed.
Alternatively, using the CSV to HTML program converts the CSV results file into a HTML page with a table of results that can be uploaded to the WMAGA website. The program uses a FileOutputStream to create a new HTML file to store the results. A PrintStream is used to write the data inside HTML tags. The output file is shown in Figure 2-14.
The main body of the CSV to HTML program is as follows:
To upload the HTML files to the WMAGA web-server a File Transfer Protocol (FTP) program was written.
File Transfer Protocol is the standard mechanism provided by TCP/IP for copying a file from one host to another. Transferring files from one computer to another is one of the most common tasks used in a networking or internetworking environment.
Although transferring files from one system to another seems simple and straightforward, some problems must be dealt with first. For example, two systems may have different ways to represent text and data. Two systems have different directory structures. All of these problems have been solved by FTP in a very simple and elegant approach.
FTP differs from other client-server applications in that it establishes two connections between the hosts. One connection is used for data transfer, the other for control information (commands and responses). Separation of commands and data transfer makes FTP more efficient. The control connection uses very simple rules of communication. We need to transfer only a line of command or a line of response at a time. The data connection, on the other hand, needs more complex rules due to the variety of data types transferred.
Figure 2-15 shows the basic model of FTP. The client has three components: the user interface, the client control process, and the client data transfer process. The server has two components: the server control process and the server data transfer process. The control connection is made between the control processes. The data connection is made between the data transfer process.
The control connection remains connected during the entire interactive FTP session. The data connection is opened and then closed for each file transferred. It opens each time commands that involve transferring files are used, and it closes when the file is transferred. The two FTP connections; control and data, use different strategies and different port numbers.
The main FTP program code is as follows:
An initial menu structure was drawn up to effectively categorise the site 's content. This was done with the aim of making the website easily navigable. The following list shows the menu structure, indented to indicate the items present at that menu level. A - indicates a content page associated with that menu item(a link).
The Menu system code is based on HVMenu by Gers Versalius (). These are two client script Javascript files, menu _program.js and variable _file.js. The menu program file contains all the codes for executing the system, while the variable file contains all parameters and the structure of the menu. The structure is built by adding lines to the variable file in the format of the following example :
The following list, ordered in the same way as the above example, explains each parameter:
These files are loaded and run by the user 's web browser each time the page is visited. Menu_program.js and variable_file are included in the attached code CD.
A php script is executed by the server every time a browser hits a CGI button on the webpage(search . php). This is attached in the code CD.
A quick summary of this file:
Lines 1-30 Variable setting including the pass key registered with google, colour properties for generated HTML and the domain to be searched within.
Lines 31-48 Retrieve the results from google. Lines 48-Generate the HTML for the output.
This section details significant code from those portions of the code relating to the new entry panel for entering deductions. Further code was required to integrate this with the existing system, for example ensuring values were set as the wizard stepped through its items.
This class creates the deductions entry form interface, which is instantiated by the MainScreen class object. It creates all necessary interface objects upon instantiation and handles events thrown by these objects. Significant methods are: void changeAlgo () - Called when user changes algorithm selection. Enables and disables text fields and labels as appropriate to this selection. Clears all text fields ready for entry. void showSD () - Gets the scoring algorithm selection. Reads all the text fields for this algorithm and tests them for valid data. If they are all contain valid data then the mean and standard deviation is computed. Each values deviation from the mean is computed and compared to the standard deviation. It then sets all text field 's background colour to red when their value 's deviation is greater than the standard deviation. This method is called every time a user types into a text field. void setValues ()- called when user hits OK button to move to final stage. Checks algorithm selection, then tests appropriate texts fields for valid data. If this is found then two arrays of each panels scores are created and passed to the Averagers class to computer the final score. The finalscore variable is then set ready for submission to the master scorer.
DDTextField.java - A judging text entry field which implements the DocumentListener Interface to catch any events thrown by a user typing in these fields. When one of those events is received it calls the DeductionPanel object 's showSD () method.
A static class that contains all the scoring algorithms. These methods are named by the scoring algorithms they can handle, these are :
Double ABCD (double[ ] B, int noofvals) - noofvals indicates the position of the highest valid data in the array. Sums the values in b, and then subtracts the min and max. This is then divided by the number of relevant values minus two to give the average score, which is returned. double EG(double[] a, double[] b, int noOfVals, int correct) - Merges arrays a and b and then sums them. Subtracts the min and max of this to give the average score, this is then divided by the number of relevant values. The final score is returned. public static double IK(double[] a, double[] b, int numOfVals)- Merges a and b then calculates the mean of these values. This is returned. public static double FHJ(double[] b, int numOfVals) - Calculates the mean of b and returns it.
Contains and coordinates all interface elements including messaging features. Handles events thrown by messaging interface objects.
Significant methods are: actionPerformed () - Checks the event source, if it is from the messaging interface it checks if the station is connected and displays an error dialog if it is not. It then retrieves the message from the text field, calls its own addToMessageLog method, and uses the remote gui handler objects requestHelp method to transmit the message. addtoMessageLog() - sets the scrollbarchangelistener shouldscroll property to true and then appends the message, annotated with "this station says" to the message log panel.
Event handler for message log scroll bar. To ensure that the scrollbar adopts the lowest position and gives precedence to the last received message it is necessary to handle document events thrown by the textarea. Immediately after the area is updated, this handler retrieves the new maximum position of the scrollbar and sets its slider to this value.
Provides an interface to JINI and RMI methods to allow a connection to the masterscorer. Significant methods are: requestHelp (String s) - Checks for a communications link and displays an error if one is n't found. Then uses the masterscorer interface to send the message properly formatted for the display panel on the masters corer. showMes sage- called when a message is received from the masters corer. Simply calls the MainScreen 's addToMessageLog Method().
Operates on the same principles as the client messaging system. The MesssageClientsPanel Object provides all the interface elements and the methods to handle them. The MessageClientPanel object handles events thrown by the user sending a message. Its sendMsg() method determines whether the station is in private conversation or broadcasting and appends the appropriate annotation to the message log with the message. It then sends the message. The MainScreen object provides the interface to receive a message from the client with its displaymsg() method, when called this appends the message annotated to the messagelog.
This section details the modified and original code for the satellite scoreboards.
When instantiated creates a softscoreboard object of appropriate size for the satellite and populates it with sbrow objects, which in turn are populated with SBChar objects. Provides methods to advance, pause, clear the scoreboard. It also provides the methods to retrieve the softscoreboard objects and update characters on it. Contains an SBlink object to provide access to the serial port.
Provides lowest level link to serial port. Uses j avax. comms package to interface with the hardware. When instantiated creates a display window that shows all data sent to the serial port. It sets up and takes ownership of the port. Significant methods are:
Void Send(int location, int value) - sends three values using sendviaseriallink (). These are the setup code(255), the location and the value.
Sendviaseriallink(int value) - Converts the integer value to binary, then writes this to the serial port.Updates the display windows with the value sent.
Provides a panel for the software score board. Adds three buttons to this panel, stop, go, once. The softscoreboard object handles events thrown by these buttons. When one of these events is received it uses the SBController 's SBLink object to transmit the codes for the motor operations.
These are.
When instantiated creates an SBCDpanel with a grid layout, then adds references to the SBController 's SBChar objects, so that they are displayed on the panel as they are updated.
A graphical panel for display on the interface. This panel holds SBChars and shows the user values as they are written to the board.
A data structure representing a row on the board.
A data structure representing a character on the board.
This section aims to give further technical details regarding the structural analysis of the satellite scoreboard as well as details on the specifics of the material selection and its subsequent tooling.
In order to select the motor to rotationally drive the satellite scoreboards it is required that the torque needed to drive said motion is known. This calculation is shown step by step here:
The dimensions of the satellite scoreboard are:
Where; a = 0.5m b = 0.5m c = 0.1m.
Now for this calculation a measurement of mass is required and to err on the side of caution a value of m = 10kg will be used.
Now torque, M =.
In order to calculate the torque one must firstly find the moment of inertia of the body;.
Now the scoreboard is required to rotate at 2rpm which is 4  /60 rad/sec.
Therefore; torque, M = 0.21 x 0.22 = 46mNm.
To allow for the starting torque being higher than this value, due to forces acting against the motion, then a safety factor of three times is introduced giving the required torque form the motor to be; M   150mNm.
As mentioned in the summary report (section 5.5.2.1.) it was decided that because of the success of the designs for the main scoreboard, a similar design, material choice and manufacturing processes were taken. Last years group used a qualitative and then a numeric weighting system for each material based upon different fundamental criteria. A number, 1 to 5 was assigned to the qualitative measure (1 being the worst and 5 the best) and then this number was multiplied by a weighting factor, depending on the decided relative importance of each criteria. The team this year agreed with last years teams material choice and below are the tables used to attain this conclusion:
The following table illustrates the results of the comparison:
It is visible that a sandwich material is by far the best material for the casing.
Last year it was decided to construct the framework for the scoreboard from mild steel. After discussion it was debated as to whether this was the wisest choice of material, especially so for the satellite scoreboards. It was unanimously agreed that because of the function and manufacturing processes that metal was the best material but the question was raised as to which metal would work best. It was felt that because the stresses and deflections placed on the framework (see section 3.3.1) were so minimal that the strength properties of steel were too excessive due to its high density. Similar strength can be achieved with aluminium, still massively over the potential stresses acting on it, but with a much lower density and cost:
Therefore it was decided from the above data that aluminium is be a wiser choice of material because it is lighter and more cost effective, two important parameters asked of the design by the specification.
Similarly to the previous years report, a structural analysis of the framework is required to ensure that no distortion will occur during handling. Common sense would dictate that a smaller, lighter version of the main scoreboard would suffer no distortion (as the main board did not) but because aluminium tubing is being used on the satellites, for safety, the calculation will be repeated.
The worst case scenario would again be the framework being supported at one end only, thus creating a simple cantilever beam with uniform loading.
The aluminium tubing is the same size as the steel tubing used for the main scoreboard and is 19mm square (3/4") with a wall thickness of 1.6mm.
With breadth, b and height, h of the section known the 2nd moment of area for the frame is; giving:
Now with load, W, and length of the beam, L, known then the maximum bending moment on a uniformly loaded cantilever beam is;.
Now again erring on the side of caution, let the mass, m = 10kg and L = 0.5m, with four members to take the load;.
With the Young 's Modulus, E for steel being 71GPa, the maximum deflection,.
A maximum deflection of 1 mm is negligible and thus acceptable.
The stress, is given by , so:
As the yield strength for aluminium is 135MPa then 1MPa is again an acceptable value.
For the LED support bars, once again the material selection was changed from the use of mild carbon steel to aluminium in order to reduce the weight of the system. The height of the LED support bars was also increased to 40mm so that there was more room to attach the Velcro that was added as part of the design modifications.
In order to perform a structural analysis of the LED support bar the 'worst case' scenario needs to be used and that would be; an overestimated mass, m=1.5kg, spread uniformly over the length of a bar, L=0.5m, with the bar acting as a simply supported beam (supported at both ends).
The aluminium section used is a 15 x 40mm U-section with a wall thickness of 1.6mm. The yield strength of aluminium is 50MPa.
The 2nd moment of area is giving:
Now the maximum bending moment is.
So;.
With the Young 's Modulus, E for steel being 71GPa, the maximum deflection,.
A maximum deflection of 1mm is again negligible and is thus an extremely acceptable value.
The stress, is given by , so:
As the yield strength for aluminium is 135MPa then 0.555MPa is again an acceptable value.
As mentioned before (Summary Report section 4.5.3.9.) the dome covering will be made with a vacuum-formed thermoplastic. In order to achieve this casing a pattern is required in which the thermoplastic can be vacuum-formed over. Due to the required size for the covering and for ease of manufacture, the dome pattern is cut and shaped layers of plywood, coated with a thin resin to smooth the grain of the plywood (see Appendix N - Figure N-3 for the full working drawings of the pattern).
The above figure shows the diameters of the 18mm pieces of plywood that have been glued together in order to create the dome pattern. Two additional 18mm pieces of plywood are added to the base so that a clean cut can be achieved for the base of the dome covering after the pattern is removed from within the finished covering. Once the covering is removed from the mould, a 50mm hole is then cut in the top of the dome, to allow the main shaft to pass through.
The following sections gives details on materials and quantities needed to construct a satellite scoreboard.
The material used is aluminium square tubing of side width 19mm and wall thickness 1.6mm.
The material used for the casing of the satellites is a composite material called Dibond, which is a 1.4mm thick sheet of polyethylene sandwiched between two 0.3mm sheets of aluminium. Dimensions of this material required for each satellite can be seen in the table below.
The material used for the front panel is 3mm thick translucent Perspex in a black neutral colour. Its dimensions are 473 x 473mm for each satellite.
